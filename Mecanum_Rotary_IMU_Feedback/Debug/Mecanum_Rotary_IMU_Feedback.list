
Mecanum_Rotary_IMU_Feedback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  0800a468  0800a468  0001a468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abd0  0800abd0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800abd0  0800abd0  0001abd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abd8  0800abd8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abd8  0800abd8  0001abd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abdc  0800abdc  0001abdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800abe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0000436c  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200043ec  200043ec  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001942b  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ec2  00000000  00000000  000394db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c8  00000000  00000000  0003d3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014f8  00000000  00000000  0003ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002637d  00000000  00000000  0003ff60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001adcc  00000000  00000000  000662dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e633b  00000000  00000000  000810a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001673e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ab0  00000000  00000000  00167434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a450 	.word	0x0800a450

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800a450 	.word	0x0800a450

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b974 	b.w	8000ebc <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	468e      	mov	lr, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14d      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4694      	mov	ip, r2
 8000bfe:	d969      	bls.n	8000cd4 <__udivmoddi4+0xe8>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b152      	cbz	r2, 8000c1c <__udivmoddi4+0x30>
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	f1c2 0120 	rsb	r1, r2, #32
 8000c0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c16:	ea41 0e03 	orr.w	lr, r1, r3
 8000c1a:	4094      	lsls	r4, r2
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	0c21      	lsrs	r1, r4, #16
 8000c22:	fbbe f6f8 	udiv	r6, lr, r8
 8000c26:	fa1f f78c 	uxth.w	r7, ip
 8000c2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c32:	fb06 f107 	mul.w	r1, r6, r7
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c42:	f080 811f 	bcs.w	8000e84 <__udivmoddi4+0x298>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 811c 	bls.w	8000e84 <__udivmoddi4+0x298>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3310 	mls	r3, r8, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 f707 	mul.w	r7, r0, r7
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	d90a      	bls.n	8000c7e <__udivmoddi4+0x92>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c70:	f080 810a 	bcs.w	8000e88 <__udivmoddi4+0x29c>
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	f240 8107 	bls.w	8000e88 <__udivmoddi4+0x29c>
 8000c7a:	4464      	add	r4, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	1be4      	subs	r4, r4, r7
 8000c84:	2600      	movs	r6, #0
 8000c86:	b11d      	cbz	r5, 8000c90 <__udivmoddi4+0xa4>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0xc2>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	f000 80ef 	beq.w	8000e7e <__udivmoddi4+0x292>
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f683 	clz	r6, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d14a      	bne.n	8000d4c <__udivmoddi4+0x160>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xd4>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80f9 	bhi.w	8000eb2 <__udivmoddi4+0x2c6>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	469e      	mov	lr, r3
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e0      	beq.n	8000c90 <__udivmoddi4+0xa4>
 8000cce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cd2:	e7dd      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000cd4:	b902      	cbnz	r2, 8000cd8 <__udivmoddi4+0xec>
 8000cd6:	deff      	udf	#255	; 0xff
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	f040 8092 	bne.w	8000e06 <__udivmoddi4+0x21a>
 8000ce2:	eba1 010c 	sub.w	r1, r1, ip
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	2601      	movs	r6, #1
 8000cf0:	0c20      	lsrs	r0, r4, #16
 8000cf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfe:	fb0e f003 	mul.w	r0, lr, r3
 8000d02:	4288      	cmp	r0, r1
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x12c>
 8000d06:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x12a>
 8000d10:	4288      	cmp	r0, r1
 8000d12:	f200 80cb 	bhi.w	8000eac <__udivmoddi4+0x2c0>
 8000d16:	4643      	mov	r3, r8
 8000d18:	1a09      	subs	r1, r1, r0
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d20:	fb07 1110 	mls	r1, r7, r0, r1
 8000d24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d28:	fb0e fe00 	mul.w	lr, lr, r0
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x156>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x154>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f200 80bb 	bhi.w	8000eb6 <__udivmoddi4+0x2ca>
 8000d40:	4608      	mov	r0, r1
 8000d42:	eba4 040e 	sub.w	r4, r4, lr
 8000d46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d4a:	e79c      	b.n	8000c86 <__udivmoddi4+0x9a>
 8000d4c:	f1c6 0720 	rsb	r7, r6, #32
 8000d50:	40b3      	lsls	r3, r6
 8000d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d62:	431c      	orrs	r4, r3
 8000d64:	40f9      	lsrs	r1, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d72:	0c20      	lsrs	r0, r4, #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fb09 1118 	mls	r1, r9, r8, r1
 8000d7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d80:	fb08 f00e 	mul.w	r0, r8, lr
 8000d84:	4288      	cmp	r0, r1
 8000d86:	fa02 f206 	lsl.w	r2, r2, r6
 8000d8a:	d90b      	bls.n	8000da4 <__udivmoddi4+0x1b8>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d94:	f080 8088 	bcs.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	f240 8085 	bls.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dac:	fb09 1110 	mls	r1, r9, r0, r1
 8000db0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	458e      	cmp	lr, r1
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x1e2>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dc4:	d26c      	bcs.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dc6:	458e      	cmp	lr, r1
 8000dc8:	d96a      	bls.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4461      	add	r1, ip
 8000dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd6:	eba1 010e 	sub.w	r1, r1, lr
 8000dda:	42a1      	cmp	r1, r4
 8000ddc:	46c8      	mov	r8, r9
 8000dde:	46a6      	mov	lr, r4
 8000de0:	d356      	bcc.n	8000e90 <__udivmoddi4+0x2a4>
 8000de2:	d053      	beq.n	8000e8c <__udivmoddi4+0x2a0>
 8000de4:	b15d      	cbz	r5, 8000dfe <__udivmoddi4+0x212>
 8000de6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dea:	eb61 010e 	sbc.w	r1, r1, lr
 8000dee:	fa01 f707 	lsl.w	r7, r1, r7
 8000df2:	fa22 f306 	lsr.w	r3, r2, r6
 8000df6:	40f1      	lsrs	r1, r6
 8000df8:	431f      	orrs	r7, r3
 8000dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfe:	2600      	movs	r6, #0
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	f1c2 0320 	rsb	r3, r2, #32
 8000e0a:	40d8      	lsrs	r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa21 f303 	lsr.w	r3, r1, r3
 8000e14:	4091      	lsls	r1, r2
 8000e16:	4301      	orrs	r1, r0
 8000e18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1c:	fa1f fe8c 	uxth.w	lr, ip
 8000e20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e24:	fb07 3610 	mls	r6, r7, r0, r3
 8000e28:	0c0b      	lsrs	r3, r1, #16
 8000e2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e32:	429e      	cmp	r6, r3
 8000e34:	fa04 f402 	lsl.w	r4, r4, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x260>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e42:	d22f      	bcs.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e44:	429e      	cmp	r6, r3
 8000e46:	d92d      	bls.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1b9b      	subs	r3, r3, r6
 8000e4e:	b289      	uxth	r1, r1
 8000e50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e54:	fb07 3316 	mls	r3, r7, r6, r3
 8000e58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x28a>
 8000e64:	eb1c 0101 	adds.w	r1, ip, r1
 8000e68:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e6c:	d216      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d914      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e72:	3e02      	subs	r6, #2
 8000e74:	4461      	add	r1, ip
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e7c:	e738      	b.n	8000cf0 <__udivmoddi4+0x104>
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e705      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000e84:	4606      	mov	r6, r0
 8000e86:	e6e3      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6f8      	b.n	8000c7e <__udivmoddi4+0x92>
 8000e8c:	454b      	cmp	r3, r9
 8000e8e:	d2a9      	bcs.n	8000de4 <__udivmoddi4+0x1f8>
 8000e90:	ebb9 0802 	subs.w	r8, r9, r2
 8000e94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7a3      	b.n	8000de4 <__udivmoddi4+0x1f8>
 8000e9c:	4646      	mov	r6, r8
 8000e9e:	e7ea      	b.n	8000e76 <__udivmoddi4+0x28a>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	e794      	b.n	8000dce <__udivmoddi4+0x1e2>
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	e7d1      	b.n	8000e4c <__udivmoddi4+0x260>
 8000ea8:	46d0      	mov	r8, sl
 8000eaa:	e77b      	b.n	8000da4 <__udivmoddi4+0x1b8>
 8000eac:	3b02      	subs	r3, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	e732      	b.n	8000d18 <__udivmoddi4+0x12c>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e709      	b.n	8000cca <__udivmoddi4+0xde>
 8000eb6:	4464      	add	r4, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e742      	b.n	8000d42 <__udivmoddi4+0x156>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ed2:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000ed4:	4a29      	ldr	r2, [pc, #164]	; (8000f7c <MX_ADC1_Init+0xbc>)
 8000ed6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000eda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ede:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee0:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ee6:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <MX_ADC1_Init+0xc0>)
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000f0e:	2202      	movs	r2, #2
 8000f10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f20:	4815      	ldr	r0, [pc, #84]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000f22:	f001 ff5d 	bl	8002de0 <HAL_ADC_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f2c:	f001 fc02 	bl	8002734 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000f42:	f001 ff91 	bl	8002e68 <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f4c:	f001 fbf2 	bl	8002734 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f50:	2303      	movs	r3, #3
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000f62:	f001 ff81 	bl	8002e68 <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000f6c:	f001 fbe2 	bl	8002734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	2000009c 	.word	0x2000009c
 8000f7c:	40012000 	.word	0x40012000
 8000f80:	0f000001 	.word	0x0f000001

08000f84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <HAL_ADC_MspInit+0xdc>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d157      	bne.n	8001056 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a2d      	ldr	r2, [pc, #180]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a26      	ldr	r2, [pc, #152]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fde:	230c      	movs	r3, #12
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481d      	ldr	r0, [pc, #116]	; (8001068 <HAL_ADC_MspInit+0xe4>)
 8000ff2:	f003 fb85 	bl	8004700 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <HAL_ADC_MspInit+0xe8>)
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <HAL_ADC_MspInit+0xec>)
 8000ffa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_ADC_MspInit+0xe8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <HAL_ADC_MspInit+0xe8>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_ADC_MspInit+0xe8>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_ADC_MspInit+0xe8>)
 8001010:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001014:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_ADC_MspInit+0xe8>)
 8001018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800101c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_ADC_MspInit+0xe8>)
 8001020:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001024:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_ADC_MspInit+0xe8>)
 8001028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800102c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <HAL_ADC_MspInit+0xe8>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_ADC_MspInit+0xe8>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <HAL_ADC_MspInit+0xe8>)
 800103c:	f003 f876 	bl	800412c <HAL_DMA_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001046:	f001 fb75 	bl	8002734 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_ADC_MspInit+0xe8>)
 800104e:	639a      	str	r2, [r3, #56]	; 0x38
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <HAL_ADC_MspInit+0xe8>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40012000 	.word	0x40012000
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000
 800106c:	200000e4 	.word	0x200000e4
 8001070:	40026410 	.word	0x40026410

08001074 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	4619      	mov	r1, r3
 8001082:	2007      	movs	r0, #7
 8001084:	f000 fac4 	bl	8001610 <bno055_writeData>
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4619      	mov	r1, r3
 800109e:	203d      	movs	r0, #61	; 0x3d
 80010a0:	f000 fab6 	bl	8001610 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d103      	bne.n	80010b2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80010aa:	2013      	movs	r0, #19
 80010ac:	f000 faa4 	bl	80015f8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80010b0:	e002      	b.n	80010b8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80010b2:	2007      	movs	r0, #7
 80010b4:	f000 faa0 	bl	80015f8 <bno055_delay>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff ffe3 	bl	8001090 <bno055_setOperationMode>
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}

080010ce <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80010d2:	200c      	movs	r0, #12
 80010d4:	f7ff ffdc 	bl	8001090 <bno055_setOperationMode>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80010e0:	2120      	movs	r1, #32
 80010e2:	203f      	movs	r0, #63	; 0x3f
 80010e4:	f000 fa94 	bl	8001610 <bno055_writeData>
  bno055_delay(700);
 80010e8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80010ec:	f000 fa84 	bl	80015f8 <bno055_delay>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
  bno055_reset();
 80010fa:	f7ff ffef 	bl	80010dc <bno055_reset>

  uint8_t id = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	2000      	movs	r0, #0
 800110a:	f000 fb6d 	bl	80017e8 <bno055_readData>
  if (id != BNO055_ID) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2ba0      	cmp	r3, #160	; 0xa0
 8001112:	d004      	beq.n	800111e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	4619      	mov	r1, r3
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <bno055_setup+0x4c>)
 800111a:	f007 f981 	bl	8008420 <iprintf>
  }
  bno055_setPage(0);
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff ffa8 	bl	8001074 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001124:	2100      	movs	r1, #0
 8001126:	203f      	movs	r0, #63	; 0x3f
 8001128:	f000 fa72 	bl	8001610 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 800112c:	f7ff ffc8 	bl	80010c0 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001130:	200a      	movs	r0, #10
 8001132:	f000 fa61 	bl	80015f8 <bno055_delay>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	0800a468 	.word	0x0800a468

08001144 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001144:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001148:	b09e      	sub	sp, #120	; 0x78
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff ff8e 	bl	8001074 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800115c:	2b20      	cmp	r3, #32
 800115e:	d108      	bne.n	8001172 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001160:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001168:	2208      	movs	r2, #8
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fb3c 	bl	80017e8 <bno055_readData>
 8001170:	e007      	b.n	8001182 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001172:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800117a:	2206      	movs	r2, #6
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fb33 	bl	80017e8 <bno055_readData>

  double scale = 1;
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	4b8b      	ldr	r3, [pc, #556]	; (80013b4 <bno055_getVector+0x270>)
 8001188:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800118c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001190:	2b0e      	cmp	r3, #14
 8001192:	d109      	bne.n	80011a8 <bno055_getVector+0x64>
    scale = magScale;
 8001194:	4b88      	ldr	r3, [pc, #544]	; (80013b8 <bno055_getVector+0x274>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9ab 	bl	80004f4 <__aeabi_ui2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80011a6:	e03e      	b.n	8001226 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80011a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d007      	beq.n	80011c0 <bno055_getVector+0x7c>
 80011b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b4:	2b28      	cmp	r3, #40	; 0x28
 80011b6:	d003      	beq.n	80011c0 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80011b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011bc:	2b2e      	cmp	r3, #46	; 0x2e
 80011be:	d109      	bne.n	80011d4 <bno055_getVector+0x90>
    scale = accelScale;
 80011c0:	4b7e      	ldr	r3, [pc, #504]	; (80013bc <bno055_getVector+0x278>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f995 	bl	80004f4 <__aeabi_ui2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80011d2:	e028      	b.n	8001226 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80011d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d8:	2b14      	cmp	r3, #20
 80011da:	d109      	bne.n	80011f0 <bno055_getVector+0xac>
    scale = angularRateScale;
 80011dc:	4b78      	ldr	r3, [pc, #480]	; (80013c0 <bno055_getVector+0x27c>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f987 	bl	80004f4 <__aeabi_ui2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80011ee:	e01a      	b.n	8001226 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80011f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011f4:	2b1a      	cmp	r3, #26
 80011f6:	d109      	bne.n	800120c <bno055_getVector+0xc8>
    scale = eulerScale;
 80011f8:	4b72      	ldr	r3, [pc, #456]	; (80013c4 <bno055_getVector+0x280>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f979 	bl	80004f4 <__aeabi_ui2d>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800120a:	e00c      	b.n	8001226 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 800120c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001210:	2b20      	cmp	r3, #32
 8001212:	d108      	bne.n	8001226 <bno055_getVector+0xe2>
    scale = quaScale;
 8001214:	4b6c      	ldr	r3, [pc, #432]	; (80013c8 <bno055_getVector+0x284>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f96b 	bl	80004f4 <__aeabi_ui2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }
  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122a:	2220      	movs	r2, #32
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f007 f8ee 	bl	8008410 <memset>
    if (vec == BNO055_VECTOR_QUATERNION) {
 8001234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001238:	2b20      	cmp	r3, #32
 800123a:	d150      	bne.n	80012de <bno055_getVector+0x19a>
      xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800123c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21b      	sxth	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f960 	bl	8000514 <__aeabi_i2d>
 8001254:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001258:	f7ff faf0 	bl	800083c <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001264:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	b21a      	sxth	r2, r3
 800126c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21b      	sxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f94c 	bl	8000514 <__aeabi_i2d>
 800127c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001280:	f7ff fadc 	bl	800083c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800128c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b21a      	sxth	r2, r3
 8001294:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21b      	sxth	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f938 	bl	8000514 <__aeabi_i2d>
 80012a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80012a8:	f7ff fac8 	bl	800083c <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80012b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f924 	bl	8000514 <__aeabi_i2d>
 80012cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80012d0:	f7ff fab4 	bl	800083c <__aeabi_ddiv>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80012dc:	e03b      	b.n	8001356 <bno055_getVector+0x212>
    } else {
      xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80012de:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f90f 	bl	8000514 <__aeabi_i2d>
 80012f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80012fa:	f7ff fa9f 	bl	800083c <__aeabi_ddiv>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001306:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21a      	sxth	r2, r3
 800130e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21b      	sxth	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f8fb 	bl	8000514 <__aeabi_i2d>
 800131e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001322:	f7ff fa8b 	bl	800083c <__aeabi_ddiv>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800132e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f8e7 	bl	8000514 <__aeabi_i2d>
 8001346:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800134a:	f7ff fa77 	bl	800083c <__aeabi_ddiv>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    return xyz;
 8001356:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800135a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800135e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001362:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001366:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800136a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800136e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001372:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001376:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800137a:	ec49 8b14 	vmov	d4, r8, r9
 800137e:	ec45 4b15 	vmov	d5, r4, r5
 8001382:	ec41 0b16 	vmov	d6, r0, r1
 8001386:	ec43 2b17 	vmov	d7, r2, r3
  }
 800138a:	eeb0 0a44 	vmov.f32	s0, s8
 800138e:	eef0 0a64 	vmov.f32	s1, s9
 8001392:	eeb0 1a45 	vmov.f32	s2, s10
 8001396:	eef0 1a65 	vmov.f32	s3, s11
 800139a:	eeb0 2a46 	vmov.f32	s4, s12
 800139e:	eef0 2a66 	vmov.f32	s5, s13
 80013a2:	eeb0 3a47 	vmov.f32	s6, s14
 80013a6:	eef0 3a67 	vmov.f32	s7, s15
 80013aa:	3778      	adds	r7, #120	; 0x78
 80013ac:	46bd      	mov	sp, r7
 80013ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013b2:	bf00      	nop
 80013b4:	3ff00000 	.word	0x3ff00000
 80013b8:	20000006 	.word	0x20000006
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000002 	.word	0x20000002
 80013c4:	20000004 	.word	0x20000004
 80013c8:	20000008 	.word	0x20000008

080013cc <bno055_getVectorQuaternion>:
    return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
  }
  bno055_vector_t bno055_getVectorGravity() {
    return bno055_getVector(BNO055_VECTOR_GRAVITY);
  }
  bno055_vector_t bno055_getVectorQuaternion() {
 80013cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013d0:	b090      	sub	sp, #64	; 0x40
 80013d2:	af00      	add	r7, sp, #0
    return bno055_getVector(BNO055_VECTOR_QUATERNION);
 80013d4:	2020      	movs	r0, #32
 80013d6:	f7ff feb5 	bl	8001144 <bno055_getVector>
 80013da:	eeb0 4a40 	vmov.f32	s8, s0
 80013de:	eef0 4a60 	vmov.f32	s9, s1
 80013e2:	eeb0 5a41 	vmov.f32	s10, s2
 80013e6:	eef0 5a61 	vmov.f32	s11, s3
 80013ea:	eeb0 6a42 	vmov.f32	s12, s4
 80013ee:	eef0 6a62 	vmov.f32	s13, s5
 80013f2:	eeb0 7a43 	vmov.f32	s14, s6
 80013f6:	eef0 7a63 	vmov.f32	s15, s7
 80013fa:	ed87 4b08 	vstr	d4, [r7, #32]
 80013fe:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001402:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001406:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800140a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800140e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001412:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001416:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800141a:	ec49 8b14 	vmov	d4, r8, r9
 800141e:	ec45 4b15 	vmov	d5, r4, r5
 8001422:	ec41 0b16 	vmov	d6, r0, r1
 8001426:	ec43 2b17 	vmov	d7, r2, r3
  }
 800142a:	eeb0 0a44 	vmov.f32	s0, s8
 800142e:	eef0 0a64 	vmov.f32	s1, s9
 8001432:	eeb0 1a45 	vmov.f32	s2, s10
 8001436:	eef0 1a65 	vmov.f32	s3, s11
 800143a:	eeb0 2a46 	vmov.f32	s4, s12
 800143e:	eef0 2a66 	vmov.f32	s5, s13
 8001442:	eeb0 3a47 	vmov.f32	s6, s14
 8001446:	eef0 3a67 	vmov.f32	s7, s15
 800144a:	3740      	adds	r7, #64	; 0x40
 800144c:	46bd      	mov	sp, r7
 800144e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001454 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <MX_CAN1_Init+0x9c>)
 800145c:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <MX_CAN1_Init+0xa0>)
 800145e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <MX_CAN1_Init+0x9c>)
 8001462:	2206      	movs	r2, #6
 8001464:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <MX_CAN1_Init+0x9c>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <MX_CAN1_Init+0x9c>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001472:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_CAN1_Init+0x9c>)
 8001474:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001478:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MX_CAN1_Init+0x9c>)
 800147c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001480:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <MX_CAN1_Init+0x9c>)
 8001484:	2200      	movs	r2, #0
 8001486:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MX_CAN1_Init+0x9c>)
 800148a:	2200      	movs	r2, #0
 800148c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <MX_CAN1_Init+0x9c>)
 8001490:	2200      	movs	r2, #0
 8001492:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <MX_CAN1_Init+0x9c>)
 8001496:	2200      	movs	r2, #0
 8001498:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <MX_CAN1_Init+0x9c>)
 800149c:	2200      	movs	r2, #0
 800149e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_CAN1_Init+0x9c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014a6:	4812      	ldr	r0, [pc, #72]	; (80014f0 <MX_CAN1_Init+0x9c>)
 80014a8:	f001 fefc 	bl	80032a4 <HAL_CAN_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80014b2:	f001 f93f 	bl	8002734 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80014b6:	2301      	movs	r3, #1
 80014b8:	623b      	str	r3, [r7, #32]
  	canfilterconfig.FilterBank = 0; // anything between 0 to slaveStartFilterBank (10,14)
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  	canfilterconfig.FilterIdHigh = 0x0000;
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
  	canfilterconfig.FilterIdLow = 0x0000;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  	canfilterconfig.FilterMaskIdHigh = 0x0000;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  	canfilterconfig.FilterMaskIdLow = 0x0000;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61fb      	str	r3, [r7, #28]
  	canfilterconfig.SlaveStartFilterBank = 14; // how many filter to assign to the CAN1 (master Can)(13 to 27 are assigned to slave CAN (CAN2) OR 0 to 12 are assined to CAN1
 80014da:	230e      	movs	r3, #14
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24

  	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80014de:	463b      	mov	r3, r7
 80014e0:	4619      	mov	r1, r3
 80014e2:	4803      	ldr	r0, [pc, #12]	; (80014f0 <MX_CAN1_Init+0x9c>)
 80014e4:	f001 ffda 	bl	800349c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000144 	.word	0x20000144
 80014f4:	40006400 	.word	0x40006400

080014f8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_CAN_MspInit+0x94>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d134      	bne.n	8001584 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_CAN_MspInit+0x98>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <HAL_CAN_MspInit+0x98>)
 8001524:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_CAN_MspInit+0x98>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_CAN_MspInit+0x98>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a14      	ldr	r2, [pc, #80]	; (8001590 <HAL_CAN_MspInit+0x98>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_CAN_MspInit+0x98>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001552:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001564:	2309      	movs	r3, #9
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4809      	ldr	r0, [pc, #36]	; (8001594 <HAL_CAN_MspInit+0x9c>)
 8001570:	f003 f8c6 	bl	8004700 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2105      	movs	r1, #5
 8001578:	2014      	movs	r0, #20
 800157a:	f002 fdad 	bl	80040d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800157e:	2014      	movs	r0, #20
 8001580:	f002 fdc6 	bl	8004110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40006400 	.word	0x40006400
 8001590:	40023800 	.word	0x40023800
 8001594:	40020000 	.word	0x40020000

08001598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_DMA_Init+0x3c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <MX_DMA_Init+0x3c>)
 80015a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_DMA_Init+0x3c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2105      	movs	r1, #5
 80015be:	2038      	movs	r0, #56	; 0x38
 80015c0:	f002 fd8a 	bl	80040d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015c4:	2038      	movs	r0, #56	; 0x38
 80015c6:	f002 fda3 	bl	8004110 <HAL_NVIC_EnableIRQ>

}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <bno055_assignI2C+0x1c>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	2000016c 	.word	0x2000016c

080015f8 <bno055_delay>:

void bno055_delay(int time) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fbc8 	bl	8002d98 <HAL_Delay>
#endif
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af02      	add	r7, sp, #8
 8001616:	4603      	mov	r3, r0
 8001618:	460a      	mov	r2, r1
 800161a:	71fb      	strb	r3, [r7, #7]
 800161c:	4613      	mov	r3, r2
 800161e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	733b      	strb	r3, [r7, #12]
 8001624:	79bb      	ldrb	r3, [r7, #6]
 8001626:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001628:	4b5a      	ldr	r3, [pc, #360]	; (8001794 <bno055_writeData+0x184>)
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	f107 020c 	add.w	r2, r7, #12
 8001630:	230a      	movs	r3, #10
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2302      	movs	r3, #2
 8001636:	2150      	movs	r1, #80	; 0x50
 8001638:	f003 fb72 	bl	8004d20 <HAL_I2C_Master_Transmit>
 800163c:	4603      	mov	r3, r0
 800163e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80a0 	beq.w	8001788 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d103      	bne.n	8001656 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800164e:	4852      	ldr	r0, [pc, #328]	; (8001798 <bno055_writeData+0x188>)
 8001650:	f006 ff6c 	bl	800852c <puts>
 8001654:	e012      	b.n	800167c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	2b03      	cmp	r3, #3
 800165a:	d103      	bne.n	8001664 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800165c:	484f      	ldr	r0, [pc, #316]	; (800179c <bno055_writeData+0x18c>)
 800165e:	f006 ff65 	bl	800852c <puts>
 8001662:	e00b      	b.n	800167c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d103      	bne.n	8001672 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800166a:	484d      	ldr	r0, [pc, #308]	; (80017a0 <bno055_writeData+0x190>)
 800166c:	f006 ff5e 	bl	800852c <puts>
 8001670:	e004      	b.n	800167c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	4619      	mov	r1, r3
 8001676:	484b      	ldr	r0, [pc, #300]	; (80017a4 <bno055_writeData+0x194>)
 8001678:	f006 fed2 	bl	8008420 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800167c:	4b45      	ldr	r3, [pc, #276]	; (8001794 <bno055_writeData+0x184>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f003 fe7f 	bl	8005384 <HAL_I2C_GetError>
 8001686:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d07e      	beq.n	800178c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d103      	bne.n	800169c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001694:	4844      	ldr	r0, [pc, #272]	; (80017a8 <bno055_writeData+0x198>)
 8001696:	f006 ff49 	bl	800852c <puts>
 800169a:	e021      	b.n	80016e0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d103      	bne.n	80016aa <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80016a2:	4842      	ldr	r0, [pc, #264]	; (80017ac <bno055_writeData+0x19c>)
 80016a4:	f006 ff42 	bl	800852c <puts>
 80016a8:	e01a      	b.n	80016e0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d103      	bne.n	80016b8 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80016b0:	483f      	ldr	r0, [pc, #252]	; (80017b0 <bno055_writeData+0x1a0>)
 80016b2:	f006 ff3b 	bl	800852c <puts>
 80016b6:	e013      	b.n	80016e0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d103      	bne.n	80016c6 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80016be:	483d      	ldr	r0, [pc, #244]	; (80017b4 <bno055_writeData+0x1a4>)
 80016c0:	f006 ff34 	bl	800852c <puts>
 80016c4:	e00c      	b.n	80016e0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b10      	cmp	r3, #16
 80016ca:	d103      	bne.n	80016d4 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80016cc:	483a      	ldr	r0, [pc, #232]	; (80017b8 <bno055_writeData+0x1a8>)
 80016ce:	f006 ff2d 	bl	800852c <puts>
 80016d2:	e005      	b.n	80016e0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	2b20      	cmp	r3, #32
 80016d8:	d102      	bne.n	80016e0 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80016da:	4838      	ldr	r0, [pc, #224]	; (80017bc <bno055_writeData+0x1ac>)
 80016dc:	f006 ff26 	bl	800852c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80016e0:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <bno055_writeData+0x184>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 fe3f 	bl	8005368 <HAL_I2C_GetState>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d103      	bne.n	80016fc <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80016f4:	4832      	ldr	r0, [pc, #200]	; (80017c0 <bno055_writeData+0x1b0>)
 80016f6:	f006 ff19 	bl	800852c <puts>
 80016fa:	e048      	b.n	800178e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d103      	bne.n	800170a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001702:	482f      	ldr	r0, [pc, #188]	; (80017c0 <bno055_writeData+0x1b0>)
 8001704:	f006 ff12 	bl	800852c <puts>
 8001708:	e041      	b.n	800178e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	2b24      	cmp	r3, #36	; 0x24
 800170e:	d103      	bne.n	8001718 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001710:	482c      	ldr	r0, [pc, #176]	; (80017c4 <bno055_writeData+0x1b4>)
 8001712:	f006 ff0b 	bl	800852c <puts>
 8001716:	e03a      	b.n	800178e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	2b21      	cmp	r3, #33	; 0x21
 800171c:	d103      	bne.n	8001726 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800171e:	482a      	ldr	r0, [pc, #168]	; (80017c8 <bno055_writeData+0x1b8>)
 8001720:	f006 ff04 	bl	800852c <puts>
 8001724:	e033      	b.n	800178e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b22      	cmp	r3, #34	; 0x22
 800172a:	d103      	bne.n	8001734 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 800172c:	4827      	ldr	r0, [pc, #156]	; (80017cc <bno055_writeData+0x1bc>)
 800172e:	f006 fefd 	bl	800852c <puts>
 8001732:	e02c      	b.n	800178e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	2b28      	cmp	r3, #40	; 0x28
 8001738:	d103      	bne.n	8001742 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800173a:	4825      	ldr	r0, [pc, #148]	; (80017d0 <bno055_writeData+0x1c0>)
 800173c:	f006 fef6 	bl	800852c <puts>
 8001740:	e025      	b.n	800178e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	2b29      	cmp	r3, #41	; 0x29
 8001746:	d103      	bne.n	8001750 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001748:	4822      	ldr	r0, [pc, #136]	; (80017d4 <bno055_writeData+0x1c4>)
 800174a:	f006 feef 	bl	800852c <puts>
 800174e:	e01e      	b.n	800178e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b2a      	cmp	r3, #42	; 0x2a
 8001754:	d103      	bne.n	800175e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001756:	4820      	ldr	r0, [pc, #128]	; (80017d8 <bno055_writeData+0x1c8>)
 8001758:	f006 fee8 	bl	800852c <puts>
 800175c:	e017      	b.n	800178e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	2b60      	cmp	r3, #96	; 0x60
 8001762:	d103      	bne.n	800176c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001764:	481d      	ldr	r0, [pc, #116]	; (80017dc <bno055_writeData+0x1cc>)
 8001766:	f006 fee1 	bl	800852c <puts>
 800176a:	e010      	b.n	800178e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	2ba0      	cmp	r3, #160	; 0xa0
 8001770:	d103      	bne.n	800177a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001772:	481b      	ldr	r0, [pc, #108]	; (80017e0 <bno055_writeData+0x1d0>)
 8001774:	f006 feda 	bl	800852c <puts>
 8001778:	e009      	b.n	800178e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2be0      	cmp	r3, #224	; 0xe0
 800177e:	d106      	bne.n	800178e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001780:	4818      	ldr	r0, [pc, #96]	; (80017e4 <bno055_writeData+0x1d4>)
 8001782:	f006 fed3 	bl	800852c <puts>
 8001786:	e002      	b.n	800178e <bno055_writeData+0x17e>
    return;
 8001788:	bf00      	nop
 800178a:	e000      	b.n	800178e <bno055_writeData+0x17e>
    return;
 800178c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000016c 	.word	0x2000016c
 8001798:	0800a4b4 	.word	0x0800a4b4
 800179c:	0800a4d8 	.word	0x0800a4d8
 80017a0:	0800a500 	.word	0x0800a500
 80017a4:	0800a524 	.word	0x0800a524
 80017a8:	0800a53c 	.word	0x0800a53c
 80017ac:	0800a550 	.word	0x0800a550
 80017b0:	0800a564 	.word	0x0800a564
 80017b4:	0800a578 	.word	0x0800a578
 80017b8:	0800a58c 	.word	0x0800a58c
 80017bc:	0800a5a0 	.word	0x0800a5a0
 80017c0:	0800a5b8 	.word	0x0800a5b8
 80017c4:	0800a5d0 	.word	0x0800a5d0
 80017c8:	0800a5e4 	.word	0x0800a5e4
 80017cc:	0800a5fc 	.word	0x0800a5fc
 80017d0:	0800a614 	.word	0x0800a614
 80017d4:	0800a62c 	.word	0x0800a62c
 80017d8:	0800a64c 	.word	0x0800a64c
 80017dc:	0800a66c 	.word	0x0800a66c
 80017e0:	0800a684 	.word	0x0800a684
 80017e4:	0800a69c 	.word	0x0800a69c

080017e8 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	4613      	mov	r3, r2
 80017f6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <bno055_readData+0x40>)
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	1dfa      	adds	r2, r7, #7
 80017fe:	2364      	movs	r3, #100	; 0x64
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2301      	movs	r3, #1
 8001804:	2150      	movs	r1, #80	; 0x50
 8001806:	f003 fa8b 	bl	8004d20 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <bno055_readData+0x40>)
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	79bb      	ldrb	r3, [r7, #6]
 8001810:	b29b      	uxth	r3, r3
 8001812:	2264      	movs	r2, #100	; 0x64
 8001814:	9200      	str	r2, [sp, #0]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	2150      	movs	r1, #80	; 0x50
 800181a:	f003 fb7f 	bl	8004f1c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000016c 	.word	0x2000016c

0800182c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a07      	ldr	r2, [pc, #28]	; (8001858 <vApplicationGetIdleTaskMemory+0x2c>)
 800183c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	4a06      	ldr	r2, [pc, #24]	; (800185c <vApplicationGetIdleTaskMemory+0x30>)
 8001842:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	200001c4 	.word	0x200001c4
 800185c:	20000218 	.word	0x20000218

08001860 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of RotaryIMU_Task */
  osThreadDef(RotaryIMU_Task, RotaryIMU_Init, osPriorityNormal, 0, 2100);
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <MX_FREERTOS_Init+0x30>)
 8001868:	1d3c      	adds	r4, r7, #4
 800186a:	461d      	mov	r5, r3
 800186c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800186e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001870:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001874:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RotaryIMU_TaskHandle = osThreadCreate(osThread(RotaryIMU_Task), NULL);
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f005 fb6c 	bl	8006f5a <osThreadCreate>
 8001882:	4603      	mov	r3, r0
 8001884:	4a03      	ldr	r2, [pc, #12]	; (8001894 <MX_FREERTOS_Init+0x34>)
 8001886:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001888:	bf00      	nop
 800188a:	3720      	adds	r7, #32
 800188c:	46bd      	mov	sp, r7
 800188e:	bdb0      	pop	{r4, r5, r7, pc}
 8001890:	0800a6b4 	.word	0x0800a6b4
 8001894:	200001c0 	.word	0x200001c0

08001898 <RotaryIMU_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RotaryIMU_Init */
void RotaryIMU_Init(void const * argument)
{
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RotaryIMU_Init */
	bno055_assignI2C(&hi2c1);
 80018a0:	484b      	ldr	r0, [pc, #300]	; (80019d0 <RotaryIMU_Init+0x138>)
 80018a2:	f7ff fe99 	bl	80015d8 <bno055_assignI2C>
	bno055_setup();
 80018a6:	f7ff fc25 	bl	80010f4 <bno055_setup>
	bno055_setOperationModeNDOF();
 80018aa:	f7ff fc10 	bl	80010ce <bno055_setOperationModeNDOF>

  /* Infinite loop */
  for(;;)
  {
	  // Qauternion_to_Euler(Angle);
		Q = bno055_getVectorQuaternion();
 80018ae:	f7ff fd8d 	bl	80013cc <bno055_getVectorQuaternion>
 80018b2:	eeb0 4a40 	vmov.f32	s8, s0
 80018b6:	eef0 4a60 	vmov.f32	s9, s1
 80018ba:	eeb0 5a41 	vmov.f32	s10, s2
 80018be:	eef0 5a61 	vmov.f32	s11, s3
 80018c2:	eeb0 6a42 	vmov.f32	s12, s4
 80018c6:	eef0 6a62 	vmov.f32	s13, s5
 80018ca:	eeb0 7a43 	vmov.f32	s14, s6
 80018ce:	eef0 7a63 	vmov.f32	s15, s7
 80018d2:	4b40      	ldr	r3, [pc, #256]	; (80019d4 <RotaryIMU_Init+0x13c>)
 80018d4:	ed83 4b00 	vstr	d4, [r3]
 80018d8:	ed83 5b02 	vstr	d5, [r3, #8]
 80018dc:	ed83 6b04 	vstr	d6, [r3, #16]
 80018e0:	ed83 7b06 	vstr	d7, [r3, #24]
		// yaw (z-axis rotation)
		siny_cosp = 2 * (Q.w * Q.z + Q.x * Q.y);
 80018e4:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <RotaryIMU_Init+0x13c>)
 80018e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ea:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <RotaryIMU_Init+0x13c>)
 80018ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018f0:	f7fe fe7a 	bl	80005e8 <__aeabi_dmul>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4614      	mov	r4, r2
 80018fa:	461d      	mov	r5, r3
 80018fc:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <RotaryIMU_Init+0x13c>)
 80018fe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001902:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <RotaryIMU_Init+0x13c>)
 8001904:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001908:	f7fe fe6e 	bl	80005e8 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4620      	mov	r0, r4
 8001912:	4629      	mov	r1, r5
 8001914:	f7fe fcb2 	bl	800027c <__adddf3>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	f7fe fcaa 	bl	800027c <__adddf3>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	492a      	ldr	r1, [pc, #168]	; (80019d8 <RotaryIMU_Init+0x140>)
 800192e:	e9c1 2300 	strd	r2, r3, [r1]
		cosy_cosp = 1 - 2 * (Q.y * Q.y + Q.z * Q.z);
 8001932:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <RotaryIMU_Init+0x13c>)
 8001934:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001938:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <RotaryIMU_Init+0x13c>)
 800193a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800193e:	f7fe fe53 	bl	80005e8 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4614      	mov	r4, r2
 8001948:	461d      	mov	r5, r3
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <RotaryIMU_Init+0x13c>)
 800194c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001950:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <RotaryIMU_Init+0x13c>)
 8001952:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001956:	f7fe fe47 	bl	80005e8 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4620      	mov	r0, r4
 8001960:	4629      	mov	r1, r5
 8001962:	f7fe fc8b 	bl	800027c <__adddf3>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	f7fe fc83 	bl	800027c <__adddf3>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	f04f 0000 	mov.w	r0, #0
 800197e:	4917      	ldr	r1, [pc, #92]	; (80019dc <RotaryIMU_Init+0x144>)
 8001980:	f7fe fc7a 	bl	8000278 <__aeabi_dsub>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4915      	ldr	r1, [pc, #84]	; (80019e0 <RotaryIMU_Init+0x148>)
 800198a:	e9c1 2300 	strd	r2, r3, [r1]
		Angle.Yaw = atan2(siny_cosp, cosy_cosp);
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <RotaryIMU_Init+0x140>)
 8001990:	ed93 7b00 	vldr	d7, [r3]
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <RotaryIMU_Init+0x148>)
 8001996:	ed93 6b00 	vldr	d6, [r3]
 800199a:	eeb0 1a46 	vmov.f32	s2, s12
 800199e:	eef0 1a66 	vmov.f32	s3, s13
 80019a2:	eeb0 0a47 	vmov.f32	s0, s14
 80019a6:	eef0 0a67 	vmov.f32	s1, s15
 80019aa:	f007 fdc7 	bl	800953c <atan2>
 80019ae:	eeb0 7a40 	vmov.f32	s14, s0
 80019b2:	eef0 7a60 	vmov.f32	s15, s1
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <RotaryIMU_Init+0x14c>)
 80019b8:	ed83 7b04 	vstr	d7, [r3, #16]
		theta = Angle.Yaw;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <RotaryIMU_Init+0x14c>)
 80019be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019c2:	4909      	ldr	r1, [pc, #36]	; (80019e8 <RotaryIMU_Init+0x150>)
 80019c4:	e9c1 2300 	strd	r2, r3, [r1]
    osDelay(10);
 80019c8:	200a      	movs	r0, #10
 80019ca:	f005 fb12 	bl	8006ff2 <osDelay>
		Q = bno055_getVectorQuaternion();
 80019ce:	e76e      	b.n	80018ae <RotaryIMU_Init+0x16>
 80019d0:	20000418 	.word	0x20000418
 80019d4:	20000188 	.word	0x20000188
 80019d8:	200001a8 	.word	0x200001a8
 80019dc:	3ff00000 	.word	0x3ff00000
 80019e0:	200001b0 	.word	0x200001b0
 80019e4:	20000170 	.word	0x20000170
 80019e8:	200001b8 	.word	0x200001b8

080019ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <MX_GPIO_Init+0xc8>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a2a      	ldr	r2, [pc, #168]	; (8001ab4 <MX_GPIO_Init+0xc8>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <MX_GPIO_Init+0xc8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <MX_GPIO_Init+0xc8>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a23      	ldr	r2, [pc, #140]	; (8001ab4 <MX_GPIO_Init+0xc8>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <MX_GPIO_Init+0xc8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <MX_GPIO_Init+0xc8>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <MX_GPIO_Init+0xc8>)
 8001a44:	f043 0310 	orr.w	r3, r3, #16
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <MX_GPIO_Init+0xc8>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <MX_GPIO_Init+0xc8>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <MX_GPIO_Init+0xc8>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <MX_GPIO_Init+0xc8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = R1_C1_Pin|R1_C2_Pin;
 8001a72:	2303      	movs	r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a76:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <MX_GPIO_Init+0xcc>)
 8001a88:	f002 fe3a 	bl	8004700 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2105      	movs	r1, #5
 8001a90:	2006      	movs	r0, #6
 8001a92:	f002 fb21 	bl	80040d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a96:	2006      	movs	r0, #6
 8001a98:	f002 fb3a 	bl	8004110 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2105      	movs	r1, #5
 8001aa0:	2007      	movs	r0, #7
 8001aa2:	f002 fb19 	bl	80040d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001aa6:	2007      	movs	r0, #7
 8001aa8:	f002 fb32 	bl	8004110 <HAL_NVIC_EnableIRQ>

}
 8001aac:	bf00      	nop
 8001aae:	3728      	adds	r7, #40	; 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020000 	.word	0x40020000

08001abc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <MX_I2C1_Init+0x50>)
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <MX_I2C1_Init+0x54>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <MX_I2C1_Init+0x50>)
 8001ac8:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <MX_I2C1_Init+0x58>)
 8001aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <MX_I2C1_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <MX_I2C1_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <MX_I2C1_Init+0x50>)
 8001ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ade:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <MX_I2C1_Init+0x50>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <MX_I2C1_Init+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <MX_I2C1_Init+0x50>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <MX_I2C1_Init+0x50>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <MX_I2C1_Init+0x50>)
 8001afa:	f002 ffcd 	bl	8004a98 <HAL_I2C_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b04:	f000 fe16 	bl	8002734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000418 	.word	0x20000418
 8001b10:	40005400 	.word	0x40005400
 8001b14:	00061a80 	.word	0x00061a80

08001b18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <HAL_I2C_MspInit+0x84>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d12b      	bne.n	8001b92 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_I2C_MspInit+0x88>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <HAL_I2C_MspInit+0x88>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_I2C_MspInit+0x88>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b56:	23c0      	movs	r3, #192	; 0xc0
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b5a:	2312      	movs	r3, #18
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b66:	2304      	movs	r3, #4
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <HAL_I2C_MspInit+0x8c>)
 8001b72:	f002 fdc5 	bl	8004700 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_I2C_MspInit+0x88>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_I2C_MspInit+0x88>)
 8001b80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_I2C_MspInit+0x88>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	; 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40005400 	.word	0x40005400
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020400 	.word	0x40020400

08001ba8 <map>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
float map(float Input, float Min_Input , float Max_Input ,float Min_Output, float Max_Output){
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	ed87 0a05 	vstr	s0, [r7, #20]
 8001bb2:	edc7 0a04 	vstr	s1, [r7, #16]
 8001bb6:	ed87 1a03 	vstr	s2, [r7, #12]
 8001bba:	edc7 1a02 	vstr	s3, [r7, #8]
 8001bbe:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8001bc2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bce:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bd6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bda:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001bde:	ed97 7a03 	vldr	s14, [r7, #12]
 8001be2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001c0c:	4b57      	ldr	r3, [pc, #348]	; (8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8001c0e:	4a58      	ldr	r2, [pc, #352]	; (8001d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8001c10:	2100      	movs	r1, #0
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f001 fe41 	bl	800389a <HAL_CAN_GetRxMessage>
	cntt++;
 8001c18:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b54      	ldr	r3, [pc, #336]	; (8001d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001c22:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0) {
 8001c24:	e002      	b.n	8001c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		cntt = 0;
 8001c26:	4b53      	ldr	r3, [pc, #332]	; (8001d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0) {
 8001c2c:	4b51      	ldr	r3, [pc, #324]	; (8001d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b64      	cmp	r3, #100	; 0x64
 8001c32:	d8f8      	bhi.n	8001c26 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	}

	if (RxHeader.StdId == 0x215) {
 8001c34:	4b4e      	ldr	r3, [pc, #312]	; (8001d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f240 2215 	movw	r2, #533	; 0x215
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d145      	bne.n	8001ccc <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
			RxData1 = (RxData[0] << 8) | RxData[1];
 8001c40:	4b4a      	ldr	r3, [pc, #296]	; (8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	4a49      	ldr	r2, [pc, #292]	; (8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8001c48:	7852      	ldrb	r2, [r2, #1]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c54:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001c56:	edc3 7a00 	vstr	s15, [r3]
			RxData2 = (RxData[2] << 8) | RxData[3];
 8001c5a:	4b44      	ldr	r3, [pc, #272]	; (8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8001c5c:	789b      	ldrb	r3, [r3, #2]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	4a42      	ldr	r2, [pc, #264]	; (8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8001c62:	78d2      	ldrb	r2, [r2, #3]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6e:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8001c70:	edc3 7a00 	vstr	s15, [r3]
			V1_back = map(RxData1, 0, 65535, -30.0, 30.0);
 8001c74:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001c76:	edd3 7a00 	vldr	s15, [r3]
 8001c7a:	eeb3 2a0e 	vmov.f32	s4, #62	; 0x41f00000  30.0
 8001c7e:	eefb 1a0e 	vmov.f32	s3, #190	; 0xc1f00000 -30.0
 8001c82:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8001d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
 8001c86:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8001d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
 8001c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8e:	f7ff ff8b 	bl	8001ba8 <map>
 8001c92:	eef0 7a40 	vmov.f32	s15, s0
 8001c96:	4b3c      	ldr	r3, [pc, #240]	; (8001d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001c98:	edc3 7a00 	vstr	s15, [r3]
			V2_back = map(RxData2, 0, 65535, -30.0, 30.0);
 8001c9c:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	eeb3 2a0e 	vmov.f32	s4, #62	; 0x41f00000  30.0
 8001ca6:	eefb 1a0e 	vmov.f32	s3, #190	; 0xc1f00000 -30.0
 8001caa:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8001d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
 8001cae:	eddf 0a35 	vldr	s1, [pc, #212]	; 8001d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
 8001cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb6:	f7ff ff77 	bl	8001ba8 <map>
 8001cba:	eef0 7a40 	vmov.f32	s15, s0
 8001cbe:	4b33      	ldr	r3, [pc, #204]	; (8001d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001cc0:	edc3 7a00 	vstr	s15, [r3]
			datacheck = 1;
 8001cc4:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
			RxData4 = (RxData[2] << 8) | RxData[3];
			V3_back = map(RxData3, 0, 65535, -30.0, 30.0);
			V4_back = map(RxData4, 0, 65535, -30.0, 30.0);
			datacheck = 1;
	}
}
 8001cca:	e04a      	b.n	8001d62 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
	else if (RxHeader.StdId == 0x211) {
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f240 2211 	movw	r2, #529	; 0x211
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d144      	bne.n	8001d62 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
			RxData3 = (RxData[0] << 8) | RxData[1];
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	4a23      	ldr	r2, [pc, #140]	; (8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8001ce0:	7852      	ldrb	r2, [r2, #1]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cec:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8001cee:	edc3 7a00 	vstr	s15, [r3]
			RxData4 = (RxData[2] << 8) | RxData[3];
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8001cf4:	789b      	ldrb	r3, [r3, #2]
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8001cfa:	78d2      	ldrb	r2, [r2, #3]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001d08:	edc3 7a00 	vstr	s15, [r3]
			V3_back = map(RxData3, 0, 65535, -30.0, 30.0);
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	eeb3 2a0e 	vmov.f32	s4, #62	; 0x41f00000  30.0
 8001d16:	eefb 1a0e 	vmov.f32	s3, #190	; 0xc1f00000 -30.0
 8001d1a:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8001d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
 8001d1e:	eddf 0a19 	vldr	s1, [pc, #100]	; 8001d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
 8001d22:	eeb0 0a67 	vmov.f32	s0, s15
 8001d26:	f7ff ff3f 	bl	8001ba8 <map>
 8001d2a:	eef0 7a40 	vmov.f32	s15, s0
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001d30:	edc3 7a00 	vstr	s15, [r3]
			V4_back = map(RxData4, 0, 65535, -30.0, 30.0);
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001d36:	edd3 7a00 	vldr	s15, [r3]
 8001d3a:	eeb3 2a0e 	vmov.f32	s4, #62	; 0x41f00000  30.0
 8001d3e:	eefb 1a0e 	vmov.f32	s3, #190	; 0xc1f00000 -30.0
 8001d42:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8001d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
 8001d46:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
 8001d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4e:	f7ff ff2b 	bl	8001ba8 <map>
 8001d52:	eef0 7a40 	vmov.f32	s15, s0
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001d58:	edc3 7a00 	vstr	s15, [r3]
			datacheck = 1;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200004d4 	.word	0x200004d4
 8001d70:	2000046c 	.word	0x2000046c
 8001d74:	2000050d 	.word	0x2000050d
 8001d78:	200004fc 	.word	0x200004fc
 8001d7c:	20000500 	.word	0x20000500
 8001d80:	477fff00 	.word	0x477fff00
 8001d84:	00000000 	.word	0x00000000
 8001d88:	20000510 	.word	0x20000510
 8001d8c:	20000514 	.word	0x20000514
 8001d90:	2000050c 	.word	0x2000050c
 8001d94:	20000504 	.word	0x20000504
 8001d98:	20000508 	.word	0x20000508
 8001d9c:	20000518 	.word	0x20000518
 8001da0:	2000051c 	.word	0x2000051c

08001da4 <encoder>:



float encoder(int i)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	if (nowA[i] != lastA[i])
 8001dac:	4aa4      	ldr	r2, [pc, #656]	; (8002040 <encoder+0x29c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	ed93 7a00 	vldr	s14, [r3]
 8001db8:	4aa2      	ldr	r2, [pc, #648]	; (8002044 <encoder+0x2a0>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	eeb4 7a67 	vcmp.f32	s14, s15
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	f000 808c 	beq.w	8001ee8 <encoder+0x144>
	{
		lastA[i] = nowA[i];
 8001dd0:	4a9b      	ldr	r2, [pc, #620]	; (8002040 <encoder+0x29c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	499a      	ldr	r1, [pc, #616]	; (8002044 <encoder+0x2a0>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	601a      	str	r2, [r3, #0]
		if (lastA[i] == 0)
 8001de4:	4a97      	ldr	r2, [pc, #604]	; (8002044 <encoder+0x2a0>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d13a      	bne.n	8001e70 <encoder+0xcc>
		{
			if (nowB[i] == 0)
 8001dfa:	4a93      	ldr	r2, [pc, #588]	; (8002048 <encoder+0x2a4>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	d117      	bne.n	8001e40 <encoder+0x9c>
			{
				dir[i] = 0;
 8001e10:	4a8e      	ldr	r2, [pc, #568]	; (800204c <encoder+0x2a8>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
				cnt[i]--;
 8001e1e:	4a8c      	ldr	r2, [pc, #560]	; (8002050 <encoder+0x2ac>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e32:	4a87      	ldr	r2, [pc, #540]	; (8002050 <encoder+0x2ac>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	edc3 7a00 	vstr	s15, [r3]
 8001e3e:	e053      	b.n	8001ee8 <encoder+0x144>
			}
			else
			{
				dir[i] = 1;
 8001e40:	4a82      	ldr	r2, [pc, #520]	; (800204c <encoder+0x2a8>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e4c:	601a      	str	r2, [r3, #0]
				cnt[i]++;
 8001e4e:	4a80      	ldr	r2, [pc, #512]	; (8002050 <encoder+0x2ac>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e62:	4a7b      	ldr	r2, [pc, #492]	; (8002050 <encoder+0x2ac>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	edc3 7a00 	vstr	s15, [r3]
 8001e6e:	e03b      	b.n	8001ee8 <encoder+0x144>
			}
		}
		else
		{
			if (nowB[i] == 1)
 8001e70:	4a75      	ldr	r2, [pc, #468]	; (8002048 <encoder+0x2a4>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e80:	eef4 7a47 	vcmp.f32	s15, s14
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	d117      	bne.n	8001eba <encoder+0x116>
			{
				dir[i] = 0;
 8001e8a:	4a70      	ldr	r2, [pc, #448]	; (800204c <encoder+0x2a8>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
				cnt[i]--;
 8001e98:	4a6d      	ldr	r2, [pc, #436]	; (8002050 <encoder+0x2ac>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ea8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001eac:	4a68      	ldr	r2, [pc, #416]	; (8002050 <encoder+0x2ac>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	edc3 7a00 	vstr	s15, [r3]
 8001eb8:	e016      	b.n	8001ee8 <encoder+0x144>
			}
			else
			{
				dir[i] = 1;
 8001eba:	4a64      	ldr	r2, [pc, #400]	; (800204c <encoder+0x2a8>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ec6:	601a      	str	r2, [r3, #0]
				cnt[i]++;
 8001ec8:	4a61      	ldr	r2, [pc, #388]	; (8002050 <encoder+0x2ac>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001edc:	4a5c      	ldr	r2, [pc, #368]	; (8002050 <encoder+0x2ac>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	edc3 7a00 	vstr	s15, [r3]
			}
		}
	}
	if (nowB[i] != lastB[i])
 8001ee8:	4a57      	ldr	r2, [pc, #348]	; (8002048 <encoder+0x2a4>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	ed93 7a00 	vldr	s14, [r3]
 8001ef4:	4a57      	ldr	r2, [pc, #348]	; (8002054 <encoder+0x2b0>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	edd3 7a00 	vldr	s15, [r3]
 8001f00:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f08:	f000 808c 	beq.w	8002024 <encoder+0x280>
	{
		lastB[i] = nowB[i];
 8001f0c:	4a4e      	ldr	r2, [pc, #312]	; (8002048 <encoder+0x2a4>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	494f      	ldr	r1, [pc, #316]	; (8002054 <encoder+0x2b0>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	601a      	str	r2, [r3, #0]
		if (lastB[i] == 0)
 8001f20:	4a4c      	ldr	r2, [pc, #304]	; (8002054 <encoder+0x2b0>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	edd3 7a00 	vldr	s15, [r3]
 8001f2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	d13c      	bne.n	8001fb0 <encoder+0x20c>
		{
			if (nowA[i] == 1)
 8001f36:	4a42      	ldr	r2, [pc, #264]	; (8002040 <encoder+0x29c>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f46:	eef4 7a47 	vcmp.f32	s15, s14
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	d117      	bne.n	8001f80 <encoder+0x1dc>
			{
				dir[i] = 0;
 8001f50:	4a3e      	ldr	r2, [pc, #248]	; (800204c <encoder+0x2a8>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
				cnt[i]--;
 8001f5e:	4a3c      	ldr	r2, [pc, #240]	; (8002050 <encoder+0x2ac>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f72:	4a37      	ldr	r2, [pc, #220]	; (8002050 <encoder+0x2ac>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	edc3 7a00 	vstr	s15, [r3]
 8001f7e:	e051      	b.n	8002024 <encoder+0x280>
			}
			else
			{
				dir[i] = 1;
 8001f80:	4a32      	ldr	r2, [pc, #200]	; (800204c <encoder+0x2a8>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f8c:	601a      	str	r2, [r3, #0]
				cnt[i]++;
 8001f8e:	4a30      	ldr	r2, [pc, #192]	; (8002050 <encoder+0x2ac>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fa2:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <encoder+0x2ac>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	edc3 7a00 	vstr	s15, [r3]
 8001fae:	e039      	b.n	8002024 <encoder+0x280>
			}
		}
		else
		{
			if (nowA[i] == 0)
 8001fb0:	4a23      	ldr	r2, [pc, #140]	; (8002040 <encoder+0x29c>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc4:	d117      	bne.n	8001ff6 <encoder+0x252>
			{
				dir[i] = 0;
 8001fc6:	4a21      	ldr	r2, [pc, #132]	; (800204c <encoder+0x2a8>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
				cnt[i]--;
 8001fd4:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <encoder+0x2ac>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fe4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <encoder+0x2ac>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	edc3 7a00 	vstr	s15, [r3]
 8001ff4:	e016      	b.n	8002024 <encoder+0x280>
			}
			else
			{
				dir[i] = 1;
 8001ff6:	4a15      	ldr	r2, [pc, #84]	; (800204c <encoder+0x2a8>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002002:	601a      	str	r2, [r3, #0]
				cnt[i]++;
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <encoder+0x2ac>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002014:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002018:	4a0d      	ldr	r2, [pc, #52]	; (8002050 <encoder+0x2ac>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	edc3 7a00 	vstr	s15, [r3]
			}
		}
	}
	return cnt[i];
 8002024:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <encoder+0x2ac>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	ee07 3a90 	vmov	s15, r3
}
 8002032:	eeb0 0a67 	vmov.f32	s0, s15
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	20000520 	.word	0x20000520
 8002044:	20000540 	.word	0x20000540
 8002048:	20000530 	.word	0x20000530
 800204c:	20000560 	.word	0x20000560
 8002050:	20000570 	.word	0x20000570
 8002054:	20000550 	.word	0x20000550

08002058 <Speed_encoder>:

float Speed_encoder(int i, float CPR)
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	ed87 0a00 	vstr	s0, [r7]
	new_count[i] = Enc_count[i];
 8002064:	4a34      	ldr	r2, [pc, #208]	; (8002138 <Speed_encoder+0xe0>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4933      	ldr	r1, [pc, #204]	; (800213c <Speed_encoder+0xe4>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	601a      	str	r2, [r3, #0]
	wheel_velocity_encoder[i] = (2.0 *PI *(new_count[i] - old_count[i]) * r) / (CPR * dt);
 8002078:	4a30      	ldr	r2, [pc, #192]	; (800213c <Speed_encoder+0xe4>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	ed93 7a00 	vldr	s14, [r3]
 8002084:	4a2e      	ldr	r2, [pc, #184]	; (8002140 <Speed_encoder+0xe8>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002094:	ee17 0a90 	vmov	r0, s15
 8002098:	f7fe fa4e 	bl	8000538 <__aeabi_f2d>
 800209c:	a320      	add	r3, pc, #128	; (adr r3, 8002120 <Speed_encoder+0xc8>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe faa1 	bl	80005e8 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	a31e      	add	r3, pc, #120	; (adr r3, 8002128 <Speed_encoder+0xd0>)
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	f7fe fa98 	bl	80005e8 <__aeabi_dmul>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4614      	mov	r4, r2
 80020be:	461d      	mov	r5, r3
 80020c0:	6838      	ldr	r0, [r7, #0]
 80020c2:	f7fe fa39 	bl	8000538 <__aeabi_f2d>
 80020c6:	a31a      	add	r3, pc, #104	; (adr r3, 8002130 <Speed_encoder+0xd8>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	f7fe fa8c 	bl	80005e8 <__aeabi_dmul>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4620      	mov	r0, r4
 80020d6:	4629      	mov	r1, r5
 80020d8:	f7fe fbb0 	bl	800083c <__aeabi_ddiv>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4610      	mov	r0, r2
 80020e2:	4619      	mov	r1, r3
 80020e4:	f7fe fd1a 	bl	8000b1c <__aeabi_d2f>
 80020e8:	4602      	mov	r2, r0
 80020ea:	4916      	ldr	r1, [pc, #88]	; (8002144 <Speed_encoder+0xec>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	601a      	str	r2, [r3, #0]
	old_count[i] = new_count[i];
 80020f4:	4a11      	ldr	r2, [pc, #68]	; (800213c <Speed_encoder+0xe4>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4910      	ldr	r1, [pc, #64]	; (8002140 <Speed_encoder+0xe8>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	601a      	str	r2, [r3, #0]
	return wheel_velocity_encoder[i];
 8002108:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <Speed_encoder+0xec>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	ee07 3a90 	vmov	s15, r3
}
 8002116:	eeb0 0a67 	vmov.f32	s0, s15
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bdb0      	pop	{r4, r5, r7, pc}
 8002120:	5532617c 	.word	0x5532617c
 8002124:	40192a30 	.word	0x40192a30
 8002128:	eb851eb8 	.word	0xeb851eb8
 800212c:	3f9eb851 	.word	0x3f9eb851
 8002130:	47ae147b 	.word	0x47ae147b
 8002134:	3f847ae1 	.word	0x3f847ae1
 8002138:	20000580 	.word	0x20000580
 800213c:	20000598 	.word	0x20000598
 8002140:	20000590 	.word	0x20000590
 8002144:	200005a0 	.word	0x200005a0

08002148 <read_encoder>:
void read_encoder(Encoder *enc, TIM_HandleTypeDef* timer){
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
	enc->new_counter = __HAL_TIM_GET_COUNTER(timer);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	605a      	str	r2, [r3, #4]
	enc->counter_status = __HAL_TIM_IS_TIM_COUNTING_DOWN(timer);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b10      	cmp	r3, #16
 8002168:	bf0c      	ite	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	2300      	movne	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	721a      	strb	r2, [r3, #8]
	int16_t count_change = enc->new_counter - enc->counter;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	b29a      	uxth	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	b29b      	uxth	r3, r3
 8002186:	81fb      	strh	r3, [r7, #14]
	if(enc->counter_status && count_change <0){
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7a1b      	ldrb	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <read_encoder+0x50>
 8002190:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002194:	2b00      	cmp	r3, #0
 8002196:	db07      	blt.n	80021a8 <read_encoder+0x60>
		count_change += 65536;
	}else if (!enc->counter_status && count_change > 0){
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7a1b      	ldrb	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d104      	bne.n	80021aa <read_encoder+0x62>
 80021a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	e000      	b.n	80021aa <read_encoder+0x62>
		count_change += 65536;
 80021a8:	bf00      	nop
		count_change -= 65536;
	}
	enc->counter = enc->new_counter;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	601a      	str	r2, [r3, #0]
	enc->counter_status = (count_change >=0);
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	0bdb      	lsrs	r3, r3, #15
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	721a      	strb	r2, [r3, #8]
	enc->speed = (float)count_change*1000.0f/(CPR_X * sampling_time);
 80021c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021c6:	ee07 3a90 	vmov	s15, r3
 80021ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ce:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002258 <read_encoder+0x110>
 80021d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021d6:	eddf 6a21 	vldr	s13, [pc, #132]	; 800225c <read_encoder+0x114>
 80021da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	edc3 7a03 	vstr	s15, [r3, #12]
	enc->rdps = (float)count_change*2*PI*1000.0f/(CPR_X * sampling_time);
 80021e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021e8:	ee07 3a90 	vmov	s15, r3
 80021ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021f4:	ee17 0a90 	vmov	r0, s15
 80021f8:	f7fe f99e 	bl	8000538 <__aeabi_f2d>
 80021fc:	a312      	add	r3, pc, #72	; (adr r3, 8002248 <read_encoder+0x100>)
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	f7fe f9f1 	bl	80005e8 <__aeabi_dmul>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <read_encoder+0x118>)
 8002214:	f7fe f9e8 	bl	80005e8 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	a30b      	add	r3, pc, #44	; (adr r3, 8002250 <read_encoder+0x108>)
 8002222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002226:	f7fe fb09 	bl	800083c <__aeabi_ddiv>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f7fe fc73 	bl	8000b1c <__aeabi_d2f>
 8002236:	4602      	mov	r2, r0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	611a      	str	r2, [r3, #16]
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	f3af 8000 	nop.w
 8002248:	5532617c 	.word	0x5532617c
 800224c:	40092a30 	.word	0x40092a30
 8002250:	00000000 	.word	0x00000000
 8002254:	40cc2000 	.word	0x40cc2000
 8002258:	447a0000 	.word	0x447a0000
 800225c:	46610000 	.word	0x46610000
 8002260:	408f4000 	.word	0x408f4000

08002264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002268:	f000 fd54 	bl	8002d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800226c:	f000 f836 	bl	80022dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002270:	f7ff fbbc 	bl	80019ec <MX_GPIO_Init>
  MX_DMA_Init();
 8002274:	f7ff f990 	bl	8001598 <MX_DMA_Init>
  MX_CAN1_Init();
 8002278:	f7ff f8ec 	bl	8001454 <MX_CAN1_Init>
  MX_I2C1_Init();
 800227c:	f7ff fc1e 	bl	8001abc <MX_I2C1_Init>
  MX_TIM3_Init();
 8002280:	f000 fc60 	bl	8002b44 <MX_TIM3_Init>
  MX_TIM1_Init();
 8002284:	f000 fc06 	bl	8002a94 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002288:	f7fe fe1a 	bl	8000ec0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // CAN _Transmition
  	HAL_CAN_Start(&hcan1);
 800228c:	480f      	ldr	r0, [pc, #60]	; (80022cc <main+0x68>)
 800228e:	f001 f9e5 	bl	800365c <HAL_CAN_Start>
  	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002292:	2102      	movs	r1, #2
 8002294:	480d      	ldr	r0, [pc, #52]	; (80022cc <main+0x68>)
 8002296:	f001 fc12 	bl	8003abe <HAL_CAN_ActivateNotification>
  	TxHeader.DLC =6; // data length
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <main+0x6c>)
 800229c:	2206      	movs	r2, #6
 800229e:	611a      	str	r2, [r3, #16]
  	TxHeader.IDE = CAN_ID_STD;
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <main+0x6c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  	TxHeader.RTR = CAN_RTR_DATA;
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <main+0x6c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	60da      	str	r2, [r3, #12]
  	TxHeader.StdId = 0x407; //Id 0x7FF
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <main+0x6c>)
 80022ae:	f240 4207 	movw	r2, #1031	; 0x407
 80022b2:	601a      	str	r2, [r3, #0]
  	// TIMER Internal clock
  	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80022b4:	213c      	movs	r1, #60	; 0x3c
 80022b6:	4807      	ldr	r0, [pc, #28]	; (80022d4 <main+0x70>)
 80022b8:	f004 f9ba 	bl	8006630 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Base_Start_IT(&htim3);
 80022bc:	4806      	ldr	r0, [pc, #24]	; (80022d8 <main+0x74>)
 80022be:	f004 f8a1 	bl	8006404 <HAL_TIM_Base_Start_IT>
//  	HAL_ADCEx_(&hadc1);
//  	HAL_ADC_Start_DMA(&hadc1, &AD_RES, 2);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80022c2:	f7ff facd 	bl	8001860 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80022c6:	f004 fe41 	bl	8006f4c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <main+0x66>
 80022cc:	20000144 	.word	0x20000144
 80022d0:	20000488 	.word	0x20000488
 80022d4:	200005f4 	.word	0x200005f4
 80022d8:	2000063c 	.word	0x2000063c

080022dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b094      	sub	sp, #80	; 0x50
 80022e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e2:	f107 0320 	add.w	r3, r7, #32
 80022e6:	2230      	movs	r2, #48	; 0x30
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f006 f890 	bl	8008410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <SystemClock_Config+0xcc>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <SystemClock_Config+0xcc>)
 800230a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230e:	6413      	str	r3, [r2, #64]	; 0x40
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <SystemClock_Config+0xcc>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800231c:	2300      	movs	r3, #0
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	4b22      	ldr	r3, [pc, #136]	; (80023ac <SystemClock_Config+0xd0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a21      	ldr	r2, [pc, #132]	; (80023ac <SystemClock_Config+0xd0>)
 8002326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <SystemClock_Config+0xd0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002338:	2302      	movs	r3, #2
 800233a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800233c:	2301      	movs	r3, #1
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002340:	2310      	movs	r3, #16
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002344:	2302      	movs	r3, #2
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002348:	2300      	movs	r3, #0
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800234c:	2308      	movs	r3, #8
 800234e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002350:	23a8      	movs	r3, #168	; 0xa8
 8002352:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002354:	2302      	movs	r3, #2
 8002356:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002358:	2304      	movs	r3, #4
 800235a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800235c:	f107 0320 	add.w	r3, r7, #32
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fb49 	bl	80059f8 <HAL_RCC_OscConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800236c:	f000 f9e2 	bl	8002734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002370:	230f      	movs	r3, #15
 8002372:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002374:	2302      	movs	r3, #2
 8002376:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800237c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002380:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002386:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	2105      	movs	r1, #5
 800238e:	4618      	mov	r0, r3
 8002390:	f003 fdaa 	bl	8005ee8 <HAL_RCC_ClockConfig>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800239a:	f000 f9cb 	bl	8002734 <Error_Handler>
  }
}
 800239e:	bf00      	nop
 80023a0:	3750      	adds	r7, #80	; 0x50
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40007000 	.word	0x40007000

080023b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
	// ENCODER Rotary 1
	if (GPIO_Pin == R1_C1_Pin || R1_C2_Pin)
	{
		nowA[0] = HAL_GPIO_ReadPin(R1_C1_GPIO_Port, R1_C1_Pin);
 80023ba:	2101      	movs	r1, #1
 80023bc:	4811      	ldr	r0, [pc, #68]	; (8002404 <HAL_GPIO_EXTI_Callback+0x54>)
 80023be:	f002 fb3b 	bl	8004a38 <HAL_GPIO_ReadPin>
 80023c2:	4603      	mov	r3, r0
 80023c4:	ee07 3a90 	vmov	s15, r3
 80023c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_GPIO_EXTI_Callback+0x58>)
 80023ce:	edc3 7a00 	vstr	s15, [r3]
		nowB[0] = HAL_GPIO_ReadPin(R1_C2_GPIO_Port, R1_C2_Pin);
 80023d2:	2102      	movs	r1, #2
 80023d4:	480b      	ldr	r0, [pc, #44]	; (8002404 <HAL_GPIO_EXTI_Callback+0x54>)
 80023d6:	f002 fb2f 	bl	8004a38 <HAL_GPIO_ReadPin>
 80023da:	4603      	mov	r3, r0
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_GPIO_EXTI_Callback+0x5c>)
 80023e6:	edc3 7a00 	vstr	s15, [r3]
		Enc_count[0] = encoder(0);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff fcda 	bl	8001da4 <encoder>
 80023f0:	eef0 7a40 	vmov.f32	s15, s0
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_GPIO_EXTI_Callback+0x60>)
 80023f6:	edc3 7a00 	vstr	s15, [r3]
//		nowA[1] = HAL_GPIO_ReadPin(E2_C1_GPIO_Port, E2_C1_Pin);
//		nowB[1] = HAL_GPIO_ReadPin(E2_C2_GPIO_Port, E2_C2_Pin);
//		Enc_count[1] = encoder(1);
//	}

}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40020000 	.word	0x40020000
 8002408:	20000520 	.word	0x20000520
 800240c:	20000530 	.word	0x20000530
 8002410:	20000580 	.word	0x20000580
 8002414:	00000000 	.word	0x00000000

08002418 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002418:	b5b0      	push	{r4, r5, r7, lr}
 800241a:	ed2d 8b02 	vpush	{d8}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM3)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4aa9      	ldr	r2, [pc, #676]	; (80026d0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	f040 8138 	bne.w	80026a0 <HAL_TIM_PeriodElapsedCallback+0x288>
	  {
		read_encoder(&encoder0, &htim1);
 8002430:	49a8      	ldr	r1, [pc, #672]	; (80026d4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002432:	48a9      	ldr	r0, [pc, #676]	; (80026d8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002434:	f7ff fe88 	bl	8002148 <read_encoder>
		W1 = -1*Speed_encoder(rotary1, CPR_X);
 8002438:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80026dc <HAL_TIM_PeriodElapsedCallback+0x2c4>
 800243c:	2000      	movs	r0, #0
 800243e:	f7ff fe0b 	bl	8002058 <Speed_encoder>
 8002442:	eef0 7a40 	vmov.f32	s15, s0
 8002446:	eef1 7a67 	vneg.f32	s15, s15
 800244a:	4ba5      	ldr	r3, [pc, #660]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800244c:	edc3 7a00 	vstr	s15, [r3]
		W2 = encoder0.rdps * r;
 8002450:	4ba1      	ldr	r3, [pc, #644]	; (80026d8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f86f 	bl	8000538 <__aeabi_f2d>
 800245a:	a399      	add	r3, pc, #612	; (adr r3, 80026c0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	f7fe f8c2 	bl	80005e8 <__aeabi_dmul>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f7fe fb56 	bl	8000b1c <__aeabi_d2f>
 8002470:	4603      	mov	r3, r0
 8002472:	4a9c      	ldr	r2, [pc, #624]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002474:	6013      	str	r3, [r2, #0]
		Vx_enR = W1 * cosf(theta) - W2 * sinf(theta);
 8002476:	4b9c      	ldr	r3, [pc, #624]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	f7fe fb4c 	bl	8000b1c <__aeabi_d2f>
 8002484:	4603      	mov	r3, r0
 8002486:	ee00 3a10 	vmov	s0, r3
 800248a:	f006 ffcd 	bl	8009428 <cosf>
 800248e:	eeb0 7a40 	vmov.f32	s14, s0
 8002492:	4b93      	ldr	r3, [pc, #588]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002494:	edd3 7a00 	vldr	s15, [r3]
 8002498:	ee27 8a27 	vmul.f32	s16, s14, s15
 800249c:	4b92      	ldr	r3, [pc, #584]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	f7fe fb39 	bl	8000b1c <__aeabi_d2f>
 80024aa:	4603      	mov	r3, r0
 80024ac:	ee00 3a10 	vmov	s0, r3
 80024b0:	f006 fffe 	bl	80094b0 <sinf>
 80024b4:	eeb0 7a40 	vmov.f32	s14, s0
 80024b8:	4b8a      	ldr	r3, [pc, #552]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80024c6:	4b89      	ldr	r3, [pc, #548]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80024c8:	edc3 7a00 	vstr	s15, [r3]
		Vy_enR = W1 * sinf(theta) + W2 * cosf(theta);
 80024cc:	4b86      	ldr	r3, [pc, #536]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7fe fb21 	bl	8000b1c <__aeabi_d2f>
 80024da:	4603      	mov	r3, r0
 80024dc:	ee00 3a10 	vmov	s0, r3
 80024e0:	f006 ffe6 	bl	80094b0 <sinf>
 80024e4:	eeb0 7a40 	vmov.f32	s14, s0
 80024e8:	4b7d      	ldr	r3, [pc, #500]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	ee27 8a27 	vmul.f32	s16, s14, s15
 80024f2:	4b7d      	ldr	r3, [pc, #500]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7fe fb0e 	bl	8000b1c <__aeabi_d2f>
 8002500:	4603      	mov	r3, r0
 8002502:	ee00 3a10 	vmov	s0, r3
 8002506:	f006 ff8f 	bl	8009428 <cosf>
 800250a:	eeb0 7a40 	vmov.f32	s14, s0
 800250e:	4b75      	ldr	r3, [pc, #468]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002518:	ee78 7a27 	vadd.f32	s15, s16, s15
 800251c:	4b74      	ldr	r3, [pc, #464]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800251e:	edc3 7a00 	vstr	s15, [r3]

		X_enR = X_old_enR + Vx_enR * dt;
 8002522:	4b74      	ldr	r3, [pc, #464]	; (80026f4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe f806 	bl	8000538 <__aeabi_f2d>
 800252c:	4604      	mov	r4, r0
 800252e:	460d      	mov	r5, r1
 8002530:	4b6e      	ldr	r3, [pc, #440]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd ffff 	bl	8000538 <__aeabi_f2d>
 800253a:	a363      	add	r3, pc, #396	; (adr r3, 80026c8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fe f852 	bl	80005e8 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4620      	mov	r0, r4
 800254a:	4629      	mov	r1, r5
 800254c:	f7fd fe96 	bl	800027c <__adddf3>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	f7fe fae0 	bl	8000b1c <__aeabi_d2f>
 800255c:	4603      	mov	r3, r0
 800255e:	4a66      	ldr	r2, [pc, #408]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002560:	6013      	str	r3, [r2, #0]
		Y_enR = Y_old_enR + Vy_enR * dt;
 8002562:	4b66      	ldr	r3, [pc, #408]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd ffe6 	bl	8000538 <__aeabi_f2d>
 800256c:	4604      	mov	r4, r0
 800256e:	460d      	mov	r5, r1
 8002570:	4b5f      	ldr	r3, [pc, #380]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd ffdf 	bl	8000538 <__aeabi_f2d>
 800257a:	a353      	add	r3, pc, #332	; (adr r3, 80026c8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f7fe f832 	bl	80005e8 <__aeabi_dmul>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4620      	mov	r0, r4
 800258a:	4629      	mov	r1, r5
 800258c:	f7fd fe76 	bl	800027c <__adddf3>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	f7fe fac0 	bl	8000b1c <__aeabi_d2f>
 800259c:	4603      	mov	r3, r0
 800259e:	4a58      	ldr	r2, [pc, #352]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80025a0:	6013      	str	r3, [r2, #0]
		X_old_enR = X_enR;
 80025a2:	4b55      	ldr	r3, [pc, #340]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a53      	ldr	r2, [pc, #332]	; (80026f4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80025a8:	6013      	str	r3, [r2, #0]
		Y_old_enR = Y_enR;
 80025aa:	4b55      	ldr	r3, [pc, #340]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a53      	ldr	r2, [pc, #332]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80025b0:	6013      	str	r3, [r2, #0]


		Vx = map(Vx_enR, -30.0, 30.0, 0, 65535);
 80025b2:	4b4e      	ldr	r3, [pc, #312]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	ed9f 2a52 	vldr	s4, [pc, #328]	; 8002704 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 80025bc:	eddf 1a52 	vldr	s3, [pc, #328]	; 8002708 <HAL_TIM_PeriodElapsedCallback+0x2f0>
 80025c0:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 80025c4:	eefb 0a0e 	vmov.f32	s1, #190	; 0xc1f00000 -30.0
 80025c8:	eeb0 0a67 	vmov.f32	s0, s15
 80025cc:	f7ff faec 	bl	8001ba8 <map>
 80025d0:	eef0 7a40 	vmov.f32	s15, s0
 80025d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025d8:	ee17 3a90 	vmov	r3, s15
 80025dc:	b29a      	uxth	r2, r3
 80025de:	4b4b      	ldr	r3, [pc, #300]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80025e0:	801a      	strh	r2, [r3, #0]
		Vy = map(Vy_enR, -30.0, 30.0, 0, 65535);
 80025e2:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	ed9f 2a46 	vldr	s4, [pc, #280]	; 8002704 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 80025ec:	eddf 1a46 	vldr	s3, [pc, #280]	; 8002708 <HAL_TIM_PeriodElapsedCallback+0x2f0>
 80025f0:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 80025f4:	eefb 0a0e 	vmov.f32	s1, #190	; 0xc1f00000 -30.0
 80025f8:	eeb0 0a67 	vmov.f32	s0, s15
 80025fc:	f7ff fad4 	bl	8001ba8 <map>
 8002600:	eef0 7a40 	vmov.f32	s15, s0
 8002604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002608:	ee17 3a90 	vmov	r3, s15
 800260c:	b29a      	uxth	r2, r3
 800260e:	4b40      	ldr	r3, [pc, #256]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002610:	801a      	strh	r2, [r3, #0]
		Omega = map(theta, -6.28, 6.28, 0, 65535);
 8002612:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f7fe fa7e 	bl	8000b1c <__aeabi_d2f>
 8002620:	4603      	mov	r3, r0
 8002622:	ed9f 2a38 	vldr	s4, [pc, #224]	; 8002704 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 8002626:	eddf 1a38 	vldr	s3, [pc, #224]	; 8002708 <HAL_TIM_PeriodElapsedCallback+0x2f0>
 800262a:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8002714 <HAL_TIM_PeriodElapsedCallback+0x2fc>
 800262e:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8002718 <HAL_TIM_PeriodElapsedCallback+0x300>
 8002632:	ee00 3a10 	vmov	s0, r3
 8002636:	f7ff fab7 	bl	8001ba8 <map>
 800263a:	eef0 7a40 	vmov.f32	s15, s0
 800263e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002642:	ee17 3a90 	vmov	r3, s15
 8002646:	b29a      	uxth	r2, r3
 8002648:	4b34      	ldr	r3, [pc, #208]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800264a:	801a      	strh	r2, [r3, #0]

		TxData[0] = ((Vx & 0xFF00) >> 8);
 800264c:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	b29b      	uxth	r3, r3
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b32      	ldr	r3, [pc, #200]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002658:	701a      	strb	r2, [r3, #0]
		TxData[1] = (Vx & 0x00FF);
 800265a:	4b2c      	ldr	r3, [pc, #176]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002662:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((Vy & 0xFF00) >> 8);
 8002664:	4b2a      	ldr	r3, [pc, #168]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	b29b      	uxth	r3, r3
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002670:	709a      	strb	r2, [r3, #2]
		TxData[3] = (Vy & 0x00FF);
 8002672:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b29      	ldr	r3, [pc, #164]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800267a:	70da      	strb	r2, [r3, #3]
		TxData[4] = ((Omega & 0xFF00) >> 8);
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	b29b      	uxth	r3, r3
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4b26      	ldr	r3, [pc, #152]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002688:	711a      	strb	r2, [r3, #4]
		TxData[5] = (Omega & 0x00FF);
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002692:	715a      	strb	r2, [r3, #5]

		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8002694:	4b23      	ldr	r3, [pc, #140]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002696:	4a22      	ldr	r2, [pc, #136]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002698:	4923      	ldr	r1, [pc, #140]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800269a:	4824      	ldr	r0, [pc, #144]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800269c:	f001 f822 	bl	80036e4 <HAL_CAN_AddTxMessage>
	  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a22      	ldr	r2, [pc, #136]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <HAL_TIM_PeriodElapsedCallback+0x296>
    HAL_IncTick();
 80026aa:	f000 fb55 	bl	8002d58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	ecbd 8b02 	vpop	{d8}
 80026b8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ba:	bf00      	nop
 80026bc:	f3af 8000 	nop.w
 80026c0:	eb851eb8 	.word	0xeb851eb8
 80026c4:	3f9eb851 	.word	0x3f9eb851
 80026c8:	47ae147b 	.word	0x47ae147b
 80026cc:	3f847ae1 	.word	0x3f847ae1
 80026d0:	40000400 	.word	0x40000400
 80026d4:	200005f4 	.word	0x200005f4
 80026d8:	200004a0 	.word	0x200004a0
 80026dc:	44b40000 	.word	0x44b40000
 80026e0:	200004dc 	.word	0x200004dc
 80026e4:	200004e0 	.word	0x200004e0
 80026e8:	200001b8 	.word	0x200001b8
 80026ec:	200004f4 	.word	0x200004f4
 80026f0:	200004f8 	.word	0x200004f8
 80026f4:	200004ec 	.word	0x200004ec
 80026f8:	200004e4 	.word	0x200004e4
 80026fc:	200004f0 	.word	0x200004f0
 8002700:	200004e8 	.word	0x200004e8
 8002704:	477fff00 	.word	0x477fff00
 8002708:	00000000 	.word	0x00000000
 800270c:	200004cc 	.word	0x200004cc
 8002710:	200004ce 	.word	0x200004ce
 8002714:	40c8f5c3 	.word	0x40c8f5c3
 8002718:	c0c8f5c3 	.word	0xc0c8f5c3
 800271c:	200004d0 	.word	0x200004d0
 8002720:	200004c0 	.word	0x200004c0
 8002724:	200004c8 	.word	0x200004c8
 8002728:	20000488 	.word	0x20000488
 800272c:	20000144 	.word	0x20000144
 8002730:	40001000 	.word	0x40001000

08002734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002738:	b672      	cpsid	i
}
 800273a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800273c:	e7fe      	b.n	800273c <Error_Handler+0x8>
	...

08002740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_MspInit+0x54>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4a11      	ldr	r2, [pc, #68]	; (8002794 <HAL_MspInit+0x54>)
 8002750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <HAL_MspInit+0x54>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_MspInit+0x54>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <HAL_MspInit+0x54>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_MspInit+0x54>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	210f      	movs	r1, #15
 8002782:	f06f 0001 	mvn.w	r0, #1
 8002786:	f001 fca7 	bl	80040d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800

08002798 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08e      	sub	sp, #56	; 0x38
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	4b33      	ldr	r3, [pc, #204]	; (800287c <HAL_InitTick+0xe4>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	4a32      	ldr	r2, [pc, #200]	; (800287c <HAL_InitTick+0xe4>)
 80027b2:	f043 0310 	orr.w	r3, r3, #16
 80027b6:	6413      	str	r3, [r2, #64]	; 0x40
 80027b8:	4b30      	ldr	r3, [pc, #192]	; (800287c <HAL_InitTick+0xe4>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027c4:	f107 0210 	add.w	r2, r7, #16
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 fd96 	bl	8006300 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027de:	f003 fd7b 	bl	80062d8 <HAL_RCC_GetPCLK1Freq>
 80027e2:	6378      	str	r0, [r7, #52]	; 0x34
 80027e4:	e004      	b.n	80027f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027e6:	f003 fd77 	bl	80062d8 <HAL_RCC_GetPCLK1Freq>
 80027ea:	4603      	mov	r3, r0
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f2:	4a23      	ldr	r2, [pc, #140]	; (8002880 <HAL_InitTick+0xe8>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	0c9b      	lsrs	r3, r3, #18
 80027fa:	3b01      	subs	r3, #1
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80027fe:	4b21      	ldr	r3, [pc, #132]	; (8002884 <HAL_InitTick+0xec>)
 8002800:	4a21      	ldr	r2, [pc, #132]	; (8002888 <HAL_InitTick+0xf0>)
 8002802:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <HAL_InitTick+0xec>)
 8002806:	f240 32e7 	movw	r2, #999	; 0x3e7
 800280a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800280c:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <HAL_InitTick+0xec>)
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002812:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <HAL_InitTick+0xec>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <HAL_InitTick+0xec>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281e:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_InitTick+0xec>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002824:	4817      	ldr	r0, [pc, #92]	; (8002884 <HAL_InitTick+0xec>)
 8002826:	f003 fd9d 	bl	8006364 <HAL_TIM_Base_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002830:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11b      	bne.n	8002870 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002838:	4812      	ldr	r0, [pc, #72]	; (8002884 <HAL_InitTick+0xec>)
 800283a:	f003 fde3 	bl	8006404 <HAL_TIM_Base_Start_IT>
 800283e:	4603      	mov	r3, r0
 8002840:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002844:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002848:	2b00      	cmp	r3, #0
 800284a:	d111      	bne.n	8002870 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800284c:	2036      	movs	r0, #54	; 0x36
 800284e:	f001 fc5f 	bl	8004110 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d808      	bhi.n	800286a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002858:	2200      	movs	r2, #0
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	2036      	movs	r0, #54	; 0x36
 800285e:	f001 fc3b 	bl	80040d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <HAL_InitTick+0xf4>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	e002      	b.n	8002870 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002870:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002874:	4618      	mov	r0, r3
 8002876:	3738      	adds	r7, #56	; 0x38
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	431bde83 	.word	0x431bde83
 8002884:	200005a8 	.word	0x200005a8
 8002888:	40001000 	.word	0x40001000
 800288c:	20000010 	.word	0x20000010

08002890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002894:	e7fe      	b.n	8002894 <NMI_Handler+0x4>

08002896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800289a:	e7fe      	b.n	800289a <HardFault_Handler+0x4>

0800289c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a0:	e7fe      	b.n	80028a0 <MemManage_Handler+0x4>

080028a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a6:	e7fe      	b.n	80028a6 <BusFault_Handler+0x4>

080028a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028ac:	e7fe      	b.n	80028ac <UsageFault_Handler+0x4>

080028ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R1_C1_Pin);
 80028c0:	2001      	movs	r0, #1
 80028c2:	f002 f8d1 	bl	8004a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}

080028ca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R1_C2_Pin);
 80028ce:	2002      	movs	r0, #2
 80028d0:	f002 f8ca 	bl	8004a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <CAN1_RX0_IRQHandler+0x10>)
 80028de:	f001 f914 	bl	8003b0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000144 	.word	0x20000144

080028ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <TIM3_IRQHandler+0x10>)
 80028f2:	f003 ff2b 	bl	800674c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2000063c 	.word	0x2000063c

08002900 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <TIM6_DAC_IRQHandler+0x10>)
 8002906:	f003 ff21 	bl	800674c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200005a8 	.word	0x200005a8

08002914 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <DMA2_Stream0_IRQHandler+0x10>)
 800291a:	f001 fcb5 	bl	8004288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200000e4 	.word	0x200000e4

08002928 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	e00a      	b.n	8002950 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800293a:	f3af 8000 	nop.w
 800293e:	4601      	mov	r1, r0
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	60ba      	str	r2, [r7, #8]
 8002946:	b2ca      	uxtb	r2, r1
 8002948:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3301      	adds	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	dbf0      	blt.n	800293a <_read+0x12>
  }

  return len;
 8002958:	687b      	ldr	r3, [r7, #4]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e009      	b.n	8002988 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	60ba      	str	r2, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	3301      	adds	r3, #1
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	429a      	cmp	r2, r3
 800298e:	dbf1      	blt.n	8002974 <_write+0x12>
  }
  return len;
 8002990:	687b      	ldr	r3, [r7, #4]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <_close>:

int _close(int file)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c2:	605a      	str	r2, [r3, #4]
  return 0;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <_isatty>:

int _isatty(int file)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a0c:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <_sbrk+0x5c>)
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <_sbrk+0x60>)
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <_sbrk+0x64>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <_sbrk+0x68>)
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <_sbrk+0x64>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d207      	bcs.n	8002a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a34:	f005 fcc2 	bl	80083bc <__errno>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a42:	e009      	b.n	8002a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <_sbrk+0x64>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <_sbrk+0x64>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	4a05      	ldr	r2, [pc, #20]	; (8002a68 <_sbrk+0x64>)
 8002a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20020000 	.word	0x20020000
 8002a64:	00000400 	.word	0x00000400
 8002a68:	200005f0 	.word	0x200005f0
 8002a6c:	200043f0 	.word	0x200043f0

08002a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <SystemInit+0x20>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	4a05      	ldr	r2, [pc, #20]	; (8002a90 <SystemInit+0x20>)
 8002a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08c      	sub	sp, #48	; 0x30
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	2224      	movs	r2, #36	; 0x24
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f005 fcb4 	bl	8008410 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <MX_TIM1_Init+0xa8>)
 8002ab2:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <MX_TIM1_Init+0xac>)
 8002ab4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <MX_TIM1_Init+0xa8>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002abc:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <MX_TIM1_Init+0xa8>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <MX_TIM1_Init+0xa8>)
 8002ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ac8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <MX_TIM1_Init+0xa8>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <MX_TIM1_Init+0xa8>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ad6:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <MX_TIM1_Init+0xa8>)
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002adc:	2303      	movs	r3, #3
 8002ade:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002af0:	2300      	movs	r3, #0
 8002af2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002af4:	2301      	movs	r3, #1
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	4619      	mov	r1, r3
 8002b06:	480d      	ldr	r0, [pc, #52]	; (8002b3c <MX_TIM1_Init+0xa8>)
 8002b08:	f003 fcec 	bl	80064e4 <HAL_TIM_Encoder_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002b12:	f7ff fe0f 	bl	8002734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4806      	ldr	r0, [pc, #24]	; (8002b3c <MX_TIM1_Init+0xa8>)
 8002b24:	f004 f96a 	bl	8006dfc <HAL_TIMEx_MasterConfigSynchronization>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002b2e:	f7ff fe01 	bl	8002734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b32:	bf00      	nop
 8002b34:	3730      	adds	r7, #48	; 0x30
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200005f4 	.word	0x200005f4
 8002b40:	40010000 	.word	0x40010000

08002b44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b4a:	f107 0308 	add.w	r3, r7, #8
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b58:	463b      	mov	r3, r7
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <MX_TIM3_Init+0x94>)
 8002b62:	4a1e      	ldr	r2, [pc, #120]	; (8002bdc <MX_TIM3_Init+0x98>)
 8002b64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <MX_TIM3_Init+0x94>)
 8002b68:	2253      	movs	r2, #83	; 0x53
 8002b6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <MX_TIM3_Init+0x94>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <MX_TIM3_Init+0x94>)
 8002b74:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <MX_TIM3_Init+0x94>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b80:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <MX_TIM3_Init+0x94>)
 8002b82:	2280      	movs	r2, #128	; 0x80
 8002b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b86:	4814      	ldr	r0, [pc, #80]	; (8002bd8 <MX_TIM3_Init+0x94>)
 8002b88:	f003 fbec 	bl	8006364 <HAL_TIM_Base_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002b92:	f7ff fdcf 	bl	8002734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b9c:	f107 0308 	add.w	r3, r7, #8
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <MX_TIM3_Init+0x94>)
 8002ba4:	f003 feda 	bl	800695c <HAL_TIM_ConfigClockSource>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002bae:	f7ff fdc1 	bl	8002734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bba:	463b      	mov	r3, r7
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4806      	ldr	r0, [pc, #24]	; (8002bd8 <MX_TIM3_Init+0x94>)
 8002bc0:	f004 f91c 	bl	8006dfc <HAL_TIMEx_MasterConfigSynchronization>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002bca:	f7ff fdb3 	bl	8002734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000063c 	.word	0x2000063c
 8002bdc:	40000400 	.word	0x40000400

08002be0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	; 0x28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <HAL_TIM_Encoder_MspInit+0x84>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d12c      	bne.n	8002c5c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6453      	str	r3, [r2, #68]	; 0x44
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	4a10      	ldr	r2, [pc, #64]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c28:	f043 0310 	orr.w	r3, r3, #16
 8002c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002c3a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	4619      	mov	r1, r3
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002c58:	f001 fd52 	bl	8004700 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40021000 	.word	0x40021000

08002c70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <HAL_TIM_Base_MspInit+0x48>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d115      	bne.n	8002cae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <HAL_TIM_Base_MspInit+0x4c>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <HAL_TIM_Base_MspInit+0x4c>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_TIM_Base_MspInit+0x4c>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2105      	movs	r1, #5
 8002ca2:	201d      	movs	r0, #29
 8002ca4:	f001 fa18 	bl	80040d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ca8:	201d      	movs	r0, #29
 8002caa:	f001 fa31 	bl	8004110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40023800 	.word	0x40023800

08002cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cc4:	480d      	ldr	r0, [pc, #52]	; (8002cfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cc6:	490e      	ldr	r1, [pc, #56]	; (8002d00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cc8:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ccc:	e002      	b.n	8002cd4 <LoopCopyDataInit>

08002cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cd2:	3304      	adds	r3, #4

08002cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cd8:	d3f9      	bcc.n	8002cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cda:	4a0b      	ldr	r2, [pc, #44]	; (8002d08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cdc:	4c0b      	ldr	r4, [pc, #44]	; (8002d0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce0:	e001      	b.n	8002ce6 <LoopFillZerobss>

08002ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ce4:	3204      	adds	r2, #4

08002ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ce8:	d3fb      	bcc.n	8002ce2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cea:	f7ff fec1 	bl	8002a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cee:	f005 fb6b 	bl	80083c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cf2:	f7ff fab7 	bl	8002264 <main>
  bx  lr    
 8002cf6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d00:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002d04:	0800abe0 	.word	0x0800abe0
  ldr r2, =_sbss
 8002d08:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002d0c:	200043ec 	.word	0x200043ec

08002d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d10:	e7fe      	b.n	8002d10 <ADC_IRQHandler>
	...

08002d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <HAL_Init+0x40>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <HAL_Init+0x40>)
 8002d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_Init+0x40>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <HAL_Init+0x40>)
 8002d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <HAL_Init+0x40>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <HAL_Init+0x40>)
 8002d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d3c:	2003      	movs	r0, #3
 8002d3e:	f001 f9c0 	bl	80040c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d42:	200f      	movs	r0, #15
 8002d44:	f7ff fd28 	bl	8002798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d48:	f7ff fcfa 	bl	8002740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023c00 	.word	0x40023c00

08002d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_IncTick+0x20>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x24>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_IncTick+0x24>)
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000014 	.word	0x20000014
 8002d7c:	20000684 	.word	0x20000684

08002d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return uwTick;
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_GetTick+0x14>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000684 	.word	0x20000684

08002d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da0:	f7ff ffee 	bl	8002d80 <HAL_GetTick>
 8002da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db0:	d005      	beq.n	8002dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_Delay+0x44>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dbe:	bf00      	nop
 8002dc0:	f7ff ffde 	bl	8002d80 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d8f7      	bhi.n	8002dc0 <HAL_Delay+0x28>
  {
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000014 	.word	0x20000014

08002de0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e033      	b.n	8002e5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe f8c0 	bl	8000f84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d118      	bne.n	8002e50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e26:	f023 0302 	bic.w	r3, r3, #2
 8002e2a:	f043 0202 	orr.w	r2, r3, #2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f93a 	bl	80030ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f023 0303 	bic.w	r3, r3, #3
 8002e46:	f043 0201 	orr.w	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e4e:	e001      	b.n	8002e54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x1c>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e105      	b.n	8003090 <HAL_ADC_ConfigChannel+0x228>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b09      	cmp	r3, #9
 8002e92:	d925      	bls.n	8002ee0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68d9      	ldr	r1, [r3, #12]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3b1e      	subs	r3, #30
 8002eaa:	2207      	movs	r2, #7
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43da      	mvns	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	400a      	ands	r2, r1
 8002eb8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68d9      	ldr	r1, [r3, #12]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	4618      	mov	r0, r3
 8002ecc:	4603      	mov	r3, r0
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4403      	add	r3, r0
 8002ed2:	3b1e      	subs	r3, #30
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	e022      	b.n	8002f26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6919      	ldr	r1, [r3, #16]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	2207      	movs	r2, #7
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43da      	mvns	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	400a      	ands	r2, r1
 8002f02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6919      	ldr	r1, [r3, #16]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	4618      	mov	r0, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4403      	add	r3, r0
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d824      	bhi.n	8002f78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3b05      	subs	r3, #5
 8002f40:	221f      	movs	r2, #31
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43da      	mvns	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	3b05      	subs	r3, #5
 8002f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	635a      	str	r2, [r3, #52]	; 0x34
 8002f76:	e04c      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	d824      	bhi.n	8002fca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	3b23      	subs	r3, #35	; 0x23
 8002f92:	221f      	movs	r2, #31
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	3b23      	subs	r3, #35	; 0x23
 8002fbc:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fc8:	e023      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	3b41      	subs	r3, #65	; 0x41
 8002fdc:	221f      	movs	r2, #31
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	400a      	ands	r2, r1
 8002fea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	3b41      	subs	r3, #65	; 0x41
 8003006:	fa00 f203 	lsl.w	r2, r0, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003012:	4b22      	ldr	r3, [pc, #136]	; (800309c <HAL_ADC_ConfigChannel+0x234>)
 8003014:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a21      	ldr	r2, [pc, #132]	; (80030a0 <HAL_ADC_ConfigChannel+0x238>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d109      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x1cc>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b12      	cmp	r3, #18
 8003026:	d105      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <HAL_ADC_ConfigChannel+0x238>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d123      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x21e>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b10      	cmp	r3, #16
 8003044:	d003      	beq.n	800304e <HAL_ADC_ConfigChannel+0x1e6>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b11      	cmp	r3, #17
 800304c:	d11b      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b10      	cmp	r3, #16
 8003060:	d111      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_ADC_ConfigChannel+0x23c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a10      	ldr	r2, [pc, #64]	; (80030a8 <HAL_ADC_ConfigChannel+0x240>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	0c9a      	lsrs	r2, r3, #18
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003078:	e002      	b.n	8003080 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	3b01      	subs	r3, #1
 800307e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f9      	bne.n	800307a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	40012300 	.word	0x40012300
 80030a0:	40012000 	.word	0x40012000
 80030a4:	2000000c 	.word	0x2000000c
 80030a8:	431bde83 	.word	0x431bde83

080030ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030b4:	4b79      	ldr	r3, [pc, #484]	; (800329c <ADC_Init+0x1f0>)
 80030b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	021a      	lsls	r2, r3, #8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003104:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003126:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6899      	ldr	r1, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	4a58      	ldr	r2, [pc, #352]	; (80032a0 <ADC_Init+0x1f4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d022      	beq.n	800318a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003152:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6899      	ldr	r1, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003174:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6899      	ldr	r1, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	e00f      	b.n	80031aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003198:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0202 	bic.w	r2, r2, #2
 80031b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6899      	ldr	r1, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7e1b      	ldrb	r3, [r3, #24]
 80031c4:	005a      	lsls	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01b      	beq.n	8003210 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6859      	ldr	r1, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	3b01      	subs	r3, #1
 8003204:	035a      	lsls	r2, r3, #13
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	e007      	b.n	8003220 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800321e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	3b01      	subs	r3, #1
 800323c:	051a      	lsls	r2, r3, #20
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003254:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6899      	ldr	r1, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003262:	025a      	lsls	r2, r3, #9
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6899      	ldr	r1, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	029a      	lsls	r2, r3, #10
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40012300 	.word	0x40012300
 80032a0:	0f000001 	.word	0x0f000001

080032a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e0ed      	b.n	8003492 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe f918 	bl	80014f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d8:	f7ff fd52 	bl	8002d80 <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032de:	e012      	b.n	8003306 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032e0:	f7ff fd4e 	bl	8002d80 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b0a      	cmp	r3, #10
 80032ec:	d90b      	bls.n	8003306 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2205      	movs	r2, #5
 80032fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0c5      	b.n	8003492 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0e5      	beq.n	80032e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0202 	bic.w	r2, r2, #2
 8003322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003324:	f7ff fd2c 	bl	8002d80 <HAL_GetTick>
 8003328:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800332a:	e012      	b.n	8003352 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800332c:	f7ff fd28 	bl	8002d80 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b0a      	cmp	r3, #10
 8003338:	d90b      	bls.n	8003352 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2205      	movs	r2, #5
 800334a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e09f      	b.n	8003492 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e5      	bne.n	800332c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7e1b      	ldrb	r3, [r3, #24]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d108      	bne.n	800337a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e007      	b.n	800338a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003388:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7e5b      	ldrb	r3, [r3, #25]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d108      	bne.n	80033a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e007      	b.n	80033b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7e9b      	ldrb	r3, [r3, #26]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d108      	bne.n	80033ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0220 	orr.w	r2, r2, #32
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	e007      	b.n	80033de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0220 	bic.w	r2, r2, #32
 80033dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7edb      	ldrb	r3, [r3, #27]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d108      	bne.n	80033f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0210 	bic.w	r2, r2, #16
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e007      	b.n	8003408 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0210 	orr.w	r2, r2, #16
 8003406:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	7f1b      	ldrb	r3, [r3, #28]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d108      	bne.n	8003422 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0208 	orr.w	r2, r2, #8
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e007      	b.n	8003432 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0208 	bic.w	r2, r2, #8
 8003430:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	7f5b      	ldrb	r3, [r3, #29]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0204 	orr.w	r2, r2, #4
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e007      	b.n	800345c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0204 	bic.w	r2, r2, #4
 800345a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	ea42 0103 	orr.w	r1, r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	1e5a      	subs	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034b2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80034b4:	7cfb      	ldrb	r3, [r7, #19]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d003      	beq.n	80034c2 <HAL_CAN_ConfigFilter+0x26>
 80034ba:	7cfb      	ldrb	r3, [r7, #19]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	f040 80be 	bne.w	800363e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80034c2:	4b65      	ldr	r3, [pc, #404]	; (8003658 <HAL_CAN_ConfigFilter+0x1bc>)
 80034c4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	431a      	orrs	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2201      	movs	r2, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	43db      	mvns	r3, r3
 8003514:	401a      	ands	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d123      	bne.n	800356c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	43db      	mvns	r3, r3
 800352e:	401a      	ands	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003546:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	3248      	adds	r2, #72	; 0x48
 800354c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003560:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003562:	6979      	ldr	r1, [r7, #20]
 8003564:	3348      	adds	r3, #72	; 0x48
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	440b      	add	r3, r1
 800356a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d122      	bne.n	80035ba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	431a      	orrs	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003594:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	3248      	adds	r2, #72	; 0x48
 800359a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80035ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80035b0:	6979      	ldr	r1, [r7, #20]
 80035b2:	3348      	adds	r3, #72	; 0x48
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	401a      	ands	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80035d4:	e007      	b.n	80035e6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	431a      	orrs	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	401a      	ands	r2, r3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003600:	e007      	b.n	8003612 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	431a      	orrs	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d107      	bne.n	800362a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	431a      	orrs	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003630:	f023 0201 	bic.w	r2, r3, #1
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e006      	b.n	800364c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
  }
}
 800364c:	4618      	mov	r0, r3
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40006400 	.word	0x40006400

0800365c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d12e      	bne.n	80036ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003688:	f7ff fb7a 	bl	8002d80 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800368e:	e012      	b.n	80036b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003690:	f7ff fb76 	bl	8002d80 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b0a      	cmp	r3, #10
 800369c:	d90b      	bls.n	80036b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2205      	movs	r2, #5
 80036ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e012      	b.n	80036dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e5      	bne.n	8003690 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e006      	b.n	80036dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
  }
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003702:	7ffb      	ldrb	r3, [r7, #31]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d003      	beq.n	8003710 <HAL_CAN_AddTxMessage+0x2c>
 8003708:	7ffb      	ldrb	r3, [r7, #31]
 800370a:	2b02      	cmp	r3, #2
 800370c:	f040 80b8 	bne.w	8003880 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80a0 	beq.w	8003870 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	0e1b      	lsrs	r3, r3, #24
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d907      	bls.n	8003750 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e09e      	b.n	800388e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003750:	2201      	movs	r2, #1
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	409a      	lsls	r2, r3
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10d      	bne.n	800377e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800376c:	68f9      	ldr	r1, [r7, #12]
 800376e:	6809      	ldr	r1, [r1, #0]
 8003770:	431a      	orrs	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	3318      	adds	r3, #24
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	440b      	add	r3, r1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e00f      	b.n	800379e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003788:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003792:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	3318      	adds	r3, #24
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	440b      	add	r3, r1
 800379c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3318      	adds	r3, #24
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	440b      	add	r3, r1
 80037ae:	3304      	adds	r3, #4
 80037b0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	7d1b      	ldrb	r3, [r3, #20]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d111      	bne.n	80037de <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	3318      	adds	r3, #24
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	4413      	add	r3, r2
 80037c6:	3304      	adds	r3, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	6811      	ldr	r1, [r2, #0]
 80037ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	3318      	adds	r3, #24
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	440b      	add	r3, r1
 80037da:	3304      	adds	r3, #4
 80037dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3307      	adds	r3, #7
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	061a      	lsls	r2, r3, #24
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3306      	adds	r3, #6
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3305      	adds	r3, #5
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	4313      	orrs	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	3204      	adds	r2, #4
 80037fe:	7812      	ldrb	r2, [r2, #0]
 8003800:	4610      	mov	r0, r2
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	6811      	ldr	r1, [r2, #0]
 8003806:	ea43 0200 	orr.w	r2, r3, r0
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	440b      	add	r3, r1
 8003810:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003814:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3303      	adds	r3, #3
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	061a      	lsls	r2, r3, #24
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3302      	adds	r3, #2
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3301      	adds	r3, #1
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	4313      	orrs	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	4610      	mov	r0, r2
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	6811      	ldr	r1, [r2, #0]
 800383c:	ea43 0200 	orr.w	r2, r3, r0
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	440b      	add	r3, r1
 8003846:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800384a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	3318      	adds	r3, #24
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	4413      	add	r3, r2
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	6811      	ldr	r1, [r2, #0]
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	3318      	adds	r3, #24
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	440b      	add	r3, r1
 800386a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	e00e      	b.n	800388e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e006      	b.n	800388e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	3724      	adds	r7, #36	; 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800389a:	b480      	push	{r7}
 800389c:	b087      	sub	sp, #28
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ae:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d003      	beq.n	80038be <HAL_CAN_GetRxMessage+0x24>
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	f040 80f3 	bne.w	8003aa4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10e      	bne.n	80038e2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d116      	bne.n	8003900 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0e7      	b.n	8003ab2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d107      	bne.n	8003900 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0d8      	b.n	8003ab2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	331b      	adds	r3, #27
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	4413      	add	r3, r2
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0204 	and.w	r2, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10c      	bne.n	8003938 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	331b      	adds	r3, #27
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	4413      	add	r3, r2
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	0d5b      	lsrs	r3, r3, #21
 800392e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e00b      	b.n	8003950 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	331b      	adds	r3, #27
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	4413      	add	r3, r2
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	08db      	lsrs	r3, r3, #3
 8003948:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	331b      	adds	r3, #27
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	4413      	add	r3, r2
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0202 	and.w	r2, r3, #2
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	331b      	adds	r3, #27
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	4413      	add	r3, r2
 8003972:	3304      	adds	r3, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 020f 	and.w	r2, r3, #15
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	331b      	adds	r3, #27
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	4413      	add	r3, r2
 800398a:	3304      	adds	r3, #4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	0a1b      	lsrs	r3, r3, #8
 8003990:	b2da      	uxtb	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	331b      	adds	r3, #27
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	4413      	add	r3, r2
 80039a2:	3304      	adds	r3, #4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	0a1a      	lsrs	r2, r3, #8
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0c1a      	lsrs	r2, r3, #16
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	3302      	adds	r3, #2
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0e1a      	lsrs	r2, r3, #24
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	3303      	adds	r3, #3
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	3304      	adds	r3, #4
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	0a1a      	lsrs	r2, r3, #8
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	3305      	adds	r3, #5
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	0c1a      	lsrs	r2, r3, #16
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	3306      	adds	r3, #6
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	0e1a      	lsrs	r2, r3, #24
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	3307      	adds	r3, #7
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d108      	bne.n	8003a90 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0220 	orr.w	r2, r2, #32
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	e007      	b.n	8003aa0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0220 	orr.w	r2, r2, #32
 8003a9e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e006      	b.n	8003ab2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
  }
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ace:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d002      	beq.n	8003adc <HAL_CAN_ActivateNotification+0x1e>
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d109      	bne.n	8003af0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6959      	ldr	r1, [r3, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e006      	b.n	8003afe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
  }
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b08a      	sub	sp, #40	; 0x28
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d07c      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d023      	beq.n	8003ba2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f983 	bl	8003e78 <HAL_CAN_TxMailbox0CompleteCallback>
 8003b72:	e016      	b.n	8003ba2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
 8003b86:	e00c      	b.n	8003ba2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9a:	e002      	b.n	8003ba2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f989 	bl	8003eb4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d024      	beq.n	8003bf6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f963 	bl	8003e8c <HAL_CAN_TxMailbox1CompleteCallback>
 8003bc6:	e016      	b.n	8003bf6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	e00c      	b.n	8003bf6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d004      	beq.n	8003bf0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
 8003bee:	e002      	b.n	8003bf6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f969 	bl	8003ec8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d024      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f943 	bl	8003ea0 <HAL_CAN_TxMailbox2CompleteCallback>
 8003c1a:	e016      	b.n	8003c4a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2e:	e00c      	b.n	8003c4a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
 8003c42:	e002      	b.n	8003c4a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f949 	bl	8003edc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00c      	beq.n	8003c6e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00b      	beq.n	8003c90 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d006      	beq.n	8003c90 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2208      	movs	r2, #8
 8003c88:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f930 	bl	8003ef0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7fd ffab 	bl	8001c04 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00c      	beq.n	8003cd2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2210      	movs	r2, #16
 8003cd0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2208      	movs	r2, #8
 8003cec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f912 	bl	8003f18 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f8f9 	bl	8003f04 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d006      	beq.n	8003d34 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f8fc 	bl	8003f2c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d006      	beq.n	8003d56 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f8f5 	bl	8003f40 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d07b      	beq.n	8003e58 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d072      	beq.n	8003e50 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	f043 0304 	orr.w	r3, r3, #4
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d043      	beq.n	8003e50 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d03e      	beq.n	8003e50 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dd8:	2b60      	cmp	r3, #96	; 0x60
 8003dda:	d02b      	beq.n	8003e34 <HAL_CAN_IRQHandler+0x32a>
 8003ddc:	2b60      	cmp	r3, #96	; 0x60
 8003dde:	d82e      	bhi.n	8003e3e <HAL_CAN_IRQHandler+0x334>
 8003de0:	2b50      	cmp	r3, #80	; 0x50
 8003de2:	d022      	beq.n	8003e2a <HAL_CAN_IRQHandler+0x320>
 8003de4:	2b50      	cmp	r3, #80	; 0x50
 8003de6:	d82a      	bhi.n	8003e3e <HAL_CAN_IRQHandler+0x334>
 8003de8:	2b40      	cmp	r3, #64	; 0x40
 8003dea:	d019      	beq.n	8003e20 <HAL_CAN_IRQHandler+0x316>
 8003dec:	2b40      	cmp	r3, #64	; 0x40
 8003dee:	d826      	bhi.n	8003e3e <HAL_CAN_IRQHandler+0x334>
 8003df0:	2b30      	cmp	r3, #48	; 0x30
 8003df2:	d010      	beq.n	8003e16 <HAL_CAN_IRQHandler+0x30c>
 8003df4:	2b30      	cmp	r3, #48	; 0x30
 8003df6:	d822      	bhi.n	8003e3e <HAL_CAN_IRQHandler+0x334>
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d002      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x2f8>
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d005      	beq.n	8003e0c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003e00:	e01d      	b.n	8003e3e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	f043 0308 	orr.w	r3, r3, #8
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e0a:	e019      	b.n	8003e40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f043 0310 	orr.w	r3, r3, #16
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e14:	e014      	b.n	8003e40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	f043 0320 	orr.w	r3, r3, #32
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e1e:	e00f      	b.n	8003e40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e28:	e00a      	b.n	8003e40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e32:	e005      	b.n	8003e40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e3c:	e000      	b.n	8003e40 <HAL_CAN_IRQHandler+0x336>
            break;
 8003e3e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e4e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2204      	movs	r2, #4
 8003e56:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f872 	bl	8003f54 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003e70:	bf00      	nop
 8003e72:	3728      	adds	r7, #40	; 0x28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <__NVIC_SetPriorityGrouping+0x44>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f84:	4013      	ands	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f9a:	4a04      	ldr	r2, [pc, #16]	; (8003fac <__NVIC_SetPriorityGrouping+0x44>)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	60d3      	str	r3, [r2, #12]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fb4:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	f003 0307 	and.w	r3, r3, #7
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	db0b      	blt.n	8003ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	f003 021f 	and.w	r2, r3, #31
 8003fe4:	4907      	ldr	r1, [pc, #28]	; (8004004 <__NVIC_EnableIRQ+0x38>)
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	2001      	movs	r0, #1
 8003fee:	fa00 f202 	lsl.w	r2, r0, r2
 8003ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	e000e100 	.word	0xe000e100

08004008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	6039      	str	r1, [r7, #0]
 8004012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004018:	2b00      	cmp	r3, #0
 800401a:	db0a      	blt.n	8004032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	b2da      	uxtb	r2, r3
 8004020:	490c      	ldr	r1, [pc, #48]	; (8004054 <__NVIC_SetPriority+0x4c>)
 8004022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004026:	0112      	lsls	r2, r2, #4
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	440b      	add	r3, r1
 800402c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004030:	e00a      	b.n	8004048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	4908      	ldr	r1, [pc, #32]	; (8004058 <__NVIC_SetPriority+0x50>)
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	3b04      	subs	r3, #4
 8004040:	0112      	lsls	r2, r2, #4
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	440b      	add	r3, r1
 8004046:	761a      	strb	r2, [r3, #24]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	e000e100 	.word	0xe000e100
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800405c:	b480      	push	{r7}
 800405e:	b089      	sub	sp, #36	; 0x24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f1c3 0307 	rsb	r3, r3, #7
 8004076:	2b04      	cmp	r3, #4
 8004078:	bf28      	it	cs
 800407a:	2304      	movcs	r3, #4
 800407c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3304      	adds	r3, #4
 8004082:	2b06      	cmp	r3, #6
 8004084:	d902      	bls.n	800408c <NVIC_EncodePriority+0x30>
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	3b03      	subs	r3, #3
 800408a:	e000      	b.n	800408e <NVIC_EncodePriority+0x32>
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43da      	mvns	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	401a      	ands	r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	43d9      	mvns	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b4:	4313      	orrs	r3, r2
         );
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3724      	adds	r7, #36	; 0x24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff ff4c 	bl	8003f68 <__NVIC_SetPriorityGrouping>
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040ea:	f7ff ff61 	bl	8003fb0 <__NVIC_GetPriorityGrouping>
 80040ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	6978      	ldr	r0, [r7, #20]
 80040f6:	f7ff ffb1 	bl	800405c <NVIC_EncodePriority>
 80040fa:	4602      	mov	r2, r0
 80040fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004100:	4611      	mov	r1, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff ff80 	bl	8004008 <__NVIC_SetPriority>
}
 8004108:	bf00      	nop
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800411a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff ff54 	bl	8003fcc <__NVIC_EnableIRQ>
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004138:	f7fe fe22 	bl	8002d80 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e099      	b.n	800427c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0201 	bic.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004168:	e00f      	b.n	800418a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800416a:	f7fe fe09 	bl	8002d80 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b05      	cmp	r3, #5
 8004176:	d908      	bls.n	800418a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2203      	movs	r2, #3
 8004182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e078      	b.n	800427c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e8      	bne.n	800416a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4b38      	ldr	r3, [pc, #224]	; (8004284 <HAL_DMA_Init+0x158>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d107      	bne.n	80041f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	4313      	orrs	r3, r2
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0307 	bic.w	r3, r3, #7
 800420a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b04      	cmp	r3, #4
 800421c:	d117      	bne.n	800424e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00e      	beq.n	800424e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f9e9 	bl	8004608 <DMA_CheckFifoParam>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2240      	movs	r2, #64	; 0x40
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800424a:	2301      	movs	r3, #1
 800424c:	e016      	b.n	800427c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f9a0 	bl	800459c <DMA_CalcBaseAndBitshift>
 800425c:	4603      	mov	r3, r0
 800425e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	223f      	movs	r2, #63	; 0x3f
 8004266:	409a      	lsls	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	f010803f 	.word	0xf010803f

08004288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004294:	4b8e      	ldr	r3, [pc, #568]	; (80044d0 <HAL_DMA_IRQHandler+0x248>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a8e      	ldr	r2, [pc, #568]	; (80044d4 <HAL_DMA_IRQHandler+0x24c>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	0a9b      	lsrs	r3, r3, #10
 80042a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b2:	2208      	movs	r2, #8
 80042b4:	409a      	lsls	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01a      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d013      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0204 	bic.w	r2, r2, #4
 80042da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	2208      	movs	r2, #8
 80042e2:	409a      	lsls	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	f043 0201 	orr.w	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f8:	2201      	movs	r2, #1
 80042fa:	409a      	lsls	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4013      	ands	r3, r2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d012      	beq.n	800432a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004316:	2201      	movs	r2, #1
 8004318:	409a      	lsls	r2, r3
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f043 0202 	orr.w	r2, r3, #2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432e:	2204      	movs	r2, #4
 8004330:	409a      	lsls	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d012      	beq.n	8004360 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	2204      	movs	r2, #4
 800434e:	409a      	lsls	r2, r3
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	f043 0204 	orr.w	r2, r3, #4
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004364:	2210      	movs	r2, #16
 8004366:	409a      	lsls	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d043      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d03c      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004382:	2210      	movs	r2, #16
 8004384:	409a      	lsls	r2, r3
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d018      	beq.n	80043ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d108      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d024      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	4798      	blx	r3
 80043b6:	e01f      	b.n	80043f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01b      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
 80043c8:	e016      	b.n	80043f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d107      	bne.n	80043e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0208 	bic.w	r2, r2, #8
 80043e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	2220      	movs	r2, #32
 80043fe:	409a      	lsls	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 808f 	beq.w	8004528 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8087 	beq.w	8004528 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	2220      	movs	r2, #32
 8004420:	409a      	lsls	r2, r3
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b05      	cmp	r3, #5
 8004430:	d136      	bne.n	80044a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0216 	bic.w	r2, r2, #22
 8004440:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004450:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d103      	bne.n	8004462 <HAL_DMA_IRQHandler+0x1da>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0208 	bic.w	r2, r2, #8
 8004470:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004476:	223f      	movs	r2, #63	; 0x3f
 8004478:	409a      	lsls	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004492:	2b00      	cmp	r3, #0
 8004494:	d07e      	beq.n	8004594 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	4798      	blx	r3
        }
        return;
 800449e:	e079      	b.n	8004594 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01d      	beq.n	80044ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10d      	bne.n	80044d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d031      	beq.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	4798      	blx	r3
 80044cc:	e02c      	b.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
 80044ce:	bf00      	nop
 80044d0:	2000000c 	.word	0x2000000c
 80044d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d023      	beq.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
 80044e8:	e01e      	b.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10f      	bne.n	8004518 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0210 	bic.w	r2, r2, #16
 8004506:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	2b00      	cmp	r3, #0
 800452e:	d032      	beq.n	8004596 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d022      	beq.n	8004582 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2205      	movs	r2, #5
 8004540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	3301      	adds	r3, #1
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	429a      	cmp	r2, r3
 800455e:	d307      	bcc.n	8004570 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f2      	bne.n	8004554 <HAL_DMA_IRQHandler+0x2cc>
 800456e:	e000      	b.n	8004572 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004570:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
 8004592:	e000      	b.n	8004596 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004594:	bf00      	nop
    }
  }
}
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	3b10      	subs	r3, #16
 80045ac:	4a14      	ldr	r2, [pc, #80]	; (8004600 <DMA_CalcBaseAndBitshift+0x64>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	091b      	lsrs	r3, r3, #4
 80045b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045b6:	4a13      	ldr	r2, [pc, #76]	; (8004604 <DMA_CalcBaseAndBitshift+0x68>)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d909      	bls.n	80045de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045d2:	f023 0303 	bic.w	r3, r3, #3
 80045d6:	1d1a      	adds	r2, r3, #4
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	659a      	str	r2, [r3, #88]	; 0x58
 80045dc:	e007      	b.n	80045ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045e6:	f023 0303 	bic.w	r3, r3, #3
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	aaaaaaab 	.word	0xaaaaaaab
 8004604:	0800a6f0 	.word	0x0800a6f0

08004608 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d11f      	bne.n	8004662 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d856      	bhi.n	80046d6 <DMA_CheckFifoParam+0xce>
 8004628:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <DMA_CheckFifoParam+0x28>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004641 	.word	0x08004641
 8004634:	08004653 	.word	0x08004653
 8004638:	08004641 	.word	0x08004641
 800463c:	080046d7 	.word	0x080046d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d046      	beq.n	80046da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004650:	e043      	b.n	80046da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800465a:	d140      	bne.n	80046de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004660:	e03d      	b.n	80046de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800466a:	d121      	bne.n	80046b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d837      	bhi.n	80046e2 <DMA_CheckFifoParam+0xda>
 8004672:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <DMA_CheckFifoParam+0x70>)
 8004674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004678:	08004689 	.word	0x08004689
 800467c:	0800468f 	.word	0x0800468f
 8004680:	08004689 	.word	0x08004689
 8004684:	080046a1 	.word	0x080046a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
      break;
 800468c:	e030      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d025      	beq.n	80046e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800469e:	e022      	b.n	80046e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046a8:	d11f      	bne.n	80046ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046ae:	e01c      	b.n	80046ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d903      	bls.n	80046be <DMA_CheckFifoParam+0xb6>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d003      	beq.n	80046c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046bc:	e018      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
      break;
 80046c2:	e015      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00e      	beq.n	80046ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
      break;
 80046d4:	e00b      	b.n	80046ee <DMA_CheckFifoParam+0xe6>
      break;
 80046d6:	bf00      	nop
 80046d8:	e00a      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      break;
 80046da:	bf00      	nop
 80046dc:	e008      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      break;
 80046de:	bf00      	nop
 80046e0:	e006      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      break;
 80046e2:	bf00      	nop
 80046e4:	e004      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      break;
 80046e6:	bf00      	nop
 80046e8:	e002      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80046ea:	bf00      	nop
 80046ec:	e000      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      break;
 80046ee:	bf00      	nop
    }
  } 
  
  return status; 
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop

08004700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	; 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800470e:	2300      	movs	r3, #0
 8004710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004712:	2300      	movs	r3, #0
 8004714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	e16b      	b.n	80049f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800471c:	2201      	movs	r2, #1
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4013      	ands	r3, r2
 800472e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	429a      	cmp	r2, r3
 8004736:	f040 815a 	bne.w	80049ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d005      	beq.n	8004752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800474e:	2b02      	cmp	r3, #2
 8004750:	d130      	bne.n	80047b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	2203      	movs	r2, #3
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004788:	2201      	movs	r2, #1
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 0201 	and.w	r2, r3, #1
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d017      	beq.n	80047f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	2203      	movs	r2, #3
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d123      	bne.n	8004844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	08da      	lsrs	r2, r3, #3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3208      	adds	r2, #8
 8004804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	220f      	movs	r2, #15
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4313      	orrs	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	08da      	lsrs	r2, r3, #3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3208      	adds	r2, #8
 800483e:	69b9      	ldr	r1, [r7, #24]
 8004840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	2203      	movs	r2, #3
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4013      	ands	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 0203 	and.w	r2, r3, #3
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80b4 	beq.w	80049ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	4b60      	ldr	r3, [pc, #384]	; (8004a0c <HAL_GPIO_Init+0x30c>)
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	4a5f      	ldr	r2, [pc, #380]	; (8004a0c <HAL_GPIO_Init+0x30c>)
 8004890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004894:	6453      	str	r3, [r2, #68]	; 0x44
 8004896:	4b5d      	ldr	r3, [pc, #372]	; (8004a0c <HAL_GPIO_Init+0x30c>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048a2:	4a5b      	ldr	r2, [pc, #364]	; (8004a10 <HAL_GPIO_Init+0x310>)
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	3302      	adds	r3, #2
 80048aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	220f      	movs	r2, #15
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43db      	mvns	r3, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4013      	ands	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a52      	ldr	r2, [pc, #328]	; (8004a14 <HAL_GPIO_Init+0x314>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d02b      	beq.n	8004926 <HAL_GPIO_Init+0x226>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a51      	ldr	r2, [pc, #324]	; (8004a18 <HAL_GPIO_Init+0x318>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d025      	beq.n	8004922 <HAL_GPIO_Init+0x222>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a50      	ldr	r2, [pc, #320]	; (8004a1c <HAL_GPIO_Init+0x31c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01f      	beq.n	800491e <HAL_GPIO_Init+0x21e>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a4f      	ldr	r2, [pc, #316]	; (8004a20 <HAL_GPIO_Init+0x320>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d019      	beq.n	800491a <HAL_GPIO_Init+0x21a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a4e      	ldr	r2, [pc, #312]	; (8004a24 <HAL_GPIO_Init+0x324>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <HAL_GPIO_Init+0x216>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a4d      	ldr	r2, [pc, #308]	; (8004a28 <HAL_GPIO_Init+0x328>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00d      	beq.n	8004912 <HAL_GPIO_Init+0x212>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a4c      	ldr	r2, [pc, #304]	; (8004a2c <HAL_GPIO_Init+0x32c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <HAL_GPIO_Init+0x20e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a4b      	ldr	r2, [pc, #300]	; (8004a30 <HAL_GPIO_Init+0x330>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d101      	bne.n	800490a <HAL_GPIO_Init+0x20a>
 8004906:	2307      	movs	r3, #7
 8004908:	e00e      	b.n	8004928 <HAL_GPIO_Init+0x228>
 800490a:	2308      	movs	r3, #8
 800490c:	e00c      	b.n	8004928 <HAL_GPIO_Init+0x228>
 800490e:	2306      	movs	r3, #6
 8004910:	e00a      	b.n	8004928 <HAL_GPIO_Init+0x228>
 8004912:	2305      	movs	r3, #5
 8004914:	e008      	b.n	8004928 <HAL_GPIO_Init+0x228>
 8004916:	2304      	movs	r3, #4
 8004918:	e006      	b.n	8004928 <HAL_GPIO_Init+0x228>
 800491a:	2303      	movs	r3, #3
 800491c:	e004      	b.n	8004928 <HAL_GPIO_Init+0x228>
 800491e:	2302      	movs	r3, #2
 8004920:	e002      	b.n	8004928 <HAL_GPIO_Init+0x228>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_GPIO_Init+0x228>
 8004926:	2300      	movs	r3, #0
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	f002 0203 	and.w	r2, r2, #3
 800492e:	0092      	lsls	r2, r2, #2
 8004930:	4093      	lsls	r3, r2
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004938:	4935      	ldr	r1, [pc, #212]	; (8004a10 <HAL_GPIO_Init+0x310>)
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	089b      	lsrs	r3, r3, #2
 800493e:	3302      	adds	r3, #2
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004946:	4b3b      	ldr	r3, [pc, #236]	; (8004a34 <HAL_GPIO_Init+0x334>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	43db      	mvns	r3, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4013      	ands	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800496a:	4a32      	ldr	r2, [pc, #200]	; (8004a34 <HAL_GPIO_Init+0x334>)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004970:	4b30      	ldr	r3, [pc, #192]	; (8004a34 <HAL_GPIO_Init+0x334>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	43db      	mvns	r3, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004994:	4a27      	ldr	r2, [pc, #156]	; (8004a34 <HAL_GPIO_Init+0x334>)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800499a:	4b26      	ldr	r3, [pc, #152]	; (8004a34 <HAL_GPIO_Init+0x334>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	43db      	mvns	r3, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4013      	ands	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049be:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <HAL_GPIO_Init+0x334>)
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049c4:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <HAL_GPIO_Init+0x334>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	43db      	mvns	r3, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049e8:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <HAL_GPIO_Init+0x334>)
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3301      	adds	r3, #1
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	2b0f      	cmp	r3, #15
 80049f8:	f67f ae90 	bls.w	800471c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	3724      	adds	r7, #36	; 0x24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	40013800 	.word	0x40013800
 8004a14:	40020000 	.word	0x40020000
 8004a18:	40020400 	.word	0x40020400
 8004a1c:	40020800 	.word	0x40020800
 8004a20:	40020c00 	.word	0x40020c00
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40021400 	.word	0x40021400
 8004a2c:	40021800 	.word	0x40021800
 8004a30:	40021c00 	.word	0x40021c00
 8004a34:	40013c00 	.word	0x40013c00

08004a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	887b      	ldrh	r3, [r7, #2]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
 8004a54:	e001      	b.n	8004a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a72:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d006      	beq.n	8004a8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a7e:	4a05      	ldr	r2, [pc, #20]	; (8004a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a80:	88fb      	ldrh	r3, [r7, #6]
 8004a82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a84:	88fb      	ldrh	r3, [r7, #6]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fd fc92 	bl	80023b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40013c00 	.word	0x40013c00

08004a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e12b      	b.n	8004d02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fd f82a 	bl	8001b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2224      	movs	r2, #36	; 0x24
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004afa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004afc:	f001 fbec 	bl	80062d8 <HAL_RCC_GetPCLK1Freq>
 8004b00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	4a81      	ldr	r2, [pc, #516]	; (8004d0c <HAL_I2C_Init+0x274>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d807      	bhi.n	8004b1c <HAL_I2C_Init+0x84>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4a80      	ldr	r2, [pc, #512]	; (8004d10 <HAL_I2C_Init+0x278>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	bf94      	ite	ls
 8004b14:	2301      	movls	r3, #1
 8004b16:	2300      	movhi	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	e006      	b.n	8004b2a <HAL_I2C_Init+0x92>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a7d      	ldr	r2, [pc, #500]	; (8004d14 <HAL_I2C_Init+0x27c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	bf94      	ite	ls
 8004b24:	2301      	movls	r3, #1
 8004b26:	2300      	movhi	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e0e7      	b.n	8004d02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4a78      	ldr	r2, [pc, #480]	; (8004d18 <HAL_I2C_Init+0x280>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	0c9b      	lsrs	r3, r3, #18
 8004b3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	4a6a      	ldr	r2, [pc, #424]	; (8004d0c <HAL_I2C_Init+0x274>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d802      	bhi.n	8004b6c <HAL_I2C_Init+0xd4>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	e009      	b.n	8004b80 <HAL_I2C_Init+0xe8>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b72:	fb02 f303 	mul.w	r3, r2, r3
 8004b76:	4a69      	ldr	r2, [pc, #420]	; (8004d1c <HAL_I2C_Init+0x284>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	099b      	lsrs	r3, r3, #6
 8004b7e:	3301      	adds	r3, #1
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6812      	ldr	r2, [r2, #0]
 8004b84:	430b      	orrs	r3, r1
 8004b86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	495c      	ldr	r1, [pc, #368]	; (8004d0c <HAL_I2C_Init+0x274>)
 8004b9c:	428b      	cmp	r3, r1
 8004b9e:	d819      	bhi.n	8004bd4 <HAL_I2C_Init+0x13c>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	1e59      	subs	r1, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bae:	1c59      	adds	r1, r3, #1
 8004bb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bb4:	400b      	ands	r3, r1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_I2C_Init+0x138>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1e59      	subs	r1, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bce:	e051      	b.n	8004c74 <HAL_I2C_Init+0x1dc>
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	e04f      	b.n	8004c74 <HAL_I2C_Init+0x1dc>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d111      	bne.n	8004c00 <HAL_I2C_Init+0x168>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	1e58      	subs	r0, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6859      	ldr	r1, [r3, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	440b      	add	r3, r1
 8004bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bee:	3301      	adds	r3, #1
 8004bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e012      	b.n	8004c26 <HAL_I2C_Init+0x18e>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	1e58      	subs	r0, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6859      	ldr	r1, [r3, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	0099      	lsls	r1, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c16:	3301      	adds	r3, #1
 8004c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf0c      	ite	eq
 8004c20:	2301      	moveq	r3, #1
 8004c22:	2300      	movne	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_I2C_Init+0x196>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e022      	b.n	8004c74 <HAL_I2C_Init+0x1dc>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10e      	bne.n	8004c54 <HAL_I2C_Init+0x1bc>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1e58      	subs	r0, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6859      	ldr	r1, [r3, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	440b      	add	r3, r1
 8004c44:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c48:	3301      	adds	r3, #1
 8004c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c52:	e00f      	b.n	8004c74 <HAL_I2C_Init+0x1dc>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1e58      	subs	r0, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	0099      	lsls	r1, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	6809      	ldr	r1, [r1, #0]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69da      	ldr	r2, [r3, #28]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6911      	ldr	r1, [r2, #16]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	68d2      	ldr	r2, [r2, #12]
 8004cae:	4311      	orrs	r1, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695a      	ldr	r2, [r3, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	000186a0 	.word	0x000186a0
 8004d10:	001e847f 	.word	0x001e847f
 8004d14:	003d08ff 	.word	0x003d08ff
 8004d18:	431bde83 	.word	0x431bde83
 8004d1c:	10624dd3 	.word	0x10624dd3

08004d20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	817b      	strh	r3, [r7, #10]
 8004d30:	4613      	mov	r3, r2
 8004d32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d34:	f7fe f824 	bl	8002d80 <HAL_GetTick>
 8004d38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	f040 80e0 	bne.w	8004f08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	2319      	movs	r3, #25
 8004d4e:	2201      	movs	r2, #1
 8004d50:	4970      	ldr	r1, [pc, #448]	; (8004f14 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fc72 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e0d3      	b.n	8004f0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_I2C_Master_Transmit+0x50>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e0cc      	b.n	8004f0a <HAL_I2C_Master_Transmit+0x1ea>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d007      	beq.n	8004d96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2221      	movs	r2, #33	; 0x21
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2210      	movs	r2, #16
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	893a      	ldrh	r2, [r7, #8]
 8004dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4a50      	ldr	r2, [pc, #320]	; (8004f18 <HAL_I2C_Master_Transmit+0x1f8>)
 8004dd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004dd8:	8979      	ldrh	r1, [r7, #10]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	6a3a      	ldr	r2, [r7, #32]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fadc 	bl	800539c <I2C_MasterRequestWrite>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e08d      	b.n	8004f0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e04:	e066      	b.n	8004ed4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	6a39      	ldr	r1, [r7, #32]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 fcec 	bl	80057e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00d      	beq.n	8004e32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d107      	bne.n	8004e2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e06b      	b.n	8004f0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	781a      	ldrb	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d11b      	bne.n	8004ea8 <HAL_I2C_Master_Transmit+0x188>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d017      	beq.n	8004ea8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	781a      	ldrb	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	6a39      	ldr	r1, [r7, #32]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 fcdc 	bl	800586a <I2C_WaitOnBTFFlagUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00d      	beq.n	8004ed4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d107      	bne.n	8004ed0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ece:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e01a      	b.n	8004f0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d194      	bne.n	8004e06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	e000      	b.n	8004f0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
  }
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	00100002 	.word	0x00100002
 8004f18:	ffff0000 	.word	0xffff0000

08004f1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08c      	sub	sp, #48	; 0x30
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	461a      	mov	r2, r3
 8004f28:	460b      	mov	r3, r1
 8004f2a:	817b      	strh	r3, [r7, #10]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f30:	f7fd ff26 	bl	8002d80 <HAL_GetTick>
 8004f34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	f040 820b 	bne.w	800535a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	2319      	movs	r3, #25
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	497c      	ldr	r1, [pc, #496]	; (8005140 <HAL_I2C_Master_Receive+0x224>)
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 fb74 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e1fe      	b.n	800535c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_I2C_Master_Receive+0x50>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e1f7      	b.n	800535c <HAL_I2C_Master_Receive+0x440>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d007      	beq.n	8004f92 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2222      	movs	r2, #34	; 0x22
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2210      	movs	r2, #16
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	893a      	ldrh	r2, [r7, #8]
 8004fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a5c      	ldr	r2, [pc, #368]	; (8005144 <HAL_I2C_Master_Receive+0x228>)
 8004fd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fd4:	8979      	ldrh	r1, [r7, #10]
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fa60 	bl	80054a0 <I2C_MasterRequestRead>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e1b8      	b.n	800535c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d113      	bne.n	800501a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	623b      	str	r3, [r7, #32]
 8005006:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e18c      	b.n	8005334 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501e:	2b01      	cmp	r3, #1
 8005020:	d11b      	bne.n	800505a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	e16c      	b.n	8005334 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505e:	2b02      	cmp	r3, #2
 8005060:	d11b      	bne.n	800509a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005070:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	e14c      	b.n	8005334 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050c0:	e138      	b.n	8005334 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	f200 80f1 	bhi.w	80052ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d123      	bne.n	800511c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 fc07 	bl	80058ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e139      	b.n	800535c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a
 800511a:	e10b      	b.n	8005334 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	2b02      	cmp	r3, #2
 8005122:	d14e      	bne.n	80051c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	2200      	movs	r2, #0
 800512c:	4906      	ldr	r1, [pc, #24]	; (8005148 <HAL_I2C_Master_Receive+0x22c>)
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 fa84 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d008      	beq.n	800514c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e10e      	b.n	800535c <HAL_I2C_Master_Receive+0x440>
 800513e:	bf00      	nop
 8005140:	00100002 	.word	0x00100002
 8005144:	ffff0000 	.word	0xffff0000
 8005148:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051c0:	e0b8      	b.n	8005334 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	2200      	movs	r2, #0
 80051ca:	4966      	ldr	r1, [pc, #408]	; (8005364 <HAL_I2C_Master_Receive+0x448>)
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 fa35 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e0bf      	b.n	800535c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	2200      	movs	r2, #0
 8005226:	494f      	ldr	r1, [pc, #316]	; (8005364 <HAL_I2C_Master_Receive+0x448>)
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fa07 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e091      	b.n	800535c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052ac:	e042      	b.n	8005334 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fb1a 	bl	80058ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e04c      	b.n	800535c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d118      	bne.n	8005334 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005338:	2b00      	cmp	r3, #0
 800533a:	f47f aec2 	bne.w	80050c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2220      	movs	r2, #32
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	e000      	b.n	800535c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800535a:	2302      	movs	r3, #2
  }
}
 800535c:	4618      	mov	r0, r3
 800535e:	3728      	adds	r7, #40	; 0x28
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	00010004 	.word	0x00010004

08005368 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005376:	b2db      	uxtb	r3, r3
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	607a      	str	r2, [r7, #4]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	460b      	mov	r3, r1
 80053aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d006      	beq.n	80053c6 <I2C_MasterRequestWrite+0x2a>
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d003      	beq.n	80053c6 <I2C_MasterRequestWrite+0x2a>
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053c4:	d108      	bne.n	80053d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e00b      	b.n	80053f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	2b12      	cmp	r3, #18
 80053de:	d107      	bne.n	80053f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f91d 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00d      	beq.n	8005424 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005416:	d103      	bne.n	8005420 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800541e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e035      	b.n	8005490 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800542c:	d108      	bne.n	8005440 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800543c:	611a      	str	r2, [r3, #16]
 800543e:	e01b      	b.n	8005478 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005440:	897b      	ldrh	r3, [r7, #10]
 8005442:	11db      	asrs	r3, r3, #7
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f003 0306 	and.w	r3, r3, #6
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f063 030f 	orn	r3, r3, #15
 8005450:	b2da      	uxtb	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	490e      	ldr	r1, [pc, #56]	; (8005498 <I2C_MasterRequestWrite+0xfc>)
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f943 	bl	80056ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e010      	b.n	8005490 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800546e:	897b      	ldrh	r3, [r7, #10]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4907      	ldr	r1, [pc, #28]	; (800549c <I2C_MasterRequestWrite+0x100>)
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f933 	bl	80056ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	00010008 	.word	0x00010008
 800549c:	00010002 	.word	0x00010002

080054a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	460b      	mov	r3, r1
 80054ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d006      	beq.n	80054da <I2C_MasterRequestRead+0x3a>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d003      	beq.n	80054da <I2C_MasterRequestRead+0x3a>
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054d8:	d108      	bne.n	80054ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	e00b      	b.n	8005504 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	2b11      	cmp	r3, #17
 80054f2:	d107      	bne.n	8005504 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f893 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00d      	beq.n	8005538 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800552a:	d103      	bne.n	8005534 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e079      	b.n	800562c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005540:	d108      	bne.n	8005554 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005542:	897b      	ldrh	r3, [r7, #10]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	b2da      	uxtb	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	611a      	str	r2, [r3, #16]
 8005552:	e05f      	b.n	8005614 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005554:	897b      	ldrh	r3, [r7, #10]
 8005556:	11db      	asrs	r3, r3, #7
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f003 0306 	and.w	r3, r3, #6
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f063 030f 	orn	r3, r3, #15
 8005564:	b2da      	uxtb	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4930      	ldr	r1, [pc, #192]	; (8005634 <I2C_MasterRequestRead+0x194>)
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f8b9 	bl	80056ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e054      	b.n	800562c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005582:	897b      	ldrh	r3, [r7, #10]
 8005584:	b2da      	uxtb	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	4929      	ldr	r1, [pc, #164]	; (8005638 <I2C_MasterRequestRead+0x198>)
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f8a9 	bl	80056ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e044      	b.n	800562c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a2:	2300      	movs	r3, #0
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f831 	bl	800563c <I2C_WaitOnFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00d      	beq.n	80055fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ee:	d103      	bne.n	80055f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e017      	b.n	800562c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80055fc:	897b      	ldrh	r3, [r7, #10]
 80055fe:	11db      	asrs	r3, r3, #7
 8005600:	b2db      	uxtb	r3, r3
 8005602:	f003 0306 	and.w	r3, r3, #6
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f063 030e 	orn	r3, r3, #14
 800560c:	b2da      	uxtb	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4907      	ldr	r1, [pc, #28]	; (8005638 <I2C_MasterRequestRead+0x198>)
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f865 	bl	80056ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	00010008 	.word	0x00010008
 8005638:	00010002 	.word	0x00010002

0800563c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	4613      	mov	r3, r2
 800564a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800564c:	e025      	b.n	800569a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005654:	d021      	beq.n	800569a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005656:	f7fd fb93 	bl	8002d80 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d302      	bcc.n	800566c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d116      	bne.n	800569a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e023      	b.n	80056e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d10d      	bne.n	80056c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	43da      	mvns	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4013      	ands	r3, r2
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	bf0c      	ite	eq
 80056b6:	2301      	moveq	r3, #1
 80056b8:	2300      	movne	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	e00c      	b.n	80056da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	43da      	mvns	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4013      	ands	r3, r2
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bf0c      	ite	eq
 80056d2:	2301      	moveq	r3, #1
 80056d4:	2300      	movne	r3, #0
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d0b6      	beq.n	800564e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056f8:	e051      	b.n	800579e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005708:	d123      	bne.n	8005752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005718:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005722:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f043 0204 	orr.w	r2, r3, #4
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e046      	b.n	80057e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005758:	d021      	beq.n	800579e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575a:	f7fd fb11 	bl	8002d80 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	d302      	bcc.n	8005770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d116      	bne.n	800579e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f043 0220 	orr.w	r2, r3, #32
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e020      	b.n	80057e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	0c1b      	lsrs	r3, r3, #16
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d10c      	bne.n	80057c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	43da      	mvns	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4013      	ands	r3, r2
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	bf14      	ite	ne
 80057ba:	2301      	movne	r3, #1
 80057bc:	2300      	moveq	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	e00b      	b.n	80057da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	43da      	mvns	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4013      	ands	r3, r2
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d18d      	bne.n	80056fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057f4:	e02d      	b.n	8005852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f8ce 	bl	8005998 <I2C_IsAcknowledgeFailed>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e02d      	b.n	8005862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800580c:	d021      	beq.n	8005852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580e:	f7fd fab7 	bl	8002d80 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	429a      	cmp	r2, r3
 800581c:	d302      	bcc.n	8005824 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d116      	bne.n	8005852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f043 0220 	orr.w	r2, r3, #32
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e007      	b.n	8005862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585c:	2b80      	cmp	r3, #128	; 0x80
 800585e:	d1ca      	bne.n	80057f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005876:	e02d      	b.n	80058d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f88d 	bl	8005998 <I2C_IsAcknowledgeFailed>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e02d      	b.n	80058e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800588e:	d021      	beq.n	80058d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005890:	f7fd fa76 	bl	8002d80 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	429a      	cmp	r2, r3
 800589e:	d302      	bcc.n	80058a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d116      	bne.n	80058d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	f043 0220 	orr.w	r2, r3, #32
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e007      	b.n	80058e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d1ca      	bne.n	8005878 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058f8:	e042      	b.n	8005980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b10      	cmp	r3, #16
 8005906:	d119      	bne.n	800593c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0210 	mvn.w	r2, #16
 8005910:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e029      	b.n	8005990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593c:	f7fd fa20 	bl	8002d80 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	429a      	cmp	r2, r3
 800594a:	d302      	bcc.n	8005952 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d116      	bne.n	8005980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	f043 0220 	orr.w	r2, r3, #32
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e007      	b.n	8005990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d1b5      	bne.n	80058fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ae:	d11b      	bne.n	80059e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	f043 0204 	orr.w	r2, r3, #4
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e267      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d075      	beq.n	8005b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a16:	4b88      	ldr	r3, [pc, #544]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 030c 	and.w	r3, r3, #12
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d00c      	beq.n	8005a3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a22:	4b85      	ldr	r3, [pc, #532]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d112      	bne.n	8005a54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a2e:	4b82      	ldr	r3, [pc, #520]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a3a:	d10b      	bne.n	8005a54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a3c:	4b7e      	ldr	r3, [pc, #504]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d05b      	beq.n	8005b00 <HAL_RCC_OscConfig+0x108>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d157      	bne.n	8005b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e242      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5c:	d106      	bne.n	8005a6c <HAL_RCC_OscConfig+0x74>
 8005a5e:	4b76      	ldr	r3, [pc, #472]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a75      	ldr	r2, [pc, #468]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	e01d      	b.n	8005aa8 <HAL_RCC_OscConfig+0xb0>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a74:	d10c      	bne.n	8005a90 <HAL_RCC_OscConfig+0x98>
 8005a76:	4b70      	ldr	r3, [pc, #448]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a6f      	ldr	r2, [pc, #444]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	4b6d      	ldr	r3, [pc, #436]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a6c      	ldr	r2, [pc, #432]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	e00b      	b.n	8005aa8 <HAL_RCC_OscConfig+0xb0>
 8005a90:	4b69      	ldr	r3, [pc, #420]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a68      	ldr	r2, [pc, #416]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	4b66      	ldr	r3, [pc, #408]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a65      	ldr	r2, [pc, #404]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d013      	beq.n	8005ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab0:	f7fd f966 	bl	8002d80 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ab8:	f7fd f962 	bl	8002d80 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b64      	cmp	r3, #100	; 0x64
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e207      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aca:	4b5b      	ldr	r3, [pc, #364]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f0      	beq.n	8005ab8 <HAL_RCC_OscConfig+0xc0>
 8005ad6:	e014      	b.n	8005b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad8:	f7fd f952 	bl	8002d80 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ae0:	f7fd f94e 	bl	8002d80 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b64      	cmp	r3, #100	; 0x64
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e1f3      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005af2:	4b51      	ldr	r3, [pc, #324]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f0      	bne.n	8005ae0 <HAL_RCC_OscConfig+0xe8>
 8005afe:	e000      	b.n	8005b02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d063      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b0e:	4b4a      	ldr	r3, [pc, #296]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 030c 	and.w	r3, r3, #12
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00b      	beq.n	8005b32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b1a:	4b47      	ldr	r3, [pc, #284]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d11c      	bne.n	8005b60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b26:	4b44      	ldr	r3, [pc, #272]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d116      	bne.n	8005b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b32:	4b41      	ldr	r3, [pc, #260]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d005      	beq.n	8005b4a <HAL_RCC_OscConfig+0x152>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d001      	beq.n	8005b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e1c7      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b4a:	4b3b      	ldr	r3, [pc, #236]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	4937      	ldr	r1, [pc, #220]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b5e:	e03a      	b.n	8005bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d020      	beq.n	8005baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b68:	4b34      	ldr	r3, [pc, #208]	; (8005c3c <HAL_RCC_OscConfig+0x244>)
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6e:	f7fd f907 	bl	8002d80 <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b76:	f7fd f903 	bl	8002d80 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e1a8      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b88:	4b2b      	ldr	r3, [pc, #172]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0f0      	beq.n	8005b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b94:	4b28      	ldr	r3, [pc, #160]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	4925      	ldr	r1, [pc, #148]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	600b      	str	r3, [r1, #0]
 8005ba8:	e015      	b.n	8005bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005baa:	4b24      	ldr	r3, [pc, #144]	; (8005c3c <HAL_RCC_OscConfig+0x244>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb0:	f7fd f8e6 	bl	8002d80 <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bb8:	f7fd f8e2 	bl	8002d80 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e187      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bca:	4b1b      	ldr	r3, [pc, #108]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1f0      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d036      	beq.n	8005c50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d016      	beq.n	8005c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bea:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <HAL_RCC_OscConfig+0x248>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf0:	f7fd f8c6 	bl	8002d80 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bf8:	f7fd f8c2 	bl	8002d80 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e167      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <HAL_RCC_OscConfig+0x240>)
 8005c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0f0      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x200>
 8005c16:	e01b      	b.n	8005c50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c18:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <HAL_RCC_OscConfig+0x248>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c1e:	f7fd f8af 	bl	8002d80 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c24:	e00e      	b.n	8005c44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c26:	f7fd f8ab 	bl	8002d80 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d907      	bls.n	8005c44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e150      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	42470000 	.word	0x42470000
 8005c40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c44:	4b88      	ldr	r3, [pc, #544]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1ea      	bne.n	8005c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8097 	beq.w	8005d8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c62:	4b81      	ldr	r3, [pc, #516]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10f      	bne.n	8005c8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	4b7d      	ldr	r3, [pc, #500]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	4a7c      	ldr	r2, [pc, #496]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c7e:	4b7a      	ldr	r3, [pc, #488]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c86:	60bb      	str	r3, [r7, #8]
 8005c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c8e:	4b77      	ldr	r3, [pc, #476]	; (8005e6c <HAL_RCC_OscConfig+0x474>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d118      	bne.n	8005ccc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c9a:	4b74      	ldr	r3, [pc, #464]	; (8005e6c <HAL_RCC_OscConfig+0x474>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a73      	ldr	r2, [pc, #460]	; (8005e6c <HAL_RCC_OscConfig+0x474>)
 8005ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ca6:	f7fd f86b 	bl	8002d80 <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cae:	f7fd f867 	bl	8002d80 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e10c      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc0:	4b6a      	ldr	r3, [pc, #424]	; (8005e6c <HAL_RCC_OscConfig+0x474>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f0      	beq.n	8005cae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d106      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x2ea>
 8005cd4:	4b64      	ldr	r3, [pc, #400]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd8:	4a63      	ldr	r2, [pc, #396]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce0:	e01c      	b.n	8005d1c <HAL_RCC_OscConfig+0x324>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	d10c      	bne.n	8005d04 <HAL_RCC_OscConfig+0x30c>
 8005cea:	4b5f      	ldr	r3, [pc, #380]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cee:	4a5e      	ldr	r2, [pc, #376]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005cf0:	f043 0304 	orr.w	r3, r3, #4
 8005cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf6:	4b5c      	ldr	r3, [pc, #368]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfa:	4a5b      	ldr	r2, [pc, #364]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	6713      	str	r3, [r2, #112]	; 0x70
 8005d02:	e00b      	b.n	8005d1c <HAL_RCC_OscConfig+0x324>
 8005d04:	4b58      	ldr	r3, [pc, #352]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d08:	4a57      	ldr	r2, [pc, #348]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d10:	4b55      	ldr	r3, [pc, #340]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d14:	4a54      	ldr	r2, [pc, #336]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005d16:	f023 0304 	bic.w	r3, r3, #4
 8005d1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d015      	beq.n	8005d50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d24:	f7fd f82c 	bl	8002d80 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2a:	e00a      	b.n	8005d42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d2c:	f7fd f828 	bl	8002d80 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e0cb      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d42:	4b49      	ldr	r3, [pc, #292]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0ee      	beq.n	8005d2c <HAL_RCC_OscConfig+0x334>
 8005d4e:	e014      	b.n	8005d7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d50:	f7fd f816 	bl	8002d80 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d56:	e00a      	b.n	8005d6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d58:	f7fd f812 	bl	8002d80 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e0b5      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d6e:	4b3e      	ldr	r3, [pc, #248]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1ee      	bne.n	8005d58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d105      	bne.n	8005d8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d80:	4b39      	ldr	r3, [pc, #228]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	4a38      	ldr	r2, [pc, #224]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80a1 	beq.w	8005ed8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d96:	4b34      	ldr	r3, [pc, #208]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d05c      	beq.n	8005e5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d141      	bne.n	8005e2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005daa:	4b31      	ldr	r3, [pc, #196]	; (8005e70 <HAL_RCC_OscConfig+0x478>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db0:	f7fc ffe6 	bl	8002d80 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db8:	f7fc ffe2 	bl	8002d80 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e087      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dca:	4b27      	ldr	r3, [pc, #156]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f0      	bne.n	8005db8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69da      	ldr	r2, [r3, #28]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	019b      	lsls	r3, r3, #6
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	085b      	lsrs	r3, r3, #1
 8005dee:	3b01      	subs	r3, #1
 8005df0:	041b      	lsls	r3, r3, #16
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	061b      	lsls	r3, r3, #24
 8005dfa:	491b      	ldr	r1, [pc, #108]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e00:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <HAL_RCC_OscConfig+0x478>)
 8005e02:	2201      	movs	r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e06:	f7fc ffbb 	bl	8002d80 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e0e:	f7fc ffb7 	bl	8002d80 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e05c      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e20:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f0      	beq.n	8005e0e <HAL_RCC_OscConfig+0x416>
 8005e2c:	e054      	b.n	8005ed8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e2e:	4b10      	ldr	r3, [pc, #64]	; (8005e70 <HAL_RCC_OscConfig+0x478>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e34:	f7fc ffa4 	bl	8002d80 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e3c:	f7fc ffa0 	bl	8002d80 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e045      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e4e:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <HAL_RCC_OscConfig+0x470>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f0      	bne.n	8005e3c <HAL_RCC_OscConfig+0x444>
 8005e5a:	e03d      	b.n	8005ed8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d107      	bne.n	8005e74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e038      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	40007000 	.word	0x40007000
 8005e70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e74:	4b1b      	ldr	r3, [pc, #108]	; (8005ee4 <HAL_RCC_OscConfig+0x4ec>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d028      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d121      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d11a      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005eaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d111      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	085b      	lsrs	r3, r3, #1
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d107      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d001      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e000      	b.n	8005eda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40023800 	.word	0x40023800

08005ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0cc      	b.n	8006096 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005efc:	4b68      	ldr	r3, [pc, #416]	; (80060a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d90c      	bls.n	8005f24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0a:	4b65      	ldr	r3, [pc, #404]	; (80060a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f12:	4b63      	ldr	r3, [pc, #396]	; (80060a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d001      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0b8      	b.n	8006096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d020      	beq.n	8005f72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d005      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f3c:	4b59      	ldr	r3, [pc, #356]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	4a58      	ldr	r2, [pc, #352]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d005      	beq.n	8005f60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f54:	4b53      	ldr	r3, [pc, #332]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	4a52      	ldr	r2, [pc, #328]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f60:	4b50      	ldr	r3, [pc, #320]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	494d      	ldr	r1, [pc, #308]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d044      	beq.n	8006008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d107      	bne.n	8005f96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f86:	4b47      	ldr	r3, [pc, #284]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d119      	bne.n	8005fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e07f      	b.n	8006096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d003      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d107      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fa6:	4b3f      	ldr	r3, [pc, #252]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e06f      	b.n	8006096 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb6:	4b3b      	ldr	r3, [pc, #236]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e067      	b.n	8006096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fc6:	4b37      	ldr	r3, [pc, #220]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f023 0203 	bic.w	r2, r3, #3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	4934      	ldr	r1, [pc, #208]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fd8:	f7fc fed2 	bl	8002d80 <HAL_GetTick>
 8005fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fde:	e00a      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe0:	f7fc fece 	bl	8002d80 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e04f      	b.n	8006096 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff6:	4b2b      	ldr	r3, [pc, #172]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 020c 	and.w	r2, r3, #12
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	429a      	cmp	r2, r3
 8006006:	d1eb      	bne.n	8005fe0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006008:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <HAL_RCC_ClockConfig+0x1b8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	429a      	cmp	r2, r3
 8006014:	d20c      	bcs.n	8006030 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006016:	4b22      	ldr	r3, [pc, #136]	; (80060a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800601e:	4b20      	ldr	r3, [pc, #128]	; (80060a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d001      	beq.n	8006030 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e032      	b.n	8006096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0304 	and.w	r3, r3, #4
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800603c:	4b19      	ldr	r3, [pc, #100]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	4916      	ldr	r1, [pc, #88]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	4313      	orrs	r3, r2
 800604c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800605a:	4b12      	ldr	r3, [pc, #72]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	490e      	ldr	r1, [pc, #56]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 800606a:	4313      	orrs	r3, r2
 800606c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800606e:	f000 f821 	bl	80060b4 <HAL_RCC_GetSysClockFreq>
 8006072:	4602      	mov	r2, r0
 8006074:	4b0b      	ldr	r3, [pc, #44]	; (80060a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	091b      	lsrs	r3, r3, #4
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	490a      	ldr	r1, [pc, #40]	; (80060a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006080:	5ccb      	ldrb	r3, [r1, r3]
 8006082:	fa22 f303 	lsr.w	r3, r2, r3
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <HAL_RCC_ClockConfig+0x1c4>)
 8006088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800608a:	4b09      	ldr	r3, [pc, #36]	; (80060b0 <HAL_RCC_ClockConfig+0x1c8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f7fc fb82 	bl	8002798 <HAL_InitTick>

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40023c00 	.word	0x40023c00
 80060a4:	40023800 	.word	0x40023800
 80060a8:	0800a6d8 	.word	0x0800a6d8
 80060ac:	2000000c 	.word	0x2000000c
 80060b0:	20000010 	.word	0x20000010

080060b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b8:	b094      	sub	sp, #80	; 0x50
 80060ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	647b      	str	r3, [r7, #68]	; 0x44
 80060c0:	2300      	movs	r3, #0
 80060c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c4:	2300      	movs	r3, #0
 80060c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060cc:	4b79      	ldr	r3, [pc, #484]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 030c 	and.w	r3, r3, #12
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d00d      	beq.n	80060f4 <HAL_RCC_GetSysClockFreq+0x40>
 80060d8:	2b08      	cmp	r3, #8
 80060da:	f200 80e1 	bhi.w	80062a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d002      	beq.n	80060e8 <HAL_RCC_GetSysClockFreq+0x34>
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d003      	beq.n	80060ee <HAL_RCC_GetSysClockFreq+0x3a>
 80060e6:	e0db      	b.n	80062a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060e8:	4b73      	ldr	r3, [pc, #460]	; (80062b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80060ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80060ec:	e0db      	b.n	80062a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060ee:	4b73      	ldr	r3, [pc, #460]	; (80062bc <HAL_RCC_GetSysClockFreq+0x208>)
 80060f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060f2:	e0d8      	b.n	80062a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060f4:	4b6f      	ldr	r3, [pc, #444]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060fe:	4b6d      	ldr	r3, [pc, #436]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d063      	beq.n	80061d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800610a:	4b6a      	ldr	r3, [pc, #424]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	099b      	lsrs	r3, r3, #6
 8006110:	2200      	movs	r2, #0
 8006112:	63bb      	str	r3, [r7, #56]	; 0x38
 8006114:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800611c:	633b      	str	r3, [r7, #48]	; 0x30
 800611e:	2300      	movs	r3, #0
 8006120:	637b      	str	r3, [r7, #52]	; 0x34
 8006122:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006126:	4622      	mov	r2, r4
 8006128:	462b      	mov	r3, r5
 800612a:	f04f 0000 	mov.w	r0, #0
 800612e:	f04f 0100 	mov.w	r1, #0
 8006132:	0159      	lsls	r1, r3, #5
 8006134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006138:	0150      	lsls	r0, r2, #5
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4621      	mov	r1, r4
 8006140:	1a51      	subs	r1, r2, r1
 8006142:	6139      	str	r1, [r7, #16]
 8006144:	4629      	mov	r1, r5
 8006146:	eb63 0301 	sbc.w	r3, r3, r1
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006158:	4659      	mov	r1, fp
 800615a:	018b      	lsls	r3, r1, #6
 800615c:	4651      	mov	r1, sl
 800615e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006162:	4651      	mov	r1, sl
 8006164:	018a      	lsls	r2, r1, #6
 8006166:	4651      	mov	r1, sl
 8006168:	ebb2 0801 	subs.w	r8, r2, r1
 800616c:	4659      	mov	r1, fp
 800616e:	eb63 0901 	sbc.w	r9, r3, r1
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	f04f 0300 	mov.w	r3, #0
 800617a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800617e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006186:	4690      	mov	r8, r2
 8006188:	4699      	mov	r9, r3
 800618a:	4623      	mov	r3, r4
 800618c:	eb18 0303 	adds.w	r3, r8, r3
 8006190:	60bb      	str	r3, [r7, #8]
 8006192:	462b      	mov	r3, r5
 8006194:	eb49 0303 	adc.w	r3, r9, r3
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061a6:	4629      	mov	r1, r5
 80061a8:	024b      	lsls	r3, r1, #9
 80061aa:	4621      	mov	r1, r4
 80061ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061b0:	4621      	mov	r1, r4
 80061b2:	024a      	lsls	r2, r1, #9
 80061b4:	4610      	mov	r0, r2
 80061b6:	4619      	mov	r1, r3
 80061b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ba:	2200      	movs	r2, #0
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061c4:	f7fa fcfa 	bl	8000bbc <__aeabi_uldivmod>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4613      	mov	r3, r2
 80061ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d0:	e058      	b.n	8006284 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061d2:	4b38      	ldr	r3, [pc, #224]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	099b      	lsrs	r3, r3, #6
 80061d8:	2200      	movs	r2, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	4611      	mov	r1, r2
 80061de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061e2:	623b      	str	r3, [r7, #32]
 80061e4:	2300      	movs	r3, #0
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
 80061e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80061ec:	4642      	mov	r2, r8
 80061ee:	464b      	mov	r3, r9
 80061f0:	f04f 0000 	mov.w	r0, #0
 80061f4:	f04f 0100 	mov.w	r1, #0
 80061f8:	0159      	lsls	r1, r3, #5
 80061fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061fe:	0150      	lsls	r0, r2, #5
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4641      	mov	r1, r8
 8006206:	ebb2 0a01 	subs.w	sl, r2, r1
 800620a:	4649      	mov	r1, r9
 800620c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800621c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006220:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006224:	ebb2 040a 	subs.w	r4, r2, sl
 8006228:	eb63 050b 	sbc.w	r5, r3, fp
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	00eb      	lsls	r3, r5, #3
 8006236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800623a:	00e2      	lsls	r2, r4, #3
 800623c:	4614      	mov	r4, r2
 800623e:	461d      	mov	r5, r3
 8006240:	4643      	mov	r3, r8
 8006242:	18e3      	adds	r3, r4, r3
 8006244:	603b      	str	r3, [r7, #0]
 8006246:	464b      	mov	r3, r9
 8006248:	eb45 0303 	adc.w	r3, r5, r3
 800624c:	607b      	str	r3, [r7, #4]
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800625a:	4629      	mov	r1, r5
 800625c:	028b      	lsls	r3, r1, #10
 800625e:	4621      	mov	r1, r4
 8006260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006264:	4621      	mov	r1, r4
 8006266:	028a      	lsls	r2, r1, #10
 8006268:	4610      	mov	r0, r2
 800626a:	4619      	mov	r1, r3
 800626c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800626e:	2200      	movs	r2, #0
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	61fa      	str	r2, [r7, #28]
 8006274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006278:	f7fa fca0 	bl	8000bbc <__aeabi_uldivmod>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4613      	mov	r3, r2
 8006282:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006284:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	0c1b      	lsrs	r3, r3, #16
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	3301      	adds	r3, #1
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006294:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006298:	fbb2 f3f3 	udiv	r3, r2, r3
 800629c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800629e:	e002      	b.n	80062a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80062a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3750      	adds	r7, #80	; 0x50
 80062ac:	46bd      	mov	sp, r7
 80062ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062b2:	bf00      	nop
 80062b4:	40023800 	.word	0x40023800
 80062b8:	00f42400 	.word	0x00f42400
 80062bc:	007a1200 	.word	0x007a1200

080062c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062c4:	4b03      	ldr	r3, [pc, #12]	; (80062d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80062c6:	681b      	ldr	r3, [r3, #0]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	2000000c 	.word	0x2000000c

080062d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062dc:	f7ff fff0 	bl	80062c0 <HAL_RCC_GetHCLKFreq>
 80062e0:	4602      	mov	r2, r0
 80062e2:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	0a9b      	lsrs	r3, r3, #10
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	4903      	ldr	r1, [pc, #12]	; (80062fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ee:	5ccb      	ldrb	r3, [r1, r3]
 80062f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	40023800 	.word	0x40023800
 80062fc:	0800a6e8 	.word	0x0800a6e8

08006300 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	220f      	movs	r2, #15
 800630e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006310:	4b12      	ldr	r3, [pc, #72]	; (800635c <HAL_RCC_GetClockConfig+0x5c>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f003 0203 	and.w	r2, r3, #3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800631c:	4b0f      	ldr	r3, [pc, #60]	; (800635c <HAL_RCC_GetClockConfig+0x5c>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006328:	4b0c      	ldr	r3, [pc, #48]	; (800635c <HAL_RCC_GetClockConfig+0x5c>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006334:	4b09      	ldr	r3, [pc, #36]	; (800635c <HAL_RCC_GetClockConfig+0x5c>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	08db      	lsrs	r3, r3, #3
 800633a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006342:	4b07      	ldr	r3, [pc, #28]	; (8006360 <HAL_RCC_GetClockConfig+0x60>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0207 	and.w	r2, r3, #7
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	601a      	str	r2, [r3, #0]
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	40023800 	.word	0x40023800
 8006360:	40023c00 	.word	0x40023c00

08006364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e041      	b.n	80063fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fc fc70 	bl	8002c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3304      	adds	r3, #4
 80063a0:	4619      	mov	r1, r3
 80063a2:	4610      	mov	r0, r2
 80063a4:	f000 fbca 	bl	8006b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b01      	cmp	r3, #1
 8006416:	d001      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e04e      	b.n	80064ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a23      	ldr	r2, [pc, #140]	; (80064c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d022      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006446:	d01d      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1f      	ldr	r2, [pc, #124]	; (80064cc <HAL_TIM_Base_Start_IT+0xc8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d018      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1e      	ldr	r2, [pc, #120]	; (80064d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d013      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1c      	ldr	r2, [pc, #112]	; (80064d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00e      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1b      	ldr	r2, [pc, #108]	; (80064d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d009      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a19      	ldr	r2, [pc, #100]	; (80064dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d004      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a18      	ldr	r2, [pc, #96]	; (80064e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d111      	bne.n	80064a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b06      	cmp	r3, #6
 8006494:	d010      	beq.n	80064b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0201 	orr.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a6:	e007      	b.n	80064b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	40010000 	.word	0x40010000
 80064cc:	40000400 	.word	0x40000400
 80064d0:	40000800 	.word	0x40000800
 80064d4:	40000c00 	.word	0x40000c00
 80064d8:	40010400 	.word	0x40010400
 80064dc:	40014000 	.word	0x40014000
 80064e0:	40001800 	.word	0x40001800

080064e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e097      	b.n	8006628 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d106      	bne.n	8006512 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7fc fb67 	bl	8002be0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2202      	movs	r2, #2
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6812      	ldr	r2, [r2, #0]
 8006524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006528:	f023 0307 	bic.w	r3, r3, #7
 800652c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3304      	adds	r3, #4
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f000 faff 	bl	8006b3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006566:	f023 0303 	bic.w	r3, r3, #3
 800656a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	4313      	orrs	r3, r2
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4313      	orrs	r3, r2
 800657c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006584:	f023 030c 	bic.w	r3, r3, #12
 8006588:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	4313      	orrs	r3, r2
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	011a      	lsls	r2, r3, #4
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	031b      	lsls	r3, r3, #12
 80065b4:	4313      	orrs	r3, r2
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80065c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80065ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	4313      	orrs	r3, r2
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006640:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006648:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006650:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006658:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d110      	bne.n	8006682 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d102      	bne.n	800666c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006666:	7b7b      	ldrb	r3, [r7, #13]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d001      	beq.n	8006670 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e069      	b.n	8006744 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006680:	e031      	b.n	80066e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b04      	cmp	r3, #4
 8006686:	d110      	bne.n	80066aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d102      	bne.n	8006694 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800668e:	7b3b      	ldrb	r3, [r7, #12]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d001      	beq.n	8006698 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e055      	b.n	8006744 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066a8:	e01d      	b.n	80066e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d108      	bne.n	80066c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d105      	bne.n	80066c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066b6:	7b7b      	ldrb	r3, [r7, #13]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d102      	bne.n	80066c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066bc:	7b3b      	ldrb	r3, [r7, #12]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d001      	beq.n	80066c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e03e      	b.n	8006744 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2202      	movs	r2, #2
 80066ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2202      	movs	r2, #2
 80066da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2202      	movs	r2, #2
 80066e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <HAL_TIM_Encoder_Start+0xc4>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d008      	beq.n	8006704 <HAL_TIM_Encoder_Start+0xd4>
 80066f2:	e00f      	b.n	8006714 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2201      	movs	r2, #1
 80066fa:	2100      	movs	r1, #0
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 fb57 	bl	8006db0 <TIM_CCxChannelCmd>
      break;
 8006702:	e016      	b.n	8006732 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2201      	movs	r2, #1
 800670a:	2104      	movs	r1, #4
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fb4f 	bl	8006db0 <TIM_CCxChannelCmd>
      break;
 8006712:	e00e      	b.n	8006732 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2201      	movs	r2, #1
 800671a:	2100      	movs	r1, #0
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fb47 	bl	8006db0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2201      	movs	r2, #1
 8006728:	2104      	movs	r1, #4
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fb40 	bl	8006db0 <TIM_CCxChannelCmd>
      break;
 8006730:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0201 	orr.w	r2, r2, #1
 8006740:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b02      	cmp	r3, #2
 8006760:	d122      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b02      	cmp	r3, #2
 800676e:	d11b      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f06f 0202 	mvn.w	r2, #2
 8006778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f9b5 	bl	8006afe <HAL_TIM_IC_CaptureCallback>
 8006794:	e005      	b.n	80067a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f9a7 	bl	8006aea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f9b8 	bl	8006b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d122      	bne.n	80067fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d11b      	bne.n	80067fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0204 	mvn.w	r2, #4
 80067cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2202      	movs	r2, #2
 80067d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f98b 	bl	8006afe <HAL_TIM_IC_CaptureCallback>
 80067e8:	e005      	b.n	80067f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f97d 	bl	8006aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f98e 	bl	8006b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b08      	cmp	r3, #8
 8006808:	d122      	bne.n	8006850 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b08      	cmp	r3, #8
 8006816:	d11b      	bne.n	8006850 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f06f 0208 	mvn.w	r2, #8
 8006820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2204      	movs	r2, #4
 8006826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	f003 0303 	and.w	r3, r3, #3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f961 	bl	8006afe <HAL_TIM_IC_CaptureCallback>
 800683c:	e005      	b.n	800684a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f953 	bl	8006aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f964 	bl	8006b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f003 0310 	and.w	r3, r3, #16
 800685a:	2b10      	cmp	r3, #16
 800685c:	d122      	bne.n	80068a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	2b10      	cmp	r3, #16
 800686a:	d11b      	bne.n	80068a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f06f 0210 	mvn.w	r2, #16
 8006874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2208      	movs	r2, #8
 800687a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f937 	bl	8006afe <HAL_TIM_IC_CaptureCallback>
 8006890:	e005      	b.n	800689e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f929 	bl	8006aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f93a 	bl	8006b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d10e      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d107      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f06f 0201 	mvn.w	r2, #1
 80068c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fb fda4 	bl	8002418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068da:	2b80      	cmp	r3, #128	; 0x80
 80068dc:	d10e      	bne.n	80068fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e8:	2b80      	cmp	r3, #128	; 0x80
 80068ea:	d107      	bne.n	80068fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fb06 	bl	8006f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006906:	2b40      	cmp	r3, #64	; 0x40
 8006908:	d10e      	bne.n	8006928 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	2b40      	cmp	r3, #64	; 0x40
 8006916:	d107      	bne.n	8006928 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f8ff 	bl	8006b26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b20      	cmp	r3, #32
 8006934:	d10e      	bne.n	8006954 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0320 	and.w	r3, r3, #32
 8006940:	2b20      	cmp	r3, #32
 8006942:	d107      	bne.n	8006954 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0220 	mvn.w	r2, #32
 800694c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fad0 	bl	8006ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <HAL_TIM_ConfigClockSource+0x1c>
 8006974:	2302      	movs	r3, #2
 8006976:	e0b4      	b.n	8006ae2 <HAL_TIM_ConfigClockSource+0x186>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800699e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b0:	d03e      	beq.n	8006a30 <HAL_TIM_ConfigClockSource+0xd4>
 80069b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b6:	f200 8087 	bhi.w	8006ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80069ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069be:	f000 8086 	beq.w	8006ace <HAL_TIM_ConfigClockSource+0x172>
 80069c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c6:	d87f      	bhi.n	8006ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80069c8:	2b70      	cmp	r3, #112	; 0x70
 80069ca:	d01a      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0xa6>
 80069cc:	2b70      	cmp	r3, #112	; 0x70
 80069ce:	d87b      	bhi.n	8006ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80069d0:	2b60      	cmp	r3, #96	; 0x60
 80069d2:	d050      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x11a>
 80069d4:	2b60      	cmp	r3, #96	; 0x60
 80069d6:	d877      	bhi.n	8006ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80069d8:	2b50      	cmp	r3, #80	; 0x50
 80069da:	d03c      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0xfa>
 80069dc:	2b50      	cmp	r3, #80	; 0x50
 80069de:	d873      	bhi.n	8006ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80069e0:	2b40      	cmp	r3, #64	; 0x40
 80069e2:	d058      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0x13a>
 80069e4:	2b40      	cmp	r3, #64	; 0x40
 80069e6:	d86f      	bhi.n	8006ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80069e8:	2b30      	cmp	r3, #48	; 0x30
 80069ea:	d064      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80069ec:	2b30      	cmp	r3, #48	; 0x30
 80069ee:	d86b      	bhi.n	8006ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80069f0:	2b20      	cmp	r3, #32
 80069f2:	d060      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80069f4:	2b20      	cmp	r3, #32
 80069f6:	d867      	bhi.n	8006ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d05c      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80069fc:	2b10      	cmp	r3, #16
 80069fe:	d05a      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a00:	e062      	b.n	8006ac8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6899      	ldr	r1, [r3, #8]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f000 f9ad 	bl	8006d70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	609a      	str	r2, [r3, #8]
      break;
 8006a2e:	e04f      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	6899      	ldr	r1, [r3, #8]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f000 f996 	bl	8006d70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a52:	609a      	str	r2, [r3, #8]
      break;
 8006a54:	e03c      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6859      	ldr	r1, [r3, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f000 f90a 	bl	8006c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2150      	movs	r1, #80	; 0x50
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f963 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 8006a74:	e02c      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	6859      	ldr	r1, [r3, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f000 f929 	bl	8006cda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2160      	movs	r1, #96	; 0x60
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 f953 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 8006a94:	e01c      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	6859      	ldr	r1, [r3, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f000 f8ea 	bl	8006c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2140      	movs	r1, #64	; 0x40
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f943 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 8006ab4:	e00c      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	f000 f93a 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 8006ac6:	e003      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	73fb      	strb	r3, [r7, #15]
      break;
 8006acc:	e000      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
	...

08006b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a40      	ldr	r2, [pc, #256]	; (8006c50 <TIM_Base_SetConfig+0x114>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d013      	beq.n	8006b7c <TIM_Base_SetConfig+0x40>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5a:	d00f      	beq.n	8006b7c <TIM_Base_SetConfig+0x40>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a3d      	ldr	r2, [pc, #244]	; (8006c54 <TIM_Base_SetConfig+0x118>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00b      	beq.n	8006b7c <TIM_Base_SetConfig+0x40>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a3c      	ldr	r2, [pc, #240]	; (8006c58 <TIM_Base_SetConfig+0x11c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d007      	beq.n	8006b7c <TIM_Base_SetConfig+0x40>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a3b      	ldr	r2, [pc, #236]	; (8006c5c <TIM_Base_SetConfig+0x120>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d003      	beq.n	8006b7c <TIM_Base_SetConfig+0x40>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a3a      	ldr	r2, [pc, #232]	; (8006c60 <TIM_Base_SetConfig+0x124>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d108      	bne.n	8006b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a2f      	ldr	r2, [pc, #188]	; (8006c50 <TIM_Base_SetConfig+0x114>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d02b      	beq.n	8006bee <TIM_Base_SetConfig+0xb2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9c:	d027      	beq.n	8006bee <TIM_Base_SetConfig+0xb2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a2c      	ldr	r2, [pc, #176]	; (8006c54 <TIM_Base_SetConfig+0x118>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d023      	beq.n	8006bee <TIM_Base_SetConfig+0xb2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a2b      	ldr	r2, [pc, #172]	; (8006c58 <TIM_Base_SetConfig+0x11c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d01f      	beq.n	8006bee <TIM_Base_SetConfig+0xb2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a2a      	ldr	r2, [pc, #168]	; (8006c5c <TIM_Base_SetConfig+0x120>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01b      	beq.n	8006bee <TIM_Base_SetConfig+0xb2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a29      	ldr	r2, [pc, #164]	; (8006c60 <TIM_Base_SetConfig+0x124>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d017      	beq.n	8006bee <TIM_Base_SetConfig+0xb2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a28      	ldr	r2, [pc, #160]	; (8006c64 <TIM_Base_SetConfig+0x128>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <TIM_Base_SetConfig+0xb2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a27      	ldr	r2, [pc, #156]	; (8006c68 <TIM_Base_SetConfig+0x12c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00f      	beq.n	8006bee <TIM_Base_SetConfig+0xb2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a26      	ldr	r2, [pc, #152]	; (8006c6c <TIM_Base_SetConfig+0x130>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00b      	beq.n	8006bee <TIM_Base_SetConfig+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a25      	ldr	r2, [pc, #148]	; (8006c70 <TIM_Base_SetConfig+0x134>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d007      	beq.n	8006bee <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a24      	ldr	r2, [pc, #144]	; (8006c74 <TIM_Base_SetConfig+0x138>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d003      	beq.n	8006bee <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a23      	ldr	r2, [pc, #140]	; (8006c78 <TIM_Base_SetConfig+0x13c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d108      	bne.n	8006c00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a0a      	ldr	r2, [pc, #40]	; (8006c50 <TIM_Base_SetConfig+0x114>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d003      	beq.n	8006c34 <TIM_Base_SetConfig+0xf8>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a0c      	ldr	r2, [pc, #48]	; (8006c60 <TIM_Base_SetConfig+0x124>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d103      	bne.n	8006c3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	615a      	str	r2, [r3, #20]
}
 8006c42:	bf00      	nop
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	40010000 	.word	0x40010000
 8006c54:	40000400 	.word	0x40000400
 8006c58:	40000800 	.word	0x40000800
 8006c5c:	40000c00 	.word	0x40000c00
 8006c60:	40010400 	.word	0x40010400
 8006c64:	40014000 	.word	0x40014000
 8006c68:	40014400 	.word	0x40014400
 8006c6c:	40014800 	.word	0x40014800
 8006c70:	40001800 	.word	0x40001800
 8006c74:	40001c00 	.word	0x40001c00
 8006c78:	40002000 	.word	0x40002000

08006c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	f023 0201 	bic.w	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f023 030a 	bic.w	r3, r3, #10
 8006cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	621a      	str	r2, [r3, #32]
}
 8006cce:	bf00      	nop
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b087      	sub	sp, #28
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f023 0210 	bic.w	r2, r3, #16
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	031b      	lsls	r3, r3, #12
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f043 0307 	orr.w	r3, r3, #7
 8006d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	609a      	str	r2, [r3, #8]
}
 8006d64:	bf00      	nop
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
 8006d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	021a      	lsls	r2, r3, #8
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	431a      	orrs	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	609a      	str	r2, [r3, #8]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f003 031f 	and.w	r3, r3, #31
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a1a      	ldr	r2, [r3, #32]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	401a      	ands	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a1a      	ldr	r2, [r3, #32]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f003 031f 	and.w	r3, r3, #31
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	fa01 f303 	lsl.w	r3, r1, r3
 8006de8:	431a      	orrs	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	621a      	str	r2, [r3, #32]
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
	...

08006dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e05a      	b.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a21      	ldr	r2, [pc, #132]	; (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d022      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e60:	d01d      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a1d      	ldr	r2, [pc, #116]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d018      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a1b      	ldr	r2, [pc, #108]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d013      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a1a      	ldr	r2, [pc, #104]	; (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00e      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a18      	ldr	r2, [pc, #96]	; (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d009      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a17      	ldr	r2, [pc, #92]	; (8006eec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d004      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a15      	ldr	r2, [pc, #84]	; (8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d10c      	bne.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40010000 	.word	0x40010000
 8006edc:	40000400 	.word	0x40000400
 8006ee0:	40000800 	.word	0x40000800
 8006ee4:	40000c00 	.word	0x40000c00
 8006ee8:	40010400 	.word	0x40010400
 8006eec:	40014000 	.word	0x40014000
 8006ef0:	40001800 	.word	0x40001800

08006ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f2e:	2b84      	cmp	r3, #132	; 0x84
 8006f30:	d005      	beq.n	8006f3e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006f32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	3303      	adds	r3, #3
 8006f3c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006f50:	f000 fade 	bl	8007510 <vTaskStartScheduler>
  
  return osOK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f5c:	b089      	sub	sp, #36	; 0x24
 8006f5e:	af04      	add	r7, sp, #16
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d020      	beq.n	8006fae <osThreadCreate+0x54>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01c      	beq.n	8006fae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685c      	ldr	r4, [r3, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681d      	ldr	r5, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691e      	ldr	r6, [r3, #16]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff ffc8 	bl	8006f1c <makeFreeRtosPriority>
 8006f8c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f96:	9202      	str	r2, [sp, #8]
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	9100      	str	r1, [sp, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	4632      	mov	r2, r6
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 f8ed 	bl	8007182 <xTaskCreateStatic>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	e01c      	b.n	8006fe8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685c      	ldr	r4, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fba:	b29e      	uxth	r6, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff ffaa 	bl	8006f1c <makeFreeRtosPriority>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	f107 030c 	add.w	r3, r7, #12
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	9200      	str	r2, [sp, #0]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	4632      	mov	r2, r6
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 f92f 	bl	800723c <xTaskCreate>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d001      	beq.n	8006fe8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	e000      	b.n	8006fea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ff2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <osDelay+0x16>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	e000      	b.n	800700a <osDelay+0x18>
 8007008:	2301      	movs	r3, #1
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fa4c 	bl	80074a8 <vTaskDelay>
  
  return osOK;
 8007010:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f103 0208 	add.w	r2, r3, #8
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007032:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f103 0208 	add.w	r2, r3, #8
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f103 0208 	add.w	r2, r3, #8
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	689a      	ldr	r2, [r3, #8]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	601a      	str	r2, [r3, #0]
}
 80070b0:	bf00      	nop
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070d2:	d103      	bne.n	80070dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	e00c      	b.n	80070f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3308      	adds	r3, #8
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e002      	b.n	80070ea <vListInsert+0x2e>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d2f6      	bcs.n	80070e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	601a      	str	r2, [r3, #0]
}
 8007122:	bf00      	nop
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800712e:	b480      	push	{r7}
 8007130:	b085      	sub	sp, #20
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6892      	ldr	r2, [r2, #8]
 8007144:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6852      	ldr	r2, [r2, #4]
 800714e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	429a      	cmp	r2, r3
 8007158:	d103      	bne.n	8007162 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689a      	ldr	r2, [r3, #8]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	1e5a      	subs	r2, r3, #1
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007182:	b580      	push	{r7, lr}
 8007184:	b08e      	sub	sp, #56	; 0x38
 8007186:	af04      	add	r7, sp, #16
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	607a      	str	r2, [r7, #4]
 800718e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071a8:	bf00      	nop
 80071aa:	e7fe      	b.n	80071aa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <xTaskCreateStatic+0x46>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	61fb      	str	r3, [r7, #28]
}
 80071c4:	bf00      	nop
 80071c6:	e7fe      	b.n	80071c6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071c8:	2354      	movs	r3, #84	; 0x54
 80071ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	2b54      	cmp	r3, #84	; 0x54
 80071d0:	d00a      	beq.n	80071e8 <xTaskCreateStatic+0x66>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	61bb      	str	r3, [r7, #24]
}
 80071e4:	bf00      	nop
 80071e6:	e7fe      	b.n	80071e6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80071e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01e      	beq.n	800722e <xTaskCreateStatic+0xac>
 80071f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d01b      	beq.n	800722e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	2202      	movs	r2, #2
 8007204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007208:	2300      	movs	r3, #0
 800720a:	9303      	str	r3, [sp, #12]
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	9302      	str	r3, [sp, #8]
 8007210:	f107 0314 	add.w	r3, r7, #20
 8007214:	9301      	str	r3, [sp, #4]
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f850 	bl	80072c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007228:	f000 f8d4 	bl	80073d4 <prvAddNewTaskToReadyList>
 800722c:	e001      	b.n	8007232 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007232:	697b      	ldr	r3, [r7, #20]
	}
 8007234:	4618      	mov	r0, r3
 8007236:	3728      	adds	r7, #40	; 0x28
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08c      	sub	sp, #48	; 0x30
 8007240:	af04      	add	r7, sp, #16
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	4613      	mov	r3, r2
 800724a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800724c:	88fb      	ldrh	r3, [r7, #6]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4618      	mov	r0, r3
 8007252:	f000 fec9 	bl	8007fe8 <pvPortMalloc>
 8007256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00e      	beq.n	800727c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800725e:	2054      	movs	r0, #84	; 0x54
 8007260:	f000 fec2 	bl	8007fe8 <pvPortMalloc>
 8007264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	631a      	str	r2, [r3, #48]	; 0x30
 8007272:	e005      	b.n	8007280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007274:	6978      	ldr	r0, [r7, #20]
 8007276:	f000 ff83 	bl	8008180 <vPortFree>
 800727a:	e001      	b.n	8007280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800727c:	2300      	movs	r3, #0
 800727e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d017      	beq.n	80072b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800728e:	88fa      	ldrh	r2, [r7, #6]
 8007290:	2300      	movs	r3, #0
 8007292:	9303      	str	r3, [sp, #12]
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	9302      	str	r3, [sp, #8]
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	9301      	str	r3, [sp, #4]
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	68b9      	ldr	r1, [r7, #8]
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f80e 	bl	80072c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072aa:	69f8      	ldr	r0, [r7, #28]
 80072ac:	f000 f892 	bl	80073d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072b0:	2301      	movs	r3, #1
 80072b2:	61bb      	str	r3, [r7, #24]
 80072b4:	e002      	b.n	80072bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072bc:	69bb      	ldr	r3, [r7, #24]
	}
 80072be:	4618      	mov	r0, r3
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b088      	sub	sp, #32
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
 80072d2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072de:	3b01      	subs	r3, #1
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	f023 0307 	bic.w	r3, r3, #7
 80072ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	f003 0307 	and.w	r3, r3, #7
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00a      	beq.n	800730e <prvInitialiseNewTask+0x48>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	617b      	str	r3, [r7, #20]
}
 800730a:	bf00      	nop
 800730c:	e7fe      	b.n	800730c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d01f      	beq.n	8007354 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007314:	2300      	movs	r3, #0
 8007316:	61fb      	str	r3, [r7, #28]
 8007318:	e012      	b.n	8007340 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	4413      	add	r3, r2
 8007320:	7819      	ldrb	r1, [r3, #0]
 8007322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	4413      	add	r3, r2
 8007328:	3334      	adds	r3, #52	; 0x34
 800732a:	460a      	mov	r2, r1
 800732c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	4413      	add	r3, r2
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d006      	beq.n	8007348 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	3301      	adds	r3, #1
 800733e:	61fb      	str	r3, [r7, #28]
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	2b0f      	cmp	r3, #15
 8007344:	d9e9      	bls.n	800731a <prvInitialiseNewTask+0x54>
 8007346:	e000      	b.n	800734a <prvInitialiseNewTask+0x84>
			{
				break;
 8007348:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007352:	e003      	b.n	800735c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	2b06      	cmp	r3, #6
 8007360:	d901      	bls.n	8007366 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007362:	2306      	movs	r3, #6
 8007364:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800736a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007370:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	2200      	movs	r2, #0
 8007376:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	3304      	adds	r3, #4
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fe6c 	bl	800705a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	3318      	adds	r3, #24
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff fe67 	bl	800705a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007390:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	f1c3 0207 	rsb	r2, r3, #7
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	2200      	movs	r2, #0
 80073a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	68f9      	ldr	r1, [r7, #12]
 80073b4:	69b8      	ldr	r0, [r7, #24]
 80073b6:	f000 fc05 	bl	8007bc4 <pxPortInitialiseStack>
 80073ba:	4602      	mov	r2, r0
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073cc:	bf00      	nop
 80073ce:	3720      	adds	r7, #32
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073dc:	f000 fd22 	bl	8007e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073e0:	4b2a      	ldr	r3, [pc, #168]	; (800748c <prvAddNewTaskToReadyList+0xb8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3301      	adds	r3, #1
 80073e6:	4a29      	ldr	r2, [pc, #164]	; (800748c <prvAddNewTaskToReadyList+0xb8>)
 80073e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073ea:	4b29      	ldr	r3, [pc, #164]	; (8007490 <prvAddNewTaskToReadyList+0xbc>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d109      	bne.n	8007406 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073f2:	4a27      	ldr	r2, [pc, #156]	; (8007490 <prvAddNewTaskToReadyList+0xbc>)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073f8:	4b24      	ldr	r3, [pc, #144]	; (800748c <prvAddNewTaskToReadyList+0xb8>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d110      	bne.n	8007422 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007400:	f000 fabc 	bl	800797c <prvInitialiseTaskLists>
 8007404:	e00d      	b.n	8007422 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007406:	4b23      	ldr	r3, [pc, #140]	; (8007494 <prvAddNewTaskToReadyList+0xc0>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800740e:	4b20      	ldr	r3, [pc, #128]	; (8007490 <prvAddNewTaskToReadyList+0xbc>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	429a      	cmp	r2, r3
 800741a:	d802      	bhi.n	8007422 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800741c:	4a1c      	ldr	r2, [pc, #112]	; (8007490 <prvAddNewTaskToReadyList+0xbc>)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007422:	4b1d      	ldr	r3, [pc, #116]	; (8007498 <prvAddNewTaskToReadyList+0xc4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3301      	adds	r3, #1
 8007428:	4a1b      	ldr	r2, [pc, #108]	; (8007498 <prvAddNewTaskToReadyList+0xc4>)
 800742a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	2201      	movs	r2, #1
 8007432:	409a      	lsls	r2, r3
 8007434:	4b19      	ldr	r3, [pc, #100]	; (800749c <prvAddNewTaskToReadyList+0xc8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4313      	orrs	r3, r2
 800743a:	4a18      	ldr	r2, [pc, #96]	; (800749c <prvAddNewTaskToReadyList+0xc8>)
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4a15      	ldr	r2, [pc, #84]	; (80074a0 <prvAddNewTaskToReadyList+0xcc>)
 800744c:	441a      	add	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3304      	adds	r3, #4
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f7ff fe0d 	bl	8007074 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800745a:	f000 fd13 	bl	8007e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800745e:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <prvAddNewTaskToReadyList+0xc0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00e      	beq.n	8007484 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007466:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <prvAddNewTaskToReadyList+0xbc>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	429a      	cmp	r2, r3
 8007472:	d207      	bcs.n	8007484 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007474:	4b0b      	ldr	r3, [pc, #44]	; (80074a4 <prvAddNewTaskToReadyList+0xd0>)
 8007476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000788 	.word	0x20000788
 8007490:	20000688 	.word	0x20000688
 8007494:	20000794 	.word	0x20000794
 8007498:	200007a4 	.word	0x200007a4
 800749c:	20000790 	.word	0x20000790
 80074a0:	2000068c 	.word	0x2000068c
 80074a4:	e000ed04 	.word	0xe000ed04

080074a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d017      	beq.n	80074ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074ba:	4b13      	ldr	r3, [pc, #76]	; (8007508 <vTaskDelay+0x60>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <vTaskDelay+0x30>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	60bb      	str	r3, [r7, #8]
}
 80074d4:	bf00      	nop
 80074d6:	e7fe      	b.n	80074d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80074d8:	f000 f87a 	bl	80075d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074dc:	2100      	movs	r1, #0
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fb0a 	bl	8007af8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074e4:	f000 f882 	bl	80075ec <xTaskResumeAll>
 80074e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d107      	bne.n	8007500 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80074f0:	4b06      	ldr	r3, [pc, #24]	; (800750c <vTaskDelay+0x64>)
 80074f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	200007b0 	.word	0x200007b0
 800750c:	e000ed04 	.word	0xe000ed04

08007510 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08a      	sub	sp, #40	; 0x28
 8007514:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800751a:	2300      	movs	r3, #0
 800751c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800751e:	463a      	mov	r2, r7
 8007520:	1d39      	adds	r1, r7, #4
 8007522:	f107 0308 	add.w	r3, r7, #8
 8007526:	4618      	mov	r0, r3
 8007528:	f7fa f980 	bl	800182c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	9202      	str	r2, [sp, #8]
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	2300      	movs	r3, #0
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	2300      	movs	r3, #0
 800753c:	460a      	mov	r2, r1
 800753e:	491e      	ldr	r1, [pc, #120]	; (80075b8 <vTaskStartScheduler+0xa8>)
 8007540:	481e      	ldr	r0, [pc, #120]	; (80075bc <vTaskStartScheduler+0xac>)
 8007542:	f7ff fe1e 	bl	8007182 <xTaskCreateStatic>
 8007546:	4603      	mov	r3, r0
 8007548:	4a1d      	ldr	r2, [pc, #116]	; (80075c0 <vTaskStartScheduler+0xb0>)
 800754a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800754c:	4b1c      	ldr	r3, [pc, #112]	; (80075c0 <vTaskStartScheduler+0xb0>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007554:	2301      	movs	r3, #1
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	e001      	b.n	800755e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800755a:	2300      	movs	r3, #0
 800755c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d116      	bne.n	8007592 <vTaskStartScheduler+0x82>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	613b      	str	r3, [r7, #16]
}
 8007576:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007578:	4b12      	ldr	r3, [pc, #72]	; (80075c4 <vTaskStartScheduler+0xb4>)
 800757a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800757e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007580:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <vTaskStartScheduler+0xb8>)
 8007582:	2201      	movs	r2, #1
 8007584:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007586:	4b11      	ldr	r3, [pc, #68]	; (80075cc <vTaskStartScheduler+0xbc>)
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800758c:	f000 fba8 	bl	8007ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007590:	e00e      	b.n	80075b0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007598:	d10a      	bne.n	80075b0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	60fb      	str	r3, [r7, #12]
}
 80075ac:	bf00      	nop
 80075ae:	e7fe      	b.n	80075ae <vTaskStartScheduler+0x9e>
}
 80075b0:	bf00      	nop
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	0800a6d0 	.word	0x0800a6d0
 80075bc:	0800794d 	.word	0x0800794d
 80075c0:	200007ac 	.word	0x200007ac
 80075c4:	200007a8 	.word	0x200007a8
 80075c8:	20000794 	.word	0x20000794
 80075cc:	2000078c 	.word	0x2000078c

080075d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80075d4:	4b04      	ldr	r3, [pc, #16]	; (80075e8 <vTaskSuspendAll+0x18>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3301      	adds	r3, #1
 80075da:	4a03      	ldr	r2, [pc, #12]	; (80075e8 <vTaskSuspendAll+0x18>)
 80075dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80075de:	bf00      	nop
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	200007b0 	.word	0x200007b0

080075ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075fa:	4b41      	ldr	r3, [pc, #260]	; (8007700 <xTaskResumeAll+0x114>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <xTaskResumeAll+0x2c>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	603b      	str	r3, [r7, #0]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007618:	f000 fc04 	bl	8007e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800761c:	4b38      	ldr	r3, [pc, #224]	; (8007700 <xTaskResumeAll+0x114>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3b01      	subs	r3, #1
 8007622:	4a37      	ldr	r2, [pc, #220]	; (8007700 <xTaskResumeAll+0x114>)
 8007624:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007626:	4b36      	ldr	r3, [pc, #216]	; (8007700 <xTaskResumeAll+0x114>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d161      	bne.n	80076f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800762e:	4b35      	ldr	r3, [pc, #212]	; (8007704 <xTaskResumeAll+0x118>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d05d      	beq.n	80076f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007636:	e02e      	b.n	8007696 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007638:	4b33      	ldr	r3, [pc, #204]	; (8007708 <xTaskResumeAll+0x11c>)
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3318      	adds	r3, #24
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff fd72 	bl	800712e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3304      	adds	r3, #4
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff fd6d 	bl	800712e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	2201      	movs	r2, #1
 800765a:	409a      	lsls	r2, r3
 800765c:	4b2b      	ldr	r3, [pc, #172]	; (800770c <xTaskResumeAll+0x120>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4313      	orrs	r3, r2
 8007662:	4a2a      	ldr	r2, [pc, #168]	; (800770c <xTaskResumeAll+0x120>)
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766a:	4613      	mov	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4a27      	ldr	r2, [pc, #156]	; (8007710 <xTaskResumeAll+0x124>)
 8007674:	441a      	add	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3304      	adds	r3, #4
 800767a:	4619      	mov	r1, r3
 800767c:	4610      	mov	r0, r2
 800767e:	f7ff fcf9 	bl	8007074 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007686:	4b23      	ldr	r3, [pc, #140]	; (8007714 <xTaskResumeAll+0x128>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	429a      	cmp	r2, r3
 800768e:	d302      	bcc.n	8007696 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007690:	4b21      	ldr	r3, [pc, #132]	; (8007718 <xTaskResumeAll+0x12c>)
 8007692:	2201      	movs	r2, #1
 8007694:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007696:	4b1c      	ldr	r3, [pc, #112]	; (8007708 <xTaskResumeAll+0x11c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1cc      	bne.n	8007638 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076a4:	f000 fa08 	bl	8007ab8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80076a8:	4b1c      	ldr	r3, [pc, #112]	; (800771c <xTaskResumeAll+0x130>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d010      	beq.n	80076d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076b4:	f000 f836 	bl	8007724 <xTaskIncrementTick>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80076be:	4b16      	ldr	r3, [pc, #88]	; (8007718 <xTaskResumeAll+0x12c>)
 80076c0:	2201      	movs	r2, #1
 80076c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1f1      	bne.n	80076b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80076d0:	4b12      	ldr	r3, [pc, #72]	; (800771c <xTaskResumeAll+0x130>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076d6:	4b10      	ldr	r3, [pc, #64]	; (8007718 <xTaskResumeAll+0x12c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d009      	beq.n	80076f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076de:	2301      	movs	r3, #1
 80076e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076e2:	4b0f      	ldr	r3, [pc, #60]	; (8007720 <xTaskResumeAll+0x134>)
 80076e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076f2:	f000 fbc7 	bl	8007e84 <vPortExitCritical>

	return xAlreadyYielded;
 80076f6:	68bb      	ldr	r3, [r7, #8]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	200007b0 	.word	0x200007b0
 8007704:	20000788 	.word	0x20000788
 8007708:	20000748 	.word	0x20000748
 800770c:	20000790 	.word	0x20000790
 8007710:	2000068c 	.word	0x2000068c
 8007714:	20000688 	.word	0x20000688
 8007718:	2000079c 	.word	0x2000079c
 800771c:	20000798 	.word	0x20000798
 8007720:	e000ed04 	.word	0xe000ed04

08007724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800772e:	4b4e      	ldr	r3, [pc, #312]	; (8007868 <xTaskIncrementTick+0x144>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	f040 808e 	bne.w	8007854 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007738:	4b4c      	ldr	r3, [pc, #304]	; (800786c <xTaskIncrementTick+0x148>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3301      	adds	r3, #1
 800773e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007740:	4a4a      	ldr	r2, [pc, #296]	; (800786c <xTaskIncrementTick+0x148>)
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d120      	bne.n	800778e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800774c:	4b48      	ldr	r3, [pc, #288]	; (8007870 <xTaskIncrementTick+0x14c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00a      	beq.n	800776c <xTaskIncrementTick+0x48>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	603b      	str	r3, [r7, #0]
}
 8007768:	bf00      	nop
 800776a:	e7fe      	b.n	800776a <xTaskIncrementTick+0x46>
 800776c:	4b40      	ldr	r3, [pc, #256]	; (8007870 <xTaskIncrementTick+0x14c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	4b40      	ldr	r3, [pc, #256]	; (8007874 <xTaskIncrementTick+0x150>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a3e      	ldr	r2, [pc, #248]	; (8007870 <xTaskIncrementTick+0x14c>)
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	4a3e      	ldr	r2, [pc, #248]	; (8007874 <xTaskIncrementTick+0x150>)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	4b3d      	ldr	r3, [pc, #244]	; (8007878 <xTaskIncrementTick+0x154>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3301      	adds	r3, #1
 8007786:	4a3c      	ldr	r2, [pc, #240]	; (8007878 <xTaskIncrementTick+0x154>)
 8007788:	6013      	str	r3, [r2, #0]
 800778a:	f000 f995 	bl	8007ab8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800778e:	4b3b      	ldr	r3, [pc, #236]	; (800787c <xTaskIncrementTick+0x158>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	429a      	cmp	r2, r3
 8007796:	d348      	bcc.n	800782a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007798:	4b35      	ldr	r3, [pc, #212]	; (8007870 <xTaskIncrementTick+0x14c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d104      	bne.n	80077ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a2:	4b36      	ldr	r3, [pc, #216]	; (800787c <xTaskIncrementTick+0x158>)
 80077a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077a8:	601a      	str	r2, [r3, #0]
					break;
 80077aa:	e03e      	b.n	800782a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ac:	4b30      	ldr	r3, [pc, #192]	; (8007870 <xTaskIncrementTick+0x14c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d203      	bcs.n	80077cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077c4:	4a2d      	ldr	r2, [pc, #180]	; (800787c <xTaskIncrementTick+0x158>)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077ca:	e02e      	b.n	800782a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff fcac 	bl	800712e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	3318      	adds	r3, #24
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff fca3 	bl	800712e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	2201      	movs	r2, #1
 80077ee:	409a      	lsls	r2, r3
 80077f0:	4b23      	ldr	r3, [pc, #140]	; (8007880 <xTaskIncrementTick+0x15c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	4a22      	ldr	r2, [pc, #136]	; (8007880 <xTaskIncrementTick+0x15c>)
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4a1f      	ldr	r2, [pc, #124]	; (8007884 <xTaskIncrementTick+0x160>)
 8007808:	441a      	add	r2, r3
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	3304      	adds	r3, #4
 800780e:	4619      	mov	r1, r3
 8007810:	4610      	mov	r0, r2
 8007812:	f7ff fc2f 	bl	8007074 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781a:	4b1b      	ldr	r3, [pc, #108]	; (8007888 <xTaskIncrementTick+0x164>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	429a      	cmp	r2, r3
 8007822:	d3b9      	bcc.n	8007798 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007824:	2301      	movs	r3, #1
 8007826:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007828:	e7b6      	b.n	8007798 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800782a:	4b17      	ldr	r3, [pc, #92]	; (8007888 <xTaskIncrementTick+0x164>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007830:	4914      	ldr	r1, [pc, #80]	; (8007884 <xTaskIncrementTick+0x160>)
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d901      	bls.n	8007846 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007842:	2301      	movs	r3, #1
 8007844:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007846:	4b11      	ldr	r3, [pc, #68]	; (800788c <xTaskIncrementTick+0x168>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d007      	beq.n	800785e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800784e:	2301      	movs	r3, #1
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	e004      	b.n	800785e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007854:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <xTaskIncrementTick+0x16c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3301      	adds	r3, #1
 800785a:	4a0d      	ldr	r2, [pc, #52]	; (8007890 <xTaskIncrementTick+0x16c>)
 800785c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800785e:	697b      	ldr	r3, [r7, #20]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	200007b0 	.word	0x200007b0
 800786c:	2000078c 	.word	0x2000078c
 8007870:	20000740 	.word	0x20000740
 8007874:	20000744 	.word	0x20000744
 8007878:	200007a0 	.word	0x200007a0
 800787c:	200007a8 	.word	0x200007a8
 8007880:	20000790 	.word	0x20000790
 8007884:	2000068c 	.word	0x2000068c
 8007888:	20000688 	.word	0x20000688
 800788c:	2000079c 	.word	0x2000079c
 8007890:	20000798 	.word	0x20000798

08007894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800789a:	4b27      	ldr	r3, [pc, #156]	; (8007938 <vTaskSwitchContext+0xa4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078a2:	4b26      	ldr	r3, [pc, #152]	; (800793c <vTaskSwitchContext+0xa8>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078a8:	e03f      	b.n	800792a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80078aa:	4b24      	ldr	r3, [pc, #144]	; (800793c <vTaskSwitchContext+0xa8>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b0:	4b23      	ldr	r3, [pc, #140]	; (8007940 <vTaskSwitchContext+0xac>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	fab3 f383 	clz	r3, r3
 80078bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80078be:	7afb      	ldrb	r3, [r7, #11]
 80078c0:	f1c3 031f 	rsb	r3, r3, #31
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	491f      	ldr	r1, [pc, #124]	; (8007944 <vTaskSwitchContext+0xb0>)
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	607b      	str	r3, [r7, #4]
}
 80078ec:	bf00      	nop
 80078ee:	e7fe      	b.n	80078ee <vTaskSwitchContext+0x5a>
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	4613      	mov	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4a12      	ldr	r2, [pc, #72]	; (8007944 <vTaskSwitchContext+0xb0>)
 80078fc:	4413      	add	r3, r2
 80078fe:	613b      	str	r3, [r7, #16]
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	605a      	str	r2, [r3, #4]
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	3308      	adds	r3, #8
 8007912:	429a      	cmp	r2, r3
 8007914:	d104      	bne.n	8007920 <vTaskSwitchContext+0x8c>
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	605a      	str	r2, [r3, #4]
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	4a08      	ldr	r2, [pc, #32]	; (8007948 <vTaskSwitchContext+0xb4>)
 8007928:	6013      	str	r3, [r2, #0]
}
 800792a:	bf00      	nop
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	200007b0 	.word	0x200007b0
 800793c:	2000079c 	.word	0x2000079c
 8007940:	20000790 	.word	0x20000790
 8007944:	2000068c 	.word	0x2000068c
 8007948:	20000688 	.word	0x20000688

0800794c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007954:	f000 f852 	bl	80079fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007958:	4b06      	ldr	r3, [pc, #24]	; (8007974 <prvIdleTask+0x28>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d9f9      	bls.n	8007954 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <prvIdleTask+0x2c>)
 8007962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007970:	e7f0      	b.n	8007954 <prvIdleTask+0x8>
 8007972:	bf00      	nop
 8007974:	2000068c 	.word	0x2000068c
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007982:	2300      	movs	r3, #0
 8007984:	607b      	str	r3, [r7, #4]
 8007986:	e00c      	b.n	80079a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	4613      	mov	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4a12      	ldr	r2, [pc, #72]	; (80079dc <prvInitialiseTaskLists+0x60>)
 8007994:	4413      	add	r3, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff fb3f 	bl	800701a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3301      	adds	r3, #1
 80079a0:	607b      	str	r3, [r7, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b06      	cmp	r3, #6
 80079a6:	d9ef      	bls.n	8007988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079a8:	480d      	ldr	r0, [pc, #52]	; (80079e0 <prvInitialiseTaskLists+0x64>)
 80079aa:	f7ff fb36 	bl	800701a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079ae:	480d      	ldr	r0, [pc, #52]	; (80079e4 <prvInitialiseTaskLists+0x68>)
 80079b0:	f7ff fb33 	bl	800701a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079b4:	480c      	ldr	r0, [pc, #48]	; (80079e8 <prvInitialiseTaskLists+0x6c>)
 80079b6:	f7ff fb30 	bl	800701a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079ba:	480c      	ldr	r0, [pc, #48]	; (80079ec <prvInitialiseTaskLists+0x70>)
 80079bc:	f7ff fb2d 	bl	800701a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079c0:	480b      	ldr	r0, [pc, #44]	; (80079f0 <prvInitialiseTaskLists+0x74>)
 80079c2:	f7ff fb2a 	bl	800701a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079c6:	4b0b      	ldr	r3, [pc, #44]	; (80079f4 <prvInitialiseTaskLists+0x78>)
 80079c8:	4a05      	ldr	r2, [pc, #20]	; (80079e0 <prvInitialiseTaskLists+0x64>)
 80079ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079cc:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <prvInitialiseTaskLists+0x7c>)
 80079ce:	4a05      	ldr	r2, [pc, #20]	; (80079e4 <prvInitialiseTaskLists+0x68>)
 80079d0:	601a      	str	r2, [r3, #0]
}
 80079d2:	bf00      	nop
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	2000068c 	.word	0x2000068c
 80079e0:	20000718 	.word	0x20000718
 80079e4:	2000072c 	.word	0x2000072c
 80079e8:	20000748 	.word	0x20000748
 80079ec:	2000075c 	.word	0x2000075c
 80079f0:	20000774 	.word	0x20000774
 80079f4:	20000740 	.word	0x20000740
 80079f8:	20000744 	.word	0x20000744

080079fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a02:	e019      	b.n	8007a38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a04:	f000 fa0e 	bl	8007e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a08:	4b10      	ldr	r3, [pc, #64]	; (8007a4c <prvCheckTasksWaitingTermination+0x50>)
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3304      	adds	r3, #4
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff fb8a 	bl	800712e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a1a:	4b0d      	ldr	r3, [pc, #52]	; (8007a50 <prvCheckTasksWaitingTermination+0x54>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	4a0b      	ldr	r2, [pc, #44]	; (8007a50 <prvCheckTasksWaitingTermination+0x54>)
 8007a22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a24:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <prvCheckTasksWaitingTermination+0x58>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	4a0a      	ldr	r2, [pc, #40]	; (8007a54 <prvCheckTasksWaitingTermination+0x58>)
 8007a2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a2e:	f000 fa29 	bl	8007e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f810 	bl	8007a58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a38:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <prvCheckTasksWaitingTermination+0x58>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e1      	bne.n	8007a04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	2000075c 	.word	0x2000075c
 8007a50:	20000788 	.word	0x20000788
 8007a54:	20000770 	.word	0x20000770

08007a58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d108      	bne.n	8007a7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fb86 	bl	8008180 <vPortFree>
				vPortFree( pxTCB );
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fb83 	bl	8008180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a7a:	e018      	b.n	8007aae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d103      	bne.n	8007a8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fb7a 	bl	8008180 <vPortFree>
	}
 8007a8c:	e00f      	b.n	8007aae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d00a      	beq.n	8007aae <prvDeleteTCB+0x56>
	__asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	60fb      	str	r3, [r7, #12]
}
 8007aaa:	bf00      	nop
 8007aac:	e7fe      	b.n	8007aac <prvDeleteTCB+0x54>
	}
 8007aae:	bf00      	nop
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007abe:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <prvResetNextTaskUnblockTime+0x38>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d104      	bne.n	8007ad2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ac8:	4b0a      	ldr	r3, [pc, #40]	; (8007af4 <prvResetNextTaskUnblockTime+0x3c>)
 8007aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ace:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ad0:	e008      	b.n	8007ae4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad2:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <prvResetNextTaskUnblockTime+0x38>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	4a04      	ldr	r2, [pc, #16]	; (8007af4 <prvResetNextTaskUnblockTime+0x3c>)
 8007ae2:	6013      	str	r3, [r2, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	20000740 	.word	0x20000740
 8007af4:	200007a8 	.word	0x200007a8

08007af8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b02:	4b29      	ldr	r3, [pc, #164]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b08:	4b28      	ldr	r3, [pc, #160]	; (8007bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff fb0d 	bl	800712e <uxListRemove>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10b      	bne.n	8007b32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007b1a:	4b24      	ldr	r3, [pc, #144]	; (8007bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	2201      	movs	r2, #1
 8007b22:	fa02 f303 	lsl.w	r3, r2, r3
 8007b26:	43da      	mvns	r2, r3
 8007b28:	4b21      	ldr	r3, [pc, #132]	; (8007bb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	4a20      	ldr	r2, [pc, #128]	; (8007bb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b38:	d10a      	bne.n	8007b50 <prvAddCurrentTaskToDelayedList+0x58>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d007      	beq.n	8007b50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b40:	4b1a      	ldr	r3, [pc, #104]	; (8007bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3304      	adds	r3, #4
 8007b46:	4619      	mov	r1, r3
 8007b48:	481a      	ldr	r0, [pc, #104]	; (8007bb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007b4a:	f7ff fa93 	bl	8007074 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b4e:	e026      	b.n	8007b9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4413      	add	r3, r2
 8007b56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b58:	4b14      	ldr	r3, [pc, #80]	; (8007bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d209      	bcs.n	8007b7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b68:	4b13      	ldr	r3, [pc, #76]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	4b0f      	ldr	r3, [pc, #60]	; (8007bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3304      	adds	r3, #4
 8007b72:	4619      	mov	r1, r3
 8007b74:	4610      	mov	r0, r2
 8007b76:	f7ff faa1 	bl	80070bc <vListInsert>
}
 8007b7a:	e010      	b.n	8007b9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b7c:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f7ff fa97 	bl	80070bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b8e:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d202      	bcs.n	8007b9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b98:	4a09      	ldr	r2, [pc, #36]	; (8007bc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	6013      	str	r3, [r2, #0]
}
 8007b9e:	bf00      	nop
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	2000078c 	.word	0x2000078c
 8007bac:	20000688 	.word	0x20000688
 8007bb0:	20000790 	.word	0x20000790
 8007bb4:	20000774 	.word	0x20000774
 8007bb8:	20000744 	.word	0x20000744
 8007bbc:	20000740 	.word	0x20000740
 8007bc0:	200007a8 	.word	0x200007a8

08007bc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3b04      	subs	r3, #4
 8007bd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3b04      	subs	r3, #4
 8007be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f023 0201 	bic.w	r2, r3, #1
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3b04      	subs	r3, #4
 8007bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bf4:	4a0c      	ldr	r2, [pc, #48]	; (8007c28 <pxPortInitialiseStack+0x64>)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3b14      	subs	r3, #20
 8007bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3b04      	subs	r3, #4
 8007c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f06f 0202 	mvn.w	r2, #2
 8007c12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	3b20      	subs	r3, #32
 8007c18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	08007c2d 	.word	0x08007c2d

08007c2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c36:	4b12      	ldr	r3, [pc, #72]	; (8007c80 <prvTaskExitError+0x54>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c3e:	d00a      	beq.n	8007c56 <prvTaskExitError+0x2a>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	60fb      	str	r3, [r7, #12]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <prvTaskExitError+0x28>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	60bb      	str	r3, [r7, #8]
}
 8007c68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c6a:	bf00      	nop
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0fc      	beq.n	8007c6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c72:	bf00      	nop
 8007c74:	bf00      	nop
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	20000018 	.word	0x20000018
	...

08007c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c90:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <pxCurrentTCBConst2>)
 8007c92:	6819      	ldr	r1, [r3, #0]
 8007c94:	6808      	ldr	r0, [r1, #0]
 8007c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9a:	f380 8809 	msr	PSP, r0
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f04f 0000 	mov.w	r0, #0
 8007ca6:	f380 8811 	msr	BASEPRI, r0
 8007caa:	4770      	bx	lr
 8007cac:	f3af 8000 	nop.w

08007cb0 <pxCurrentTCBConst2>:
 8007cb0:	20000688 	.word	0x20000688
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop

08007cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007cb8:	4808      	ldr	r0, [pc, #32]	; (8007cdc <prvPortStartFirstTask+0x24>)
 8007cba:	6800      	ldr	r0, [r0, #0]
 8007cbc:	6800      	ldr	r0, [r0, #0]
 8007cbe:	f380 8808 	msr	MSP, r0
 8007cc2:	f04f 0000 	mov.w	r0, #0
 8007cc6:	f380 8814 	msr	CONTROL, r0
 8007cca:	b662      	cpsie	i
 8007ccc:	b661      	cpsie	f
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	df00      	svc	0
 8007cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007cda:	bf00      	nop
 8007cdc:	e000ed08 	.word	0xe000ed08

08007ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ce6:	4b46      	ldr	r3, [pc, #280]	; (8007e00 <xPortStartScheduler+0x120>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a46      	ldr	r2, [pc, #280]	; (8007e04 <xPortStartScheduler+0x124>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d10a      	bne.n	8007d06 <xPortStartScheduler+0x26>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	613b      	str	r3, [r7, #16]
}
 8007d02:	bf00      	nop
 8007d04:	e7fe      	b.n	8007d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d06:	4b3e      	ldr	r3, [pc, #248]	; (8007e00 <xPortStartScheduler+0x120>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a3f      	ldr	r2, [pc, #252]	; (8007e08 <xPortStartScheduler+0x128>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d10a      	bne.n	8007d26 <xPortStartScheduler+0x46>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	60fb      	str	r3, [r7, #12]
}
 8007d22:	bf00      	nop
 8007d24:	e7fe      	b.n	8007d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d26:	4b39      	ldr	r3, [pc, #228]	; (8007e0c <xPortStartScheduler+0x12c>)
 8007d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	22ff      	movs	r2, #255	; 0xff
 8007d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	4b31      	ldr	r3, [pc, #196]	; (8007e10 <xPortStartScheduler+0x130>)
 8007d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d4e:	4b31      	ldr	r3, [pc, #196]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d50:	2207      	movs	r2, #7
 8007d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d54:	e009      	b.n	8007d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007d56:	4b2f      	ldr	r3, [pc, #188]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	4a2d      	ldr	r2, [pc, #180]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d6a:	78fb      	ldrb	r3, [r7, #3]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d72:	2b80      	cmp	r3, #128	; 0x80
 8007d74:	d0ef      	beq.n	8007d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d76:	4b27      	ldr	r3, [pc, #156]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f1c3 0307 	rsb	r3, r3, #7
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d00a      	beq.n	8007d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	60bb      	str	r3, [r7, #8]
}
 8007d94:	bf00      	nop
 8007d96:	e7fe      	b.n	8007d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d98:	4b1e      	ldr	r3, [pc, #120]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	4a1d      	ldr	r2, [pc, #116]	; (8007e14 <xPortStartScheduler+0x134>)
 8007da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007da2:	4b1c      	ldr	r3, [pc, #112]	; (8007e14 <xPortStartScheduler+0x134>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007daa:	4a1a      	ldr	r2, [pc, #104]	; (8007e14 <xPortStartScheduler+0x134>)
 8007dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007db6:	4b18      	ldr	r3, [pc, #96]	; (8007e18 <xPortStartScheduler+0x138>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a17      	ldr	r2, [pc, #92]	; (8007e18 <xPortStartScheduler+0x138>)
 8007dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007dc2:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <xPortStartScheduler+0x138>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a14      	ldr	r2, [pc, #80]	; (8007e18 <xPortStartScheduler+0x138>)
 8007dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007dce:	f000 f8dd 	bl	8007f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007dd2:	4b12      	ldr	r3, [pc, #72]	; (8007e1c <xPortStartScheduler+0x13c>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007dd8:	f000 f8fc 	bl	8007fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ddc:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <xPortStartScheduler+0x140>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a0f      	ldr	r2, [pc, #60]	; (8007e20 <xPortStartScheduler+0x140>)
 8007de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007de8:	f7ff ff66 	bl	8007cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007dec:	f7ff fd52 	bl	8007894 <vTaskSwitchContext>
	prvTaskExitError();
 8007df0:	f7ff ff1c 	bl	8007c2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	e000ed00 	.word	0xe000ed00
 8007e04:	410fc271 	.word	0x410fc271
 8007e08:	410fc270 	.word	0x410fc270
 8007e0c:	e000e400 	.word	0xe000e400
 8007e10:	200007b4 	.word	0x200007b4
 8007e14:	200007b8 	.word	0x200007b8
 8007e18:	e000ed20 	.word	0xe000ed20
 8007e1c:	20000018 	.word	0x20000018
 8007e20:	e000ef34 	.word	0xe000ef34

08007e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	607b      	str	r3, [r7, #4]
}
 8007e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e3e:	4b0f      	ldr	r3, [pc, #60]	; (8007e7c <vPortEnterCritical+0x58>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3301      	adds	r3, #1
 8007e44:	4a0d      	ldr	r2, [pc, #52]	; (8007e7c <vPortEnterCritical+0x58>)
 8007e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e48:	4b0c      	ldr	r3, [pc, #48]	; (8007e7c <vPortEnterCritical+0x58>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d10f      	bne.n	8007e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <vPortEnterCritical+0x5c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00a      	beq.n	8007e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	603b      	str	r3, [r7, #0]
}
 8007e6c:	bf00      	nop
 8007e6e:	e7fe      	b.n	8007e6e <vPortEnterCritical+0x4a>
	}
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	20000018 	.word	0x20000018
 8007e80:	e000ed04 	.word	0xe000ed04

08007e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e8a:	4b12      	ldr	r3, [pc, #72]	; (8007ed4 <vPortExitCritical+0x50>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <vPortExitCritical+0x24>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	607b      	str	r3, [r7, #4]
}
 8007ea4:	bf00      	nop
 8007ea6:	e7fe      	b.n	8007ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ea8:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <vPortExitCritical+0x50>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	4a09      	ldr	r2, [pc, #36]	; (8007ed4 <vPortExitCritical+0x50>)
 8007eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007eb2:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <vPortExitCritical+0x50>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d105      	bne.n	8007ec6 <vPortExitCritical+0x42>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20000018 	.word	0x20000018
	...

08007ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ee0:	f3ef 8009 	mrs	r0, PSP
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	4b15      	ldr	r3, [pc, #84]	; (8007f40 <pxCurrentTCBConst>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	f01e 0f10 	tst.w	lr, #16
 8007ef0:	bf08      	it	eq
 8007ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efa:	6010      	str	r0, [r2, #0]
 8007efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f04:	f380 8811 	msr	BASEPRI, r0
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f7ff fcc0 	bl	8007894 <vTaskSwitchContext>
 8007f14:	f04f 0000 	mov.w	r0, #0
 8007f18:	f380 8811 	msr	BASEPRI, r0
 8007f1c:	bc09      	pop	{r0, r3}
 8007f1e:	6819      	ldr	r1, [r3, #0]
 8007f20:	6808      	ldr	r0, [r1, #0]
 8007f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f26:	f01e 0f10 	tst.w	lr, #16
 8007f2a:	bf08      	it	eq
 8007f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f30:	f380 8809 	msr	PSP, r0
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	f3af 8000 	nop.w

08007f40 <pxCurrentTCBConst>:
 8007f40:	20000688 	.word	0x20000688
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop

08007f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	607b      	str	r3, [r7, #4]
}
 8007f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f62:	f7ff fbdf 	bl	8007724 <xTaskIncrementTick>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f6c:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <SysTick_Handler+0x40>)
 8007f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	2300      	movs	r3, #0
 8007f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	f383 8811 	msr	BASEPRI, r3
}
 8007f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	e000ed04 	.word	0xe000ed04

08007f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f90:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <vPortSetupTimerInterrupt+0x34>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f96:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <vPortSetupTimerInterrupt+0x38>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f9c:	4b0a      	ldr	r3, [pc, #40]	; (8007fc8 <vPortSetupTimerInterrupt+0x3c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a0a      	ldr	r2, [pc, #40]	; (8007fcc <vPortSetupTimerInterrupt+0x40>)
 8007fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa6:	099b      	lsrs	r3, r3, #6
 8007fa8:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <vPortSetupTimerInterrupt+0x44>)
 8007faa:	3b01      	subs	r3, #1
 8007fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007fae:	4b04      	ldr	r3, [pc, #16]	; (8007fc0 <vPortSetupTimerInterrupt+0x34>)
 8007fb0:	2207      	movs	r2, #7
 8007fb2:	601a      	str	r2, [r3, #0]
}
 8007fb4:	bf00      	nop
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	e000e010 	.word	0xe000e010
 8007fc4:	e000e018 	.word	0xe000e018
 8007fc8:	2000000c 	.word	0x2000000c
 8007fcc:	10624dd3 	.word	0x10624dd3
 8007fd0:	e000e014 	.word	0xe000e014

08007fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007fe4 <vPortEnableVFP+0x10>
 8007fd8:	6801      	ldr	r1, [r0, #0]
 8007fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fde:	6001      	str	r1, [r0, #0]
 8007fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007fe2:	bf00      	nop
 8007fe4:	e000ed88 	.word	0xe000ed88

08007fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	; 0x28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ff4:	f7ff faec 	bl	80075d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ff8:	4b5b      	ldr	r3, [pc, #364]	; (8008168 <pvPortMalloc+0x180>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008000:	f000 f920 	bl	8008244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008004:	4b59      	ldr	r3, [pc, #356]	; (800816c <pvPortMalloc+0x184>)
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	f040 8093 	bne.w	8008138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01d      	beq.n	8008054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008018:	2208      	movs	r2, #8
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	2b00      	cmp	r3, #0
 8008028:	d014      	beq.n	8008054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f023 0307 	bic.w	r3, r3, #7
 8008030:	3308      	adds	r3, #8
 8008032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <pvPortMalloc+0x6c>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	617b      	str	r3, [r7, #20]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d06e      	beq.n	8008138 <pvPortMalloc+0x150>
 800805a:	4b45      	ldr	r3, [pc, #276]	; (8008170 <pvPortMalloc+0x188>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	429a      	cmp	r2, r3
 8008062:	d869      	bhi.n	8008138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008064:	4b43      	ldr	r3, [pc, #268]	; (8008174 <pvPortMalloc+0x18c>)
 8008066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008068:	4b42      	ldr	r3, [pc, #264]	; (8008174 <pvPortMalloc+0x18c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800806e:	e004      	b.n	800807a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d903      	bls.n	800808c <pvPortMalloc+0xa4>
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1f1      	bne.n	8008070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800808c:	4b36      	ldr	r3, [pc, #216]	; (8008168 <pvPortMalloc+0x180>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008092:	429a      	cmp	r2, r3
 8008094:	d050      	beq.n	8008138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2208      	movs	r2, #8
 800809c:	4413      	add	r3, r2
 800809e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	1ad2      	subs	r2, r2, r3
 80080b0:	2308      	movs	r3, #8
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d91f      	bls.n	80080f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4413      	add	r3, r2
 80080be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <pvPortMalloc+0xf8>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	613b      	str	r3, [r7, #16]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	1ad2      	subs	r2, r2, r3
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080f2:	69b8      	ldr	r0, [r7, #24]
 80080f4:	f000 f908 	bl	8008308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080f8:	4b1d      	ldr	r3, [pc, #116]	; (8008170 <pvPortMalloc+0x188>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	4a1b      	ldr	r2, [pc, #108]	; (8008170 <pvPortMalloc+0x188>)
 8008104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008106:	4b1a      	ldr	r3, [pc, #104]	; (8008170 <pvPortMalloc+0x188>)
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	4b1b      	ldr	r3, [pc, #108]	; (8008178 <pvPortMalloc+0x190>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d203      	bcs.n	800811a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008112:	4b17      	ldr	r3, [pc, #92]	; (8008170 <pvPortMalloc+0x188>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a18      	ldr	r2, [pc, #96]	; (8008178 <pvPortMalloc+0x190>)
 8008118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	4b13      	ldr	r3, [pc, #76]	; (800816c <pvPortMalloc+0x184>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	431a      	orrs	r2, r3
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800812e:	4b13      	ldr	r3, [pc, #76]	; (800817c <pvPortMalloc+0x194>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3301      	adds	r3, #1
 8008134:	4a11      	ldr	r2, [pc, #68]	; (800817c <pvPortMalloc+0x194>)
 8008136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008138:	f7ff fa58 	bl	80075ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <pvPortMalloc+0x174>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	60fb      	str	r3, [r7, #12]
}
 8008158:	bf00      	nop
 800815a:	e7fe      	b.n	800815a <pvPortMalloc+0x172>
	return pvReturn;
 800815c:	69fb      	ldr	r3, [r7, #28]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3728      	adds	r7, #40	; 0x28
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	200043c4 	.word	0x200043c4
 800816c:	200043d8 	.word	0x200043d8
 8008170:	200043c8 	.word	0x200043c8
 8008174:	200043bc 	.word	0x200043bc
 8008178:	200043cc 	.word	0x200043cc
 800817c:	200043d0 	.word	0x200043d0

08008180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d04d      	beq.n	800822e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008192:	2308      	movs	r3, #8
 8008194:	425b      	negs	r3, r3
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	4413      	add	r3, r2
 800819a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	4b24      	ldr	r3, [pc, #144]	; (8008238 <vPortFree+0xb8>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4013      	ands	r3, r2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <vPortFree+0x44>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	60fb      	str	r3, [r7, #12]
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00a      	beq.n	80081e2 <vPortFree+0x62>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	60bb      	str	r3, [r7, #8]
}
 80081de:	bf00      	nop
 80081e0:	e7fe      	b.n	80081e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	4b14      	ldr	r3, [pc, #80]	; (8008238 <vPortFree+0xb8>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4013      	ands	r3, r2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d01e      	beq.n	800822e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d11a      	bne.n	800822e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <vPortFree+0xb8>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	43db      	mvns	r3, r3
 8008202:	401a      	ands	r2, r3
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008208:	f7ff f9e2 	bl	80075d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	4b0a      	ldr	r3, [pc, #40]	; (800823c <vPortFree+0xbc>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4413      	add	r3, r2
 8008216:	4a09      	ldr	r2, [pc, #36]	; (800823c <vPortFree+0xbc>)
 8008218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800821a:	6938      	ldr	r0, [r7, #16]
 800821c:	f000 f874 	bl	8008308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008220:	4b07      	ldr	r3, [pc, #28]	; (8008240 <vPortFree+0xc0>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3301      	adds	r3, #1
 8008226:	4a06      	ldr	r2, [pc, #24]	; (8008240 <vPortFree+0xc0>)
 8008228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800822a:	f7ff f9df 	bl	80075ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800822e:	bf00      	nop
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	200043d8 	.word	0x200043d8
 800823c:	200043c8 	.word	0x200043c8
 8008240:	200043d4 	.word	0x200043d4

08008244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800824a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800824e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008250:	4b27      	ldr	r3, [pc, #156]	; (80082f0 <prvHeapInit+0xac>)
 8008252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00c      	beq.n	8008278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3307      	adds	r3, #7
 8008262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0307 	bic.w	r3, r3, #7
 800826a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	4a1f      	ldr	r2, [pc, #124]	; (80082f0 <prvHeapInit+0xac>)
 8008274:	4413      	add	r3, r2
 8008276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800827c:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <prvHeapInit+0xb0>)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008282:	4b1c      	ldr	r3, [pc, #112]	; (80082f4 <prvHeapInit+0xb0>)
 8008284:	2200      	movs	r2, #0
 8008286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	4413      	add	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008290:	2208      	movs	r2, #8
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	1a9b      	subs	r3, r3, r2
 8008296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0307 	bic.w	r3, r3, #7
 800829e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4a15      	ldr	r2, [pc, #84]	; (80082f8 <prvHeapInit+0xb4>)
 80082a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082a6:	4b14      	ldr	r3, [pc, #80]	; (80082f8 <prvHeapInit+0xb4>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2200      	movs	r2, #0
 80082ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082ae:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <prvHeapInit+0xb4>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	1ad2      	subs	r2, r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082c4:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <prvHeapInit+0xb4>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	4a0a      	ldr	r2, [pc, #40]	; (80082fc <prvHeapInit+0xb8>)
 80082d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	4a09      	ldr	r2, [pc, #36]	; (8008300 <prvHeapInit+0xbc>)
 80082da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082dc:	4b09      	ldr	r3, [pc, #36]	; (8008304 <prvHeapInit+0xc0>)
 80082de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082e2:	601a      	str	r2, [r3, #0]
}
 80082e4:	bf00      	nop
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	200007bc 	.word	0x200007bc
 80082f4:	200043bc 	.word	0x200043bc
 80082f8:	200043c4 	.word	0x200043c4
 80082fc:	200043cc 	.word	0x200043cc
 8008300:	200043c8 	.word	0x200043c8
 8008304:	200043d8 	.word	0x200043d8

08008308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008310:	4b28      	ldr	r3, [pc, #160]	; (80083b4 <prvInsertBlockIntoFreeList+0xac>)
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	e002      	b.n	800831c <prvInsertBlockIntoFreeList+0x14>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	429a      	cmp	r2, r3
 8008324:	d8f7      	bhi.n	8008316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	4413      	add	r3, r2
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	429a      	cmp	r2, r3
 8008336:	d108      	bne.n	800834a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	441a      	add	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	441a      	add	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d118      	bne.n	8008390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b15      	ldr	r3, [pc, #84]	; (80083b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d00d      	beq.n	8008386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	441a      	add	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	e008      	b.n	8008398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008386:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	e003      	b.n	8008398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	429a      	cmp	r2, r3
 800839e:	d002      	beq.n	80083a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083a6:	bf00      	nop
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	200043bc 	.word	0x200043bc
 80083b8:	200043c4 	.word	0x200043c4

080083bc <__errno>:
 80083bc:	4b01      	ldr	r3, [pc, #4]	; (80083c4 <__errno+0x8>)
 80083be:	6818      	ldr	r0, [r3, #0]
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	2000001c 	.word	0x2000001c

080083c8 <__libc_init_array>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	4d0d      	ldr	r5, [pc, #52]	; (8008400 <__libc_init_array+0x38>)
 80083cc:	4c0d      	ldr	r4, [pc, #52]	; (8008404 <__libc_init_array+0x3c>)
 80083ce:	1b64      	subs	r4, r4, r5
 80083d0:	10a4      	asrs	r4, r4, #2
 80083d2:	2600      	movs	r6, #0
 80083d4:	42a6      	cmp	r6, r4
 80083d6:	d109      	bne.n	80083ec <__libc_init_array+0x24>
 80083d8:	4d0b      	ldr	r5, [pc, #44]	; (8008408 <__libc_init_array+0x40>)
 80083da:	4c0c      	ldr	r4, [pc, #48]	; (800840c <__libc_init_array+0x44>)
 80083dc:	f002 f838 	bl	800a450 <_init>
 80083e0:	1b64      	subs	r4, r4, r5
 80083e2:	10a4      	asrs	r4, r4, #2
 80083e4:	2600      	movs	r6, #0
 80083e6:	42a6      	cmp	r6, r4
 80083e8:	d105      	bne.n	80083f6 <__libc_init_array+0x2e>
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
 80083ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f0:	4798      	blx	r3
 80083f2:	3601      	adds	r6, #1
 80083f4:	e7ee      	b.n	80083d4 <__libc_init_array+0xc>
 80083f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083fa:	4798      	blx	r3
 80083fc:	3601      	adds	r6, #1
 80083fe:	e7f2      	b.n	80083e6 <__libc_init_array+0x1e>
 8008400:	0800abd8 	.word	0x0800abd8
 8008404:	0800abd8 	.word	0x0800abd8
 8008408:	0800abd8 	.word	0x0800abd8
 800840c:	0800abdc 	.word	0x0800abdc

08008410 <memset>:
 8008410:	4402      	add	r2, r0
 8008412:	4603      	mov	r3, r0
 8008414:	4293      	cmp	r3, r2
 8008416:	d100      	bne.n	800841a <memset+0xa>
 8008418:	4770      	bx	lr
 800841a:	f803 1b01 	strb.w	r1, [r3], #1
 800841e:	e7f9      	b.n	8008414 <memset+0x4>

08008420 <iprintf>:
 8008420:	b40f      	push	{r0, r1, r2, r3}
 8008422:	4b0a      	ldr	r3, [pc, #40]	; (800844c <iprintf+0x2c>)
 8008424:	b513      	push	{r0, r1, r4, lr}
 8008426:	681c      	ldr	r4, [r3, #0]
 8008428:	b124      	cbz	r4, 8008434 <iprintf+0x14>
 800842a:	69a3      	ldr	r3, [r4, #24]
 800842c:	b913      	cbnz	r3, 8008434 <iprintf+0x14>
 800842e:	4620      	mov	r0, r4
 8008430:	f000 fa5e 	bl	80088f0 <__sinit>
 8008434:	ab05      	add	r3, sp, #20
 8008436:	9a04      	ldr	r2, [sp, #16]
 8008438:	68a1      	ldr	r1, [r4, #8]
 800843a:	9301      	str	r3, [sp, #4]
 800843c:	4620      	mov	r0, r4
 800843e:	f000 fc67 	bl	8008d10 <_vfiprintf_r>
 8008442:	b002      	add	sp, #8
 8008444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008448:	b004      	add	sp, #16
 800844a:	4770      	bx	lr
 800844c:	2000001c 	.word	0x2000001c

08008450 <_puts_r>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	460e      	mov	r6, r1
 8008454:	4605      	mov	r5, r0
 8008456:	b118      	cbz	r0, 8008460 <_puts_r+0x10>
 8008458:	6983      	ldr	r3, [r0, #24]
 800845a:	b90b      	cbnz	r3, 8008460 <_puts_r+0x10>
 800845c:	f000 fa48 	bl	80088f0 <__sinit>
 8008460:	69ab      	ldr	r3, [r5, #24]
 8008462:	68ac      	ldr	r4, [r5, #8]
 8008464:	b913      	cbnz	r3, 800846c <_puts_r+0x1c>
 8008466:	4628      	mov	r0, r5
 8008468:	f000 fa42 	bl	80088f0 <__sinit>
 800846c:	4b2c      	ldr	r3, [pc, #176]	; (8008520 <_puts_r+0xd0>)
 800846e:	429c      	cmp	r4, r3
 8008470:	d120      	bne.n	80084b4 <_puts_r+0x64>
 8008472:	686c      	ldr	r4, [r5, #4]
 8008474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008476:	07db      	lsls	r3, r3, #31
 8008478:	d405      	bmi.n	8008486 <_puts_r+0x36>
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	0598      	lsls	r0, r3, #22
 800847e:	d402      	bmi.n	8008486 <_puts_r+0x36>
 8008480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008482:	f000 fad3 	bl	8008a2c <__retarget_lock_acquire_recursive>
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	0719      	lsls	r1, r3, #28
 800848a:	d51d      	bpl.n	80084c8 <_puts_r+0x78>
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	b1db      	cbz	r3, 80084c8 <_puts_r+0x78>
 8008490:	3e01      	subs	r6, #1
 8008492:	68a3      	ldr	r3, [r4, #8]
 8008494:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008498:	3b01      	subs	r3, #1
 800849a:	60a3      	str	r3, [r4, #8]
 800849c:	bb39      	cbnz	r1, 80084ee <_puts_r+0x9e>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	da38      	bge.n	8008514 <_puts_r+0xc4>
 80084a2:	4622      	mov	r2, r4
 80084a4:	210a      	movs	r1, #10
 80084a6:	4628      	mov	r0, r5
 80084a8:	f000 f848 	bl	800853c <__swbuf_r>
 80084ac:	3001      	adds	r0, #1
 80084ae:	d011      	beq.n	80084d4 <_puts_r+0x84>
 80084b0:	250a      	movs	r5, #10
 80084b2:	e011      	b.n	80084d8 <_puts_r+0x88>
 80084b4:	4b1b      	ldr	r3, [pc, #108]	; (8008524 <_puts_r+0xd4>)
 80084b6:	429c      	cmp	r4, r3
 80084b8:	d101      	bne.n	80084be <_puts_r+0x6e>
 80084ba:	68ac      	ldr	r4, [r5, #8]
 80084bc:	e7da      	b.n	8008474 <_puts_r+0x24>
 80084be:	4b1a      	ldr	r3, [pc, #104]	; (8008528 <_puts_r+0xd8>)
 80084c0:	429c      	cmp	r4, r3
 80084c2:	bf08      	it	eq
 80084c4:	68ec      	ldreq	r4, [r5, #12]
 80084c6:	e7d5      	b.n	8008474 <_puts_r+0x24>
 80084c8:	4621      	mov	r1, r4
 80084ca:	4628      	mov	r0, r5
 80084cc:	f000 f888 	bl	80085e0 <__swsetup_r>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d0dd      	beq.n	8008490 <_puts_r+0x40>
 80084d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80084d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084da:	07da      	lsls	r2, r3, #31
 80084dc:	d405      	bmi.n	80084ea <_puts_r+0x9a>
 80084de:	89a3      	ldrh	r3, [r4, #12]
 80084e0:	059b      	lsls	r3, r3, #22
 80084e2:	d402      	bmi.n	80084ea <_puts_r+0x9a>
 80084e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084e6:	f000 faa2 	bl	8008a2e <__retarget_lock_release_recursive>
 80084ea:	4628      	mov	r0, r5
 80084ec:	bd70      	pop	{r4, r5, r6, pc}
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	da04      	bge.n	80084fc <_puts_r+0xac>
 80084f2:	69a2      	ldr	r2, [r4, #24]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	dc06      	bgt.n	8008506 <_puts_r+0xb6>
 80084f8:	290a      	cmp	r1, #10
 80084fa:	d004      	beq.n	8008506 <_puts_r+0xb6>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	1c5a      	adds	r2, r3, #1
 8008500:	6022      	str	r2, [r4, #0]
 8008502:	7019      	strb	r1, [r3, #0]
 8008504:	e7c5      	b.n	8008492 <_puts_r+0x42>
 8008506:	4622      	mov	r2, r4
 8008508:	4628      	mov	r0, r5
 800850a:	f000 f817 	bl	800853c <__swbuf_r>
 800850e:	3001      	adds	r0, #1
 8008510:	d1bf      	bne.n	8008492 <_puts_r+0x42>
 8008512:	e7df      	b.n	80084d4 <_puts_r+0x84>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	250a      	movs	r5, #10
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	6022      	str	r2, [r4, #0]
 800851c:	701d      	strb	r5, [r3, #0]
 800851e:	e7db      	b.n	80084d8 <_puts_r+0x88>
 8008520:	0800a71c 	.word	0x0800a71c
 8008524:	0800a73c 	.word	0x0800a73c
 8008528:	0800a6fc 	.word	0x0800a6fc

0800852c <puts>:
 800852c:	4b02      	ldr	r3, [pc, #8]	; (8008538 <puts+0xc>)
 800852e:	4601      	mov	r1, r0
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	f7ff bf8d 	b.w	8008450 <_puts_r>
 8008536:	bf00      	nop
 8008538:	2000001c 	.word	0x2000001c

0800853c <__swbuf_r>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	460e      	mov	r6, r1
 8008540:	4614      	mov	r4, r2
 8008542:	4605      	mov	r5, r0
 8008544:	b118      	cbz	r0, 800854e <__swbuf_r+0x12>
 8008546:	6983      	ldr	r3, [r0, #24]
 8008548:	b90b      	cbnz	r3, 800854e <__swbuf_r+0x12>
 800854a:	f000 f9d1 	bl	80088f0 <__sinit>
 800854e:	4b21      	ldr	r3, [pc, #132]	; (80085d4 <__swbuf_r+0x98>)
 8008550:	429c      	cmp	r4, r3
 8008552:	d12b      	bne.n	80085ac <__swbuf_r+0x70>
 8008554:	686c      	ldr	r4, [r5, #4]
 8008556:	69a3      	ldr	r3, [r4, #24]
 8008558:	60a3      	str	r3, [r4, #8]
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	071a      	lsls	r2, r3, #28
 800855e:	d52f      	bpl.n	80085c0 <__swbuf_r+0x84>
 8008560:	6923      	ldr	r3, [r4, #16]
 8008562:	b36b      	cbz	r3, 80085c0 <__swbuf_r+0x84>
 8008564:	6923      	ldr	r3, [r4, #16]
 8008566:	6820      	ldr	r0, [r4, #0]
 8008568:	1ac0      	subs	r0, r0, r3
 800856a:	6963      	ldr	r3, [r4, #20]
 800856c:	b2f6      	uxtb	r6, r6
 800856e:	4283      	cmp	r3, r0
 8008570:	4637      	mov	r7, r6
 8008572:	dc04      	bgt.n	800857e <__swbuf_r+0x42>
 8008574:	4621      	mov	r1, r4
 8008576:	4628      	mov	r0, r5
 8008578:	f000 f926 	bl	80087c8 <_fflush_r>
 800857c:	bb30      	cbnz	r0, 80085cc <__swbuf_r+0x90>
 800857e:	68a3      	ldr	r3, [r4, #8]
 8008580:	3b01      	subs	r3, #1
 8008582:	60a3      	str	r3, [r4, #8]
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	1c5a      	adds	r2, r3, #1
 8008588:	6022      	str	r2, [r4, #0]
 800858a:	701e      	strb	r6, [r3, #0]
 800858c:	6963      	ldr	r3, [r4, #20]
 800858e:	3001      	adds	r0, #1
 8008590:	4283      	cmp	r3, r0
 8008592:	d004      	beq.n	800859e <__swbuf_r+0x62>
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	07db      	lsls	r3, r3, #31
 8008598:	d506      	bpl.n	80085a8 <__swbuf_r+0x6c>
 800859a:	2e0a      	cmp	r6, #10
 800859c:	d104      	bne.n	80085a8 <__swbuf_r+0x6c>
 800859e:	4621      	mov	r1, r4
 80085a0:	4628      	mov	r0, r5
 80085a2:	f000 f911 	bl	80087c8 <_fflush_r>
 80085a6:	b988      	cbnz	r0, 80085cc <__swbuf_r+0x90>
 80085a8:	4638      	mov	r0, r7
 80085aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ac:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <__swbuf_r+0x9c>)
 80085ae:	429c      	cmp	r4, r3
 80085b0:	d101      	bne.n	80085b6 <__swbuf_r+0x7a>
 80085b2:	68ac      	ldr	r4, [r5, #8]
 80085b4:	e7cf      	b.n	8008556 <__swbuf_r+0x1a>
 80085b6:	4b09      	ldr	r3, [pc, #36]	; (80085dc <__swbuf_r+0xa0>)
 80085b8:	429c      	cmp	r4, r3
 80085ba:	bf08      	it	eq
 80085bc:	68ec      	ldreq	r4, [r5, #12]
 80085be:	e7ca      	b.n	8008556 <__swbuf_r+0x1a>
 80085c0:	4621      	mov	r1, r4
 80085c2:	4628      	mov	r0, r5
 80085c4:	f000 f80c 	bl	80085e0 <__swsetup_r>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d0cb      	beq.n	8008564 <__swbuf_r+0x28>
 80085cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80085d0:	e7ea      	b.n	80085a8 <__swbuf_r+0x6c>
 80085d2:	bf00      	nop
 80085d4:	0800a71c 	.word	0x0800a71c
 80085d8:	0800a73c 	.word	0x0800a73c
 80085dc:	0800a6fc 	.word	0x0800a6fc

080085e0 <__swsetup_r>:
 80085e0:	4b32      	ldr	r3, [pc, #200]	; (80086ac <__swsetup_r+0xcc>)
 80085e2:	b570      	push	{r4, r5, r6, lr}
 80085e4:	681d      	ldr	r5, [r3, #0]
 80085e6:	4606      	mov	r6, r0
 80085e8:	460c      	mov	r4, r1
 80085ea:	b125      	cbz	r5, 80085f6 <__swsetup_r+0x16>
 80085ec:	69ab      	ldr	r3, [r5, #24]
 80085ee:	b913      	cbnz	r3, 80085f6 <__swsetup_r+0x16>
 80085f0:	4628      	mov	r0, r5
 80085f2:	f000 f97d 	bl	80088f0 <__sinit>
 80085f6:	4b2e      	ldr	r3, [pc, #184]	; (80086b0 <__swsetup_r+0xd0>)
 80085f8:	429c      	cmp	r4, r3
 80085fa:	d10f      	bne.n	800861c <__swsetup_r+0x3c>
 80085fc:	686c      	ldr	r4, [r5, #4]
 80085fe:	89a3      	ldrh	r3, [r4, #12]
 8008600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008604:	0719      	lsls	r1, r3, #28
 8008606:	d42c      	bmi.n	8008662 <__swsetup_r+0x82>
 8008608:	06dd      	lsls	r5, r3, #27
 800860a:	d411      	bmi.n	8008630 <__swsetup_r+0x50>
 800860c:	2309      	movs	r3, #9
 800860e:	6033      	str	r3, [r6, #0]
 8008610:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008614:	81a3      	strh	r3, [r4, #12]
 8008616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800861a:	e03e      	b.n	800869a <__swsetup_r+0xba>
 800861c:	4b25      	ldr	r3, [pc, #148]	; (80086b4 <__swsetup_r+0xd4>)
 800861e:	429c      	cmp	r4, r3
 8008620:	d101      	bne.n	8008626 <__swsetup_r+0x46>
 8008622:	68ac      	ldr	r4, [r5, #8]
 8008624:	e7eb      	b.n	80085fe <__swsetup_r+0x1e>
 8008626:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <__swsetup_r+0xd8>)
 8008628:	429c      	cmp	r4, r3
 800862a:	bf08      	it	eq
 800862c:	68ec      	ldreq	r4, [r5, #12]
 800862e:	e7e6      	b.n	80085fe <__swsetup_r+0x1e>
 8008630:	0758      	lsls	r0, r3, #29
 8008632:	d512      	bpl.n	800865a <__swsetup_r+0x7a>
 8008634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008636:	b141      	cbz	r1, 800864a <__swsetup_r+0x6a>
 8008638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800863c:	4299      	cmp	r1, r3
 800863e:	d002      	beq.n	8008646 <__swsetup_r+0x66>
 8008640:	4630      	mov	r0, r6
 8008642:	f000 fa5b 	bl	8008afc <_free_r>
 8008646:	2300      	movs	r3, #0
 8008648:	6363      	str	r3, [r4, #52]	; 0x34
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008650:	81a3      	strh	r3, [r4, #12]
 8008652:	2300      	movs	r3, #0
 8008654:	6063      	str	r3, [r4, #4]
 8008656:	6923      	ldr	r3, [r4, #16]
 8008658:	6023      	str	r3, [r4, #0]
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	f043 0308 	orr.w	r3, r3, #8
 8008660:	81a3      	strh	r3, [r4, #12]
 8008662:	6923      	ldr	r3, [r4, #16]
 8008664:	b94b      	cbnz	r3, 800867a <__swsetup_r+0x9a>
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800866c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008670:	d003      	beq.n	800867a <__swsetup_r+0x9a>
 8008672:	4621      	mov	r1, r4
 8008674:	4630      	mov	r0, r6
 8008676:	f000 fa01 	bl	8008a7c <__smakebuf_r>
 800867a:	89a0      	ldrh	r0, [r4, #12]
 800867c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008680:	f010 0301 	ands.w	r3, r0, #1
 8008684:	d00a      	beq.n	800869c <__swsetup_r+0xbc>
 8008686:	2300      	movs	r3, #0
 8008688:	60a3      	str	r3, [r4, #8]
 800868a:	6963      	ldr	r3, [r4, #20]
 800868c:	425b      	negs	r3, r3
 800868e:	61a3      	str	r3, [r4, #24]
 8008690:	6923      	ldr	r3, [r4, #16]
 8008692:	b943      	cbnz	r3, 80086a6 <__swsetup_r+0xc6>
 8008694:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008698:	d1ba      	bne.n	8008610 <__swsetup_r+0x30>
 800869a:	bd70      	pop	{r4, r5, r6, pc}
 800869c:	0781      	lsls	r1, r0, #30
 800869e:	bf58      	it	pl
 80086a0:	6963      	ldrpl	r3, [r4, #20]
 80086a2:	60a3      	str	r3, [r4, #8]
 80086a4:	e7f4      	b.n	8008690 <__swsetup_r+0xb0>
 80086a6:	2000      	movs	r0, #0
 80086a8:	e7f7      	b.n	800869a <__swsetup_r+0xba>
 80086aa:	bf00      	nop
 80086ac:	2000001c 	.word	0x2000001c
 80086b0:	0800a71c 	.word	0x0800a71c
 80086b4:	0800a73c 	.word	0x0800a73c
 80086b8:	0800a6fc 	.word	0x0800a6fc

080086bc <__sflush_r>:
 80086bc:	898a      	ldrh	r2, [r1, #12]
 80086be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c2:	4605      	mov	r5, r0
 80086c4:	0710      	lsls	r0, r2, #28
 80086c6:	460c      	mov	r4, r1
 80086c8:	d458      	bmi.n	800877c <__sflush_r+0xc0>
 80086ca:	684b      	ldr	r3, [r1, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	dc05      	bgt.n	80086dc <__sflush_r+0x20>
 80086d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	dc02      	bgt.n	80086dc <__sflush_r+0x20>
 80086d6:	2000      	movs	r0, #0
 80086d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086de:	2e00      	cmp	r6, #0
 80086e0:	d0f9      	beq.n	80086d6 <__sflush_r+0x1a>
 80086e2:	2300      	movs	r3, #0
 80086e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086e8:	682f      	ldr	r7, [r5, #0]
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	d032      	beq.n	8008754 <__sflush_r+0x98>
 80086ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	075a      	lsls	r2, r3, #29
 80086f4:	d505      	bpl.n	8008702 <__sflush_r+0x46>
 80086f6:	6863      	ldr	r3, [r4, #4]
 80086f8:	1ac0      	subs	r0, r0, r3
 80086fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086fc:	b10b      	cbz	r3, 8008702 <__sflush_r+0x46>
 80086fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008700:	1ac0      	subs	r0, r0, r3
 8008702:	2300      	movs	r3, #0
 8008704:	4602      	mov	r2, r0
 8008706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008708:	6a21      	ldr	r1, [r4, #32]
 800870a:	4628      	mov	r0, r5
 800870c:	47b0      	blx	r6
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	d106      	bne.n	8008722 <__sflush_r+0x66>
 8008714:	6829      	ldr	r1, [r5, #0]
 8008716:	291d      	cmp	r1, #29
 8008718:	d82c      	bhi.n	8008774 <__sflush_r+0xb8>
 800871a:	4a2a      	ldr	r2, [pc, #168]	; (80087c4 <__sflush_r+0x108>)
 800871c:	40ca      	lsrs	r2, r1
 800871e:	07d6      	lsls	r6, r2, #31
 8008720:	d528      	bpl.n	8008774 <__sflush_r+0xb8>
 8008722:	2200      	movs	r2, #0
 8008724:	6062      	str	r2, [r4, #4]
 8008726:	04d9      	lsls	r1, r3, #19
 8008728:	6922      	ldr	r2, [r4, #16]
 800872a:	6022      	str	r2, [r4, #0]
 800872c:	d504      	bpl.n	8008738 <__sflush_r+0x7c>
 800872e:	1c42      	adds	r2, r0, #1
 8008730:	d101      	bne.n	8008736 <__sflush_r+0x7a>
 8008732:	682b      	ldr	r3, [r5, #0]
 8008734:	b903      	cbnz	r3, 8008738 <__sflush_r+0x7c>
 8008736:	6560      	str	r0, [r4, #84]	; 0x54
 8008738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800873a:	602f      	str	r7, [r5, #0]
 800873c:	2900      	cmp	r1, #0
 800873e:	d0ca      	beq.n	80086d6 <__sflush_r+0x1a>
 8008740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008744:	4299      	cmp	r1, r3
 8008746:	d002      	beq.n	800874e <__sflush_r+0x92>
 8008748:	4628      	mov	r0, r5
 800874a:	f000 f9d7 	bl	8008afc <_free_r>
 800874e:	2000      	movs	r0, #0
 8008750:	6360      	str	r0, [r4, #52]	; 0x34
 8008752:	e7c1      	b.n	80086d8 <__sflush_r+0x1c>
 8008754:	6a21      	ldr	r1, [r4, #32]
 8008756:	2301      	movs	r3, #1
 8008758:	4628      	mov	r0, r5
 800875a:	47b0      	blx	r6
 800875c:	1c41      	adds	r1, r0, #1
 800875e:	d1c7      	bne.n	80086f0 <__sflush_r+0x34>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0c4      	beq.n	80086f0 <__sflush_r+0x34>
 8008766:	2b1d      	cmp	r3, #29
 8008768:	d001      	beq.n	800876e <__sflush_r+0xb2>
 800876a:	2b16      	cmp	r3, #22
 800876c:	d101      	bne.n	8008772 <__sflush_r+0xb6>
 800876e:	602f      	str	r7, [r5, #0]
 8008770:	e7b1      	b.n	80086d6 <__sflush_r+0x1a>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008778:	81a3      	strh	r3, [r4, #12]
 800877a:	e7ad      	b.n	80086d8 <__sflush_r+0x1c>
 800877c:	690f      	ldr	r7, [r1, #16]
 800877e:	2f00      	cmp	r7, #0
 8008780:	d0a9      	beq.n	80086d6 <__sflush_r+0x1a>
 8008782:	0793      	lsls	r3, r2, #30
 8008784:	680e      	ldr	r6, [r1, #0]
 8008786:	bf08      	it	eq
 8008788:	694b      	ldreq	r3, [r1, #20]
 800878a:	600f      	str	r7, [r1, #0]
 800878c:	bf18      	it	ne
 800878e:	2300      	movne	r3, #0
 8008790:	eba6 0807 	sub.w	r8, r6, r7
 8008794:	608b      	str	r3, [r1, #8]
 8008796:	f1b8 0f00 	cmp.w	r8, #0
 800879a:	dd9c      	ble.n	80086d6 <__sflush_r+0x1a>
 800879c:	6a21      	ldr	r1, [r4, #32]
 800879e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087a0:	4643      	mov	r3, r8
 80087a2:	463a      	mov	r2, r7
 80087a4:	4628      	mov	r0, r5
 80087a6:	47b0      	blx	r6
 80087a8:	2800      	cmp	r0, #0
 80087aa:	dc06      	bgt.n	80087ba <__sflush_r+0xfe>
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b2:	81a3      	strh	r3, [r4, #12]
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087b8:	e78e      	b.n	80086d8 <__sflush_r+0x1c>
 80087ba:	4407      	add	r7, r0
 80087bc:	eba8 0800 	sub.w	r8, r8, r0
 80087c0:	e7e9      	b.n	8008796 <__sflush_r+0xda>
 80087c2:	bf00      	nop
 80087c4:	20400001 	.word	0x20400001

080087c8 <_fflush_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	690b      	ldr	r3, [r1, #16]
 80087cc:	4605      	mov	r5, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	b913      	cbnz	r3, 80087d8 <_fflush_r+0x10>
 80087d2:	2500      	movs	r5, #0
 80087d4:	4628      	mov	r0, r5
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	b118      	cbz	r0, 80087e2 <_fflush_r+0x1a>
 80087da:	6983      	ldr	r3, [r0, #24]
 80087dc:	b90b      	cbnz	r3, 80087e2 <_fflush_r+0x1a>
 80087de:	f000 f887 	bl	80088f0 <__sinit>
 80087e2:	4b14      	ldr	r3, [pc, #80]	; (8008834 <_fflush_r+0x6c>)
 80087e4:	429c      	cmp	r4, r3
 80087e6:	d11b      	bne.n	8008820 <_fflush_r+0x58>
 80087e8:	686c      	ldr	r4, [r5, #4]
 80087ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0ef      	beq.n	80087d2 <_fflush_r+0xa>
 80087f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087f4:	07d0      	lsls	r0, r2, #31
 80087f6:	d404      	bmi.n	8008802 <_fflush_r+0x3a>
 80087f8:	0599      	lsls	r1, r3, #22
 80087fa:	d402      	bmi.n	8008802 <_fflush_r+0x3a>
 80087fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087fe:	f000 f915 	bl	8008a2c <__retarget_lock_acquire_recursive>
 8008802:	4628      	mov	r0, r5
 8008804:	4621      	mov	r1, r4
 8008806:	f7ff ff59 	bl	80086bc <__sflush_r>
 800880a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800880c:	07da      	lsls	r2, r3, #31
 800880e:	4605      	mov	r5, r0
 8008810:	d4e0      	bmi.n	80087d4 <_fflush_r+0xc>
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	059b      	lsls	r3, r3, #22
 8008816:	d4dd      	bmi.n	80087d4 <_fflush_r+0xc>
 8008818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800881a:	f000 f908 	bl	8008a2e <__retarget_lock_release_recursive>
 800881e:	e7d9      	b.n	80087d4 <_fflush_r+0xc>
 8008820:	4b05      	ldr	r3, [pc, #20]	; (8008838 <_fflush_r+0x70>)
 8008822:	429c      	cmp	r4, r3
 8008824:	d101      	bne.n	800882a <_fflush_r+0x62>
 8008826:	68ac      	ldr	r4, [r5, #8]
 8008828:	e7df      	b.n	80087ea <_fflush_r+0x22>
 800882a:	4b04      	ldr	r3, [pc, #16]	; (800883c <_fflush_r+0x74>)
 800882c:	429c      	cmp	r4, r3
 800882e:	bf08      	it	eq
 8008830:	68ec      	ldreq	r4, [r5, #12]
 8008832:	e7da      	b.n	80087ea <_fflush_r+0x22>
 8008834:	0800a71c 	.word	0x0800a71c
 8008838:	0800a73c 	.word	0x0800a73c
 800883c:	0800a6fc 	.word	0x0800a6fc

08008840 <std>:
 8008840:	2300      	movs	r3, #0
 8008842:	b510      	push	{r4, lr}
 8008844:	4604      	mov	r4, r0
 8008846:	e9c0 3300 	strd	r3, r3, [r0]
 800884a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800884e:	6083      	str	r3, [r0, #8]
 8008850:	8181      	strh	r1, [r0, #12]
 8008852:	6643      	str	r3, [r0, #100]	; 0x64
 8008854:	81c2      	strh	r2, [r0, #14]
 8008856:	6183      	str	r3, [r0, #24]
 8008858:	4619      	mov	r1, r3
 800885a:	2208      	movs	r2, #8
 800885c:	305c      	adds	r0, #92	; 0x5c
 800885e:	f7ff fdd7 	bl	8008410 <memset>
 8008862:	4b05      	ldr	r3, [pc, #20]	; (8008878 <std+0x38>)
 8008864:	6263      	str	r3, [r4, #36]	; 0x24
 8008866:	4b05      	ldr	r3, [pc, #20]	; (800887c <std+0x3c>)
 8008868:	62a3      	str	r3, [r4, #40]	; 0x28
 800886a:	4b05      	ldr	r3, [pc, #20]	; (8008880 <std+0x40>)
 800886c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <std+0x44>)
 8008870:	6224      	str	r4, [r4, #32]
 8008872:	6323      	str	r3, [r4, #48]	; 0x30
 8008874:	bd10      	pop	{r4, pc}
 8008876:	bf00      	nop
 8008878:	080092b9 	.word	0x080092b9
 800887c:	080092db 	.word	0x080092db
 8008880:	08009313 	.word	0x08009313
 8008884:	08009337 	.word	0x08009337

08008888 <_cleanup_r>:
 8008888:	4901      	ldr	r1, [pc, #4]	; (8008890 <_cleanup_r+0x8>)
 800888a:	f000 b8af 	b.w	80089ec <_fwalk_reent>
 800888e:	bf00      	nop
 8008890:	080087c9 	.word	0x080087c9

08008894 <__sfmoreglue>:
 8008894:	b570      	push	{r4, r5, r6, lr}
 8008896:	2268      	movs	r2, #104	; 0x68
 8008898:	1e4d      	subs	r5, r1, #1
 800889a:	4355      	muls	r5, r2
 800889c:	460e      	mov	r6, r1
 800889e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088a2:	f000 f997 	bl	8008bd4 <_malloc_r>
 80088a6:	4604      	mov	r4, r0
 80088a8:	b140      	cbz	r0, 80088bc <__sfmoreglue+0x28>
 80088aa:	2100      	movs	r1, #0
 80088ac:	e9c0 1600 	strd	r1, r6, [r0]
 80088b0:	300c      	adds	r0, #12
 80088b2:	60a0      	str	r0, [r4, #8]
 80088b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088b8:	f7ff fdaa 	bl	8008410 <memset>
 80088bc:	4620      	mov	r0, r4
 80088be:	bd70      	pop	{r4, r5, r6, pc}

080088c0 <__sfp_lock_acquire>:
 80088c0:	4801      	ldr	r0, [pc, #4]	; (80088c8 <__sfp_lock_acquire+0x8>)
 80088c2:	f000 b8b3 	b.w	8008a2c <__retarget_lock_acquire_recursive>
 80088c6:	bf00      	nop
 80088c8:	200043dd 	.word	0x200043dd

080088cc <__sfp_lock_release>:
 80088cc:	4801      	ldr	r0, [pc, #4]	; (80088d4 <__sfp_lock_release+0x8>)
 80088ce:	f000 b8ae 	b.w	8008a2e <__retarget_lock_release_recursive>
 80088d2:	bf00      	nop
 80088d4:	200043dd 	.word	0x200043dd

080088d8 <__sinit_lock_acquire>:
 80088d8:	4801      	ldr	r0, [pc, #4]	; (80088e0 <__sinit_lock_acquire+0x8>)
 80088da:	f000 b8a7 	b.w	8008a2c <__retarget_lock_acquire_recursive>
 80088de:	bf00      	nop
 80088e0:	200043de 	.word	0x200043de

080088e4 <__sinit_lock_release>:
 80088e4:	4801      	ldr	r0, [pc, #4]	; (80088ec <__sinit_lock_release+0x8>)
 80088e6:	f000 b8a2 	b.w	8008a2e <__retarget_lock_release_recursive>
 80088ea:	bf00      	nop
 80088ec:	200043de 	.word	0x200043de

080088f0 <__sinit>:
 80088f0:	b510      	push	{r4, lr}
 80088f2:	4604      	mov	r4, r0
 80088f4:	f7ff fff0 	bl	80088d8 <__sinit_lock_acquire>
 80088f8:	69a3      	ldr	r3, [r4, #24]
 80088fa:	b11b      	cbz	r3, 8008904 <__sinit+0x14>
 80088fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008900:	f7ff bff0 	b.w	80088e4 <__sinit_lock_release>
 8008904:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008908:	6523      	str	r3, [r4, #80]	; 0x50
 800890a:	4b13      	ldr	r3, [pc, #76]	; (8008958 <__sinit+0x68>)
 800890c:	4a13      	ldr	r2, [pc, #76]	; (800895c <__sinit+0x6c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	62a2      	str	r2, [r4, #40]	; 0x28
 8008912:	42a3      	cmp	r3, r4
 8008914:	bf04      	itt	eq
 8008916:	2301      	moveq	r3, #1
 8008918:	61a3      	streq	r3, [r4, #24]
 800891a:	4620      	mov	r0, r4
 800891c:	f000 f820 	bl	8008960 <__sfp>
 8008920:	6060      	str	r0, [r4, #4]
 8008922:	4620      	mov	r0, r4
 8008924:	f000 f81c 	bl	8008960 <__sfp>
 8008928:	60a0      	str	r0, [r4, #8]
 800892a:	4620      	mov	r0, r4
 800892c:	f000 f818 	bl	8008960 <__sfp>
 8008930:	2200      	movs	r2, #0
 8008932:	60e0      	str	r0, [r4, #12]
 8008934:	2104      	movs	r1, #4
 8008936:	6860      	ldr	r0, [r4, #4]
 8008938:	f7ff ff82 	bl	8008840 <std>
 800893c:	68a0      	ldr	r0, [r4, #8]
 800893e:	2201      	movs	r2, #1
 8008940:	2109      	movs	r1, #9
 8008942:	f7ff ff7d 	bl	8008840 <std>
 8008946:	68e0      	ldr	r0, [r4, #12]
 8008948:	2202      	movs	r2, #2
 800894a:	2112      	movs	r1, #18
 800894c:	f7ff ff78 	bl	8008840 <std>
 8008950:	2301      	movs	r3, #1
 8008952:	61a3      	str	r3, [r4, #24]
 8008954:	e7d2      	b.n	80088fc <__sinit+0xc>
 8008956:	bf00      	nop
 8008958:	0800a6f8 	.word	0x0800a6f8
 800895c:	08008889 	.word	0x08008889

08008960 <__sfp>:
 8008960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008962:	4607      	mov	r7, r0
 8008964:	f7ff ffac 	bl	80088c0 <__sfp_lock_acquire>
 8008968:	4b1e      	ldr	r3, [pc, #120]	; (80089e4 <__sfp+0x84>)
 800896a:	681e      	ldr	r6, [r3, #0]
 800896c:	69b3      	ldr	r3, [r6, #24]
 800896e:	b913      	cbnz	r3, 8008976 <__sfp+0x16>
 8008970:	4630      	mov	r0, r6
 8008972:	f7ff ffbd 	bl	80088f0 <__sinit>
 8008976:	3648      	adds	r6, #72	; 0x48
 8008978:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800897c:	3b01      	subs	r3, #1
 800897e:	d503      	bpl.n	8008988 <__sfp+0x28>
 8008980:	6833      	ldr	r3, [r6, #0]
 8008982:	b30b      	cbz	r3, 80089c8 <__sfp+0x68>
 8008984:	6836      	ldr	r6, [r6, #0]
 8008986:	e7f7      	b.n	8008978 <__sfp+0x18>
 8008988:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800898c:	b9d5      	cbnz	r5, 80089c4 <__sfp+0x64>
 800898e:	4b16      	ldr	r3, [pc, #88]	; (80089e8 <__sfp+0x88>)
 8008990:	60e3      	str	r3, [r4, #12]
 8008992:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008996:	6665      	str	r5, [r4, #100]	; 0x64
 8008998:	f000 f847 	bl	8008a2a <__retarget_lock_init_recursive>
 800899c:	f7ff ff96 	bl	80088cc <__sfp_lock_release>
 80089a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80089a8:	6025      	str	r5, [r4, #0]
 80089aa:	61a5      	str	r5, [r4, #24]
 80089ac:	2208      	movs	r2, #8
 80089ae:	4629      	mov	r1, r5
 80089b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089b4:	f7ff fd2c 	bl	8008410 <memset>
 80089b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089c0:	4620      	mov	r0, r4
 80089c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089c4:	3468      	adds	r4, #104	; 0x68
 80089c6:	e7d9      	b.n	800897c <__sfp+0x1c>
 80089c8:	2104      	movs	r1, #4
 80089ca:	4638      	mov	r0, r7
 80089cc:	f7ff ff62 	bl	8008894 <__sfmoreglue>
 80089d0:	4604      	mov	r4, r0
 80089d2:	6030      	str	r0, [r6, #0]
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d1d5      	bne.n	8008984 <__sfp+0x24>
 80089d8:	f7ff ff78 	bl	80088cc <__sfp_lock_release>
 80089dc:	230c      	movs	r3, #12
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	e7ee      	b.n	80089c0 <__sfp+0x60>
 80089e2:	bf00      	nop
 80089e4:	0800a6f8 	.word	0x0800a6f8
 80089e8:	ffff0001 	.word	0xffff0001

080089ec <_fwalk_reent>:
 80089ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f0:	4606      	mov	r6, r0
 80089f2:	4688      	mov	r8, r1
 80089f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089f8:	2700      	movs	r7, #0
 80089fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089fe:	f1b9 0901 	subs.w	r9, r9, #1
 8008a02:	d505      	bpl.n	8008a10 <_fwalk_reent+0x24>
 8008a04:	6824      	ldr	r4, [r4, #0]
 8008a06:	2c00      	cmp	r4, #0
 8008a08:	d1f7      	bne.n	80089fa <_fwalk_reent+0xe>
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a10:	89ab      	ldrh	r3, [r5, #12]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d907      	bls.n	8008a26 <_fwalk_reent+0x3a>
 8008a16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	d003      	beq.n	8008a26 <_fwalk_reent+0x3a>
 8008a1e:	4629      	mov	r1, r5
 8008a20:	4630      	mov	r0, r6
 8008a22:	47c0      	blx	r8
 8008a24:	4307      	orrs	r7, r0
 8008a26:	3568      	adds	r5, #104	; 0x68
 8008a28:	e7e9      	b.n	80089fe <_fwalk_reent+0x12>

08008a2a <__retarget_lock_init_recursive>:
 8008a2a:	4770      	bx	lr

08008a2c <__retarget_lock_acquire_recursive>:
 8008a2c:	4770      	bx	lr

08008a2e <__retarget_lock_release_recursive>:
 8008a2e:	4770      	bx	lr

08008a30 <__swhatbuf_r>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	460e      	mov	r6, r1
 8008a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a38:	2900      	cmp	r1, #0
 8008a3a:	b096      	sub	sp, #88	; 0x58
 8008a3c:	4614      	mov	r4, r2
 8008a3e:	461d      	mov	r5, r3
 8008a40:	da08      	bge.n	8008a54 <__swhatbuf_r+0x24>
 8008a42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	602a      	str	r2, [r5, #0]
 8008a4a:	061a      	lsls	r2, r3, #24
 8008a4c:	d410      	bmi.n	8008a70 <__swhatbuf_r+0x40>
 8008a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a52:	e00e      	b.n	8008a72 <__swhatbuf_r+0x42>
 8008a54:	466a      	mov	r2, sp
 8008a56:	f000 fc95 	bl	8009384 <_fstat_r>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	dbf1      	blt.n	8008a42 <__swhatbuf_r+0x12>
 8008a5e:	9a01      	ldr	r2, [sp, #4]
 8008a60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a68:	425a      	negs	r2, r3
 8008a6a:	415a      	adcs	r2, r3
 8008a6c:	602a      	str	r2, [r5, #0]
 8008a6e:	e7ee      	b.n	8008a4e <__swhatbuf_r+0x1e>
 8008a70:	2340      	movs	r3, #64	; 0x40
 8008a72:	2000      	movs	r0, #0
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	b016      	add	sp, #88	; 0x58
 8008a78:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a7c <__smakebuf_r>:
 8008a7c:	898b      	ldrh	r3, [r1, #12]
 8008a7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a80:	079d      	lsls	r5, r3, #30
 8008a82:	4606      	mov	r6, r0
 8008a84:	460c      	mov	r4, r1
 8008a86:	d507      	bpl.n	8008a98 <__smakebuf_r+0x1c>
 8008a88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	6123      	str	r3, [r4, #16]
 8008a90:	2301      	movs	r3, #1
 8008a92:	6163      	str	r3, [r4, #20]
 8008a94:	b002      	add	sp, #8
 8008a96:	bd70      	pop	{r4, r5, r6, pc}
 8008a98:	ab01      	add	r3, sp, #4
 8008a9a:	466a      	mov	r2, sp
 8008a9c:	f7ff ffc8 	bl	8008a30 <__swhatbuf_r>
 8008aa0:	9900      	ldr	r1, [sp, #0]
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f000 f895 	bl	8008bd4 <_malloc_r>
 8008aaa:	b948      	cbnz	r0, 8008ac0 <__smakebuf_r+0x44>
 8008aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ab0:	059a      	lsls	r2, r3, #22
 8008ab2:	d4ef      	bmi.n	8008a94 <__smakebuf_r+0x18>
 8008ab4:	f023 0303 	bic.w	r3, r3, #3
 8008ab8:	f043 0302 	orr.w	r3, r3, #2
 8008abc:	81a3      	strh	r3, [r4, #12]
 8008abe:	e7e3      	b.n	8008a88 <__smakebuf_r+0xc>
 8008ac0:	4b0d      	ldr	r3, [pc, #52]	; (8008af8 <__smakebuf_r+0x7c>)
 8008ac2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	6020      	str	r0, [r4, #0]
 8008ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008acc:	81a3      	strh	r3, [r4, #12]
 8008ace:	9b00      	ldr	r3, [sp, #0]
 8008ad0:	6163      	str	r3, [r4, #20]
 8008ad2:	9b01      	ldr	r3, [sp, #4]
 8008ad4:	6120      	str	r0, [r4, #16]
 8008ad6:	b15b      	cbz	r3, 8008af0 <__smakebuf_r+0x74>
 8008ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008adc:	4630      	mov	r0, r6
 8008ade:	f000 fc63 	bl	80093a8 <_isatty_r>
 8008ae2:	b128      	cbz	r0, 8008af0 <__smakebuf_r+0x74>
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	f023 0303 	bic.w	r3, r3, #3
 8008aea:	f043 0301 	orr.w	r3, r3, #1
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	89a0      	ldrh	r0, [r4, #12]
 8008af2:	4305      	orrs	r5, r0
 8008af4:	81a5      	strh	r5, [r4, #12]
 8008af6:	e7cd      	b.n	8008a94 <__smakebuf_r+0x18>
 8008af8:	08008889 	.word	0x08008889

08008afc <_free_r>:
 8008afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008afe:	2900      	cmp	r1, #0
 8008b00:	d044      	beq.n	8008b8c <_free_r+0x90>
 8008b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b06:	9001      	str	r0, [sp, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f1a1 0404 	sub.w	r4, r1, #4
 8008b0e:	bfb8      	it	lt
 8008b10:	18e4      	addlt	r4, r4, r3
 8008b12:	f000 fc6b 	bl	80093ec <__malloc_lock>
 8008b16:	4a1e      	ldr	r2, [pc, #120]	; (8008b90 <_free_r+0x94>)
 8008b18:	9801      	ldr	r0, [sp, #4]
 8008b1a:	6813      	ldr	r3, [r2, #0]
 8008b1c:	b933      	cbnz	r3, 8008b2c <_free_r+0x30>
 8008b1e:	6063      	str	r3, [r4, #4]
 8008b20:	6014      	str	r4, [r2, #0]
 8008b22:	b003      	add	sp, #12
 8008b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b28:	f000 bc66 	b.w	80093f8 <__malloc_unlock>
 8008b2c:	42a3      	cmp	r3, r4
 8008b2e:	d908      	bls.n	8008b42 <_free_r+0x46>
 8008b30:	6825      	ldr	r5, [r4, #0]
 8008b32:	1961      	adds	r1, r4, r5
 8008b34:	428b      	cmp	r3, r1
 8008b36:	bf01      	itttt	eq
 8008b38:	6819      	ldreq	r1, [r3, #0]
 8008b3a:	685b      	ldreq	r3, [r3, #4]
 8008b3c:	1949      	addeq	r1, r1, r5
 8008b3e:	6021      	streq	r1, [r4, #0]
 8008b40:	e7ed      	b.n	8008b1e <_free_r+0x22>
 8008b42:	461a      	mov	r2, r3
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	b10b      	cbz	r3, 8008b4c <_free_r+0x50>
 8008b48:	42a3      	cmp	r3, r4
 8008b4a:	d9fa      	bls.n	8008b42 <_free_r+0x46>
 8008b4c:	6811      	ldr	r1, [r2, #0]
 8008b4e:	1855      	adds	r5, r2, r1
 8008b50:	42a5      	cmp	r5, r4
 8008b52:	d10b      	bne.n	8008b6c <_free_r+0x70>
 8008b54:	6824      	ldr	r4, [r4, #0]
 8008b56:	4421      	add	r1, r4
 8008b58:	1854      	adds	r4, r2, r1
 8008b5a:	42a3      	cmp	r3, r4
 8008b5c:	6011      	str	r1, [r2, #0]
 8008b5e:	d1e0      	bne.n	8008b22 <_free_r+0x26>
 8008b60:	681c      	ldr	r4, [r3, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	6053      	str	r3, [r2, #4]
 8008b66:	4421      	add	r1, r4
 8008b68:	6011      	str	r1, [r2, #0]
 8008b6a:	e7da      	b.n	8008b22 <_free_r+0x26>
 8008b6c:	d902      	bls.n	8008b74 <_free_r+0x78>
 8008b6e:	230c      	movs	r3, #12
 8008b70:	6003      	str	r3, [r0, #0]
 8008b72:	e7d6      	b.n	8008b22 <_free_r+0x26>
 8008b74:	6825      	ldr	r5, [r4, #0]
 8008b76:	1961      	adds	r1, r4, r5
 8008b78:	428b      	cmp	r3, r1
 8008b7a:	bf04      	itt	eq
 8008b7c:	6819      	ldreq	r1, [r3, #0]
 8008b7e:	685b      	ldreq	r3, [r3, #4]
 8008b80:	6063      	str	r3, [r4, #4]
 8008b82:	bf04      	itt	eq
 8008b84:	1949      	addeq	r1, r1, r5
 8008b86:	6021      	streq	r1, [r4, #0]
 8008b88:	6054      	str	r4, [r2, #4]
 8008b8a:	e7ca      	b.n	8008b22 <_free_r+0x26>
 8008b8c:	b003      	add	sp, #12
 8008b8e:	bd30      	pop	{r4, r5, pc}
 8008b90:	200043e0 	.word	0x200043e0

08008b94 <sbrk_aligned>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	4e0e      	ldr	r6, [pc, #56]	; (8008bd0 <sbrk_aligned+0x3c>)
 8008b98:	460c      	mov	r4, r1
 8008b9a:	6831      	ldr	r1, [r6, #0]
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	b911      	cbnz	r1, 8008ba6 <sbrk_aligned+0x12>
 8008ba0:	f000 fb7a 	bl	8009298 <_sbrk_r>
 8008ba4:	6030      	str	r0, [r6, #0]
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f000 fb75 	bl	8009298 <_sbrk_r>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	d00a      	beq.n	8008bc8 <sbrk_aligned+0x34>
 8008bb2:	1cc4      	adds	r4, r0, #3
 8008bb4:	f024 0403 	bic.w	r4, r4, #3
 8008bb8:	42a0      	cmp	r0, r4
 8008bba:	d007      	beq.n	8008bcc <sbrk_aligned+0x38>
 8008bbc:	1a21      	subs	r1, r4, r0
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f000 fb6a 	bl	8009298 <_sbrk_r>
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d101      	bne.n	8008bcc <sbrk_aligned+0x38>
 8008bc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008bcc:	4620      	mov	r0, r4
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	200043e4 	.word	0x200043e4

08008bd4 <_malloc_r>:
 8008bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd8:	1ccd      	adds	r5, r1, #3
 8008bda:	f025 0503 	bic.w	r5, r5, #3
 8008bde:	3508      	adds	r5, #8
 8008be0:	2d0c      	cmp	r5, #12
 8008be2:	bf38      	it	cc
 8008be4:	250c      	movcc	r5, #12
 8008be6:	2d00      	cmp	r5, #0
 8008be8:	4607      	mov	r7, r0
 8008bea:	db01      	blt.n	8008bf0 <_malloc_r+0x1c>
 8008bec:	42a9      	cmp	r1, r5
 8008bee:	d905      	bls.n	8008bfc <_malloc_r+0x28>
 8008bf0:	230c      	movs	r3, #12
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	2600      	movs	r6, #0
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bfc:	4e2e      	ldr	r6, [pc, #184]	; (8008cb8 <_malloc_r+0xe4>)
 8008bfe:	f000 fbf5 	bl	80093ec <__malloc_lock>
 8008c02:	6833      	ldr	r3, [r6, #0]
 8008c04:	461c      	mov	r4, r3
 8008c06:	bb34      	cbnz	r4, 8008c56 <_malloc_r+0x82>
 8008c08:	4629      	mov	r1, r5
 8008c0a:	4638      	mov	r0, r7
 8008c0c:	f7ff ffc2 	bl	8008b94 <sbrk_aligned>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	4604      	mov	r4, r0
 8008c14:	d14d      	bne.n	8008cb2 <_malloc_r+0xde>
 8008c16:	6834      	ldr	r4, [r6, #0]
 8008c18:	4626      	mov	r6, r4
 8008c1a:	2e00      	cmp	r6, #0
 8008c1c:	d140      	bne.n	8008ca0 <_malloc_r+0xcc>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	4631      	mov	r1, r6
 8008c22:	4638      	mov	r0, r7
 8008c24:	eb04 0803 	add.w	r8, r4, r3
 8008c28:	f000 fb36 	bl	8009298 <_sbrk_r>
 8008c2c:	4580      	cmp	r8, r0
 8008c2e:	d13a      	bne.n	8008ca6 <_malloc_r+0xd2>
 8008c30:	6821      	ldr	r1, [r4, #0]
 8008c32:	3503      	adds	r5, #3
 8008c34:	1a6d      	subs	r5, r5, r1
 8008c36:	f025 0503 	bic.w	r5, r5, #3
 8008c3a:	3508      	adds	r5, #8
 8008c3c:	2d0c      	cmp	r5, #12
 8008c3e:	bf38      	it	cc
 8008c40:	250c      	movcc	r5, #12
 8008c42:	4629      	mov	r1, r5
 8008c44:	4638      	mov	r0, r7
 8008c46:	f7ff ffa5 	bl	8008b94 <sbrk_aligned>
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d02b      	beq.n	8008ca6 <_malloc_r+0xd2>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	442b      	add	r3, r5
 8008c52:	6023      	str	r3, [r4, #0]
 8008c54:	e00e      	b.n	8008c74 <_malloc_r+0xa0>
 8008c56:	6822      	ldr	r2, [r4, #0]
 8008c58:	1b52      	subs	r2, r2, r5
 8008c5a:	d41e      	bmi.n	8008c9a <_malloc_r+0xc6>
 8008c5c:	2a0b      	cmp	r2, #11
 8008c5e:	d916      	bls.n	8008c8e <_malloc_r+0xba>
 8008c60:	1961      	adds	r1, r4, r5
 8008c62:	42a3      	cmp	r3, r4
 8008c64:	6025      	str	r5, [r4, #0]
 8008c66:	bf18      	it	ne
 8008c68:	6059      	strne	r1, [r3, #4]
 8008c6a:	6863      	ldr	r3, [r4, #4]
 8008c6c:	bf08      	it	eq
 8008c6e:	6031      	streq	r1, [r6, #0]
 8008c70:	5162      	str	r2, [r4, r5]
 8008c72:	604b      	str	r3, [r1, #4]
 8008c74:	4638      	mov	r0, r7
 8008c76:	f104 060b 	add.w	r6, r4, #11
 8008c7a:	f000 fbbd 	bl	80093f8 <__malloc_unlock>
 8008c7e:	f026 0607 	bic.w	r6, r6, #7
 8008c82:	1d23      	adds	r3, r4, #4
 8008c84:	1af2      	subs	r2, r6, r3
 8008c86:	d0b6      	beq.n	8008bf6 <_malloc_r+0x22>
 8008c88:	1b9b      	subs	r3, r3, r6
 8008c8a:	50a3      	str	r3, [r4, r2]
 8008c8c:	e7b3      	b.n	8008bf6 <_malloc_r+0x22>
 8008c8e:	6862      	ldr	r2, [r4, #4]
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	bf0c      	ite	eq
 8008c94:	6032      	streq	r2, [r6, #0]
 8008c96:	605a      	strne	r2, [r3, #4]
 8008c98:	e7ec      	b.n	8008c74 <_malloc_r+0xa0>
 8008c9a:	4623      	mov	r3, r4
 8008c9c:	6864      	ldr	r4, [r4, #4]
 8008c9e:	e7b2      	b.n	8008c06 <_malloc_r+0x32>
 8008ca0:	4634      	mov	r4, r6
 8008ca2:	6876      	ldr	r6, [r6, #4]
 8008ca4:	e7b9      	b.n	8008c1a <_malloc_r+0x46>
 8008ca6:	230c      	movs	r3, #12
 8008ca8:	603b      	str	r3, [r7, #0]
 8008caa:	4638      	mov	r0, r7
 8008cac:	f000 fba4 	bl	80093f8 <__malloc_unlock>
 8008cb0:	e7a1      	b.n	8008bf6 <_malloc_r+0x22>
 8008cb2:	6025      	str	r5, [r4, #0]
 8008cb4:	e7de      	b.n	8008c74 <_malloc_r+0xa0>
 8008cb6:	bf00      	nop
 8008cb8:	200043e0 	.word	0x200043e0

08008cbc <__sfputc_r>:
 8008cbc:	6893      	ldr	r3, [r2, #8]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	b410      	push	{r4}
 8008cc4:	6093      	str	r3, [r2, #8]
 8008cc6:	da08      	bge.n	8008cda <__sfputc_r+0x1e>
 8008cc8:	6994      	ldr	r4, [r2, #24]
 8008cca:	42a3      	cmp	r3, r4
 8008ccc:	db01      	blt.n	8008cd2 <__sfputc_r+0x16>
 8008cce:	290a      	cmp	r1, #10
 8008cd0:	d103      	bne.n	8008cda <__sfputc_r+0x1e>
 8008cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cd6:	f7ff bc31 	b.w	800853c <__swbuf_r>
 8008cda:	6813      	ldr	r3, [r2, #0]
 8008cdc:	1c58      	adds	r0, r3, #1
 8008cde:	6010      	str	r0, [r2, #0]
 8008ce0:	7019      	strb	r1, [r3, #0]
 8008ce2:	4608      	mov	r0, r1
 8008ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <__sfputs_r>:
 8008cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cec:	4606      	mov	r6, r0
 8008cee:	460f      	mov	r7, r1
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	18d5      	adds	r5, r2, r3
 8008cf4:	42ac      	cmp	r4, r5
 8008cf6:	d101      	bne.n	8008cfc <__sfputs_r+0x12>
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	e007      	b.n	8008d0c <__sfputs_r+0x22>
 8008cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d00:	463a      	mov	r2, r7
 8008d02:	4630      	mov	r0, r6
 8008d04:	f7ff ffda 	bl	8008cbc <__sfputc_r>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d1f3      	bne.n	8008cf4 <__sfputs_r+0xa>
 8008d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d10 <_vfiprintf_r>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	460d      	mov	r5, r1
 8008d16:	b09d      	sub	sp, #116	; 0x74
 8008d18:	4614      	mov	r4, r2
 8008d1a:	4698      	mov	r8, r3
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	b118      	cbz	r0, 8008d28 <_vfiprintf_r+0x18>
 8008d20:	6983      	ldr	r3, [r0, #24]
 8008d22:	b90b      	cbnz	r3, 8008d28 <_vfiprintf_r+0x18>
 8008d24:	f7ff fde4 	bl	80088f0 <__sinit>
 8008d28:	4b89      	ldr	r3, [pc, #548]	; (8008f50 <_vfiprintf_r+0x240>)
 8008d2a:	429d      	cmp	r5, r3
 8008d2c:	d11b      	bne.n	8008d66 <_vfiprintf_r+0x56>
 8008d2e:	6875      	ldr	r5, [r6, #4]
 8008d30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d32:	07d9      	lsls	r1, r3, #31
 8008d34:	d405      	bmi.n	8008d42 <_vfiprintf_r+0x32>
 8008d36:	89ab      	ldrh	r3, [r5, #12]
 8008d38:	059a      	lsls	r2, r3, #22
 8008d3a:	d402      	bmi.n	8008d42 <_vfiprintf_r+0x32>
 8008d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d3e:	f7ff fe75 	bl	8008a2c <__retarget_lock_acquire_recursive>
 8008d42:	89ab      	ldrh	r3, [r5, #12]
 8008d44:	071b      	lsls	r3, r3, #28
 8008d46:	d501      	bpl.n	8008d4c <_vfiprintf_r+0x3c>
 8008d48:	692b      	ldr	r3, [r5, #16]
 8008d4a:	b9eb      	cbnz	r3, 8008d88 <_vfiprintf_r+0x78>
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f7ff fc46 	bl	80085e0 <__swsetup_r>
 8008d54:	b1c0      	cbz	r0, 8008d88 <_vfiprintf_r+0x78>
 8008d56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d58:	07dc      	lsls	r4, r3, #31
 8008d5a:	d50e      	bpl.n	8008d7a <_vfiprintf_r+0x6a>
 8008d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d60:	b01d      	add	sp, #116	; 0x74
 8008d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d66:	4b7b      	ldr	r3, [pc, #492]	; (8008f54 <_vfiprintf_r+0x244>)
 8008d68:	429d      	cmp	r5, r3
 8008d6a:	d101      	bne.n	8008d70 <_vfiprintf_r+0x60>
 8008d6c:	68b5      	ldr	r5, [r6, #8]
 8008d6e:	e7df      	b.n	8008d30 <_vfiprintf_r+0x20>
 8008d70:	4b79      	ldr	r3, [pc, #484]	; (8008f58 <_vfiprintf_r+0x248>)
 8008d72:	429d      	cmp	r5, r3
 8008d74:	bf08      	it	eq
 8008d76:	68f5      	ldreq	r5, [r6, #12]
 8008d78:	e7da      	b.n	8008d30 <_vfiprintf_r+0x20>
 8008d7a:	89ab      	ldrh	r3, [r5, #12]
 8008d7c:	0598      	lsls	r0, r3, #22
 8008d7e:	d4ed      	bmi.n	8008d5c <_vfiprintf_r+0x4c>
 8008d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d82:	f7ff fe54 	bl	8008a2e <__retarget_lock_release_recursive>
 8008d86:	e7e9      	b.n	8008d5c <_vfiprintf_r+0x4c>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d8c:	2320      	movs	r3, #32
 8008d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d96:	2330      	movs	r3, #48	; 0x30
 8008d98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f5c <_vfiprintf_r+0x24c>
 8008d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008da0:	f04f 0901 	mov.w	r9, #1
 8008da4:	4623      	mov	r3, r4
 8008da6:	469a      	mov	sl, r3
 8008da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dac:	b10a      	cbz	r2, 8008db2 <_vfiprintf_r+0xa2>
 8008dae:	2a25      	cmp	r2, #37	; 0x25
 8008db0:	d1f9      	bne.n	8008da6 <_vfiprintf_r+0x96>
 8008db2:	ebba 0b04 	subs.w	fp, sl, r4
 8008db6:	d00b      	beq.n	8008dd0 <_vfiprintf_r+0xc0>
 8008db8:	465b      	mov	r3, fp
 8008dba:	4622      	mov	r2, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f7ff ff93 	bl	8008cea <__sfputs_r>
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	f000 80aa 	beq.w	8008f1e <_vfiprintf_r+0x20e>
 8008dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dcc:	445a      	add	r2, fp
 8008dce:	9209      	str	r2, [sp, #36]	; 0x24
 8008dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 80a2 	beq.w	8008f1e <_vfiprintf_r+0x20e>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008de4:	f10a 0a01 	add.w	sl, sl, #1
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	9307      	str	r3, [sp, #28]
 8008dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008df0:	931a      	str	r3, [sp, #104]	; 0x68
 8008df2:	4654      	mov	r4, sl
 8008df4:	2205      	movs	r2, #5
 8008df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfa:	4858      	ldr	r0, [pc, #352]	; (8008f5c <_vfiprintf_r+0x24c>)
 8008dfc:	f7f7 f9e8 	bl	80001d0 <memchr>
 8008e00:	9a04      	ldr	r2, [sp, #16]
 8008e02:	b9d8      	cbnz	r0, 8008e3c <_vfiprintf_r+0x12c>
 8008e04:	06d1      	lsls	r1, r2, #27
 8008e06:	bf44      	itt	mi
 8008e08:	2320      	movmi	r3, #32
 8008e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e0e:	0713      	lsls	r3, r2, #28
 8008e10:	bf44      	itt	mi
 8008e12:	232b      	movmi	r3, #43	; 0x2b
 8008e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e18:	f89a 3000 	ldrb.w	r3, [sl]
 8008e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e1e:	d015      	beq.n	8008e4c <_vfiprintf_r+0x13c>
 8008e20:	9a07      	ldr	r2, [sp, #28]
 8008e22:	4654      	mov	r4, sl
 8008e24:	2000      	movs	r0, #0
 8008e26:	f04f 0c0a 	mov.w	ip, #10
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e30:	3b30      	subs	r3, #48	; 0x30
 8008e32:	2b09      	cmp	r3, #9
 8008e34:	d94e      	bls.n	8008ed4 <_vfiprintf_r+0x1c4>
 8008e36:	b1b0      	cbz	r0, 8008e66 <_vfiprintf_r+0x156>
 8008e38:	9207      	str	r2, [sp, #28]
 8008e3a:	e014      	b.n	8008e66 <_vfiprintf_r+0x156>
 8008e3c:	eba0 0308 	sub.w	r3, r0, r8
 8008e40:	fa09 f303 	lsl.w	r3, r9, r3
 8008e44:	4313      	orrs	r3, r2
 8008e46:	9304      	str	r3, [sp, #16]
 8008e48:	46a2      	mov	sl, r4
 8008e4a:	e7d2      	b.n	8008df2 <_vfiprintf_r+0xe2>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	1d19      	adds	r1, r3, #4
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	9103      	str	r1, [sp, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bfbb      	ittet	lt
 8008e58:	425b      	neglt	r3, r3
 8008e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e5e:	9307      	strge	r3, [sp, #28]
 8008e60:	9307      	strlt	r3, [sp, #28]
 8008e62:	bfb8      	it	lt
 8008e64:	9204      	strlt	r2, [sp, #16]
 8008e66:	7823      	ldrb	r3, [r4, #0]
 8008e68:	2b2e      	cmp	r3, #46	; 0x2e
 8008e6a:	d10c      	bne.n	8008e86 <_vfiprintf_r+0x176>
 8008e6c:	7863      	ldrb	r3, [r4, #1]
 8008e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e70:	d135      	bne.n	8008ede <_vfiprintf_r+0x1ce>
 8008e72:	9b03      	ldr	r3, [sp, #12]
 8008e74:	1d1a      	adds	r2, r3, #4
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	9203      	str	r2, [sp, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	bfb8      	it	lt
 8008e7e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e82:	3402      	adds	r4, #2
 8008e84:	9305      	str	r3, [sp, #20]
 8008e86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f6c <_vfiprintf_r+0x25c>
 8008e8a:	7821      	ldrb	r1, [r4, #0]
 8008e8c:	2203      	movs	r2, #3
 8008e8e:	4650      	mov	r0, sl
 8008e90:	f7f7 f99e 	bl	80001d0 <memchr>
 8008e94:	b140      	cbz	r0, 8008ea8 <_vfiprintf_r+0x198>
 8008e96:	2340      	movs	r3, #64	; 0x40
 8008e98:	eba0 000a 	sub.w	r0, r0, sl
 8008e9c:	fa03 f000 	lsl.w	r0, r3, r0
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	4303      	orrs	r3, r0
 8008ea4:	3401      	adds	r4, #1
 8008ea6:	9304      	str	r3, [sp, #16]
 8008ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eac:	482c      	ldr	r0, [pc, #176]	; (8008f60 <_vfiprintf_r+0x250>)
 8008eae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eb2:	2206      	movs	r2, #6
 8008eb4:	f7f7 f98c 	bl	80001d0 <memchr>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d03f      	beq.n	8008f3c <_vfiprintf_r+0x22c>
 8008ebc:	4b29      	ldr	r3, [pc, #164]	; (8008f64 <_vfiprintf_r+0x254>)
 8008ebe:	bb1b      	cbnz	r3, 8008f08 <_vfiprintf_r+0x1f8>
 8008ec0:	9b03      	ldr	r3, [sp, #12]
 8008ec2:	3307      	adds	r3, #7
 8008ec4:	f023 0307 	bic.w	r3, r3, #7
 8008ec8:	3308      	adds	r3, #8
 8008eca:	9303      	str	r3, [sp, #12]
 8008ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ece:	443b      	add	r3, r7
 8008ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed2:	e767      	b.n	8008da4 <_vfiprintf_r+0x94>
 8008ed4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ed8:	460c      	mov	r4, r1
 8008eda:	2001      	movs	r0, #1
 8008edc:	e7a5      	b.n	8008e2a <_vfiprintf_r+0x11a>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	3401      	adds	r4, #1
 8008ee2:	9305      	str	r3, [sp, #20]
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	f04f 0c0a 	mov.w	ip, #10
 8008eea:	4620      	mov	r0, r4
 8008eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ef0:	3a30      	subs	r2, #48	; 0x30
 8008ef2:	2a09      	cmp	r2, #9
 8008ef4:	d903      	bls.n	8008efe <_vfiprintf_r+0x1ee>
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0c5      	beq.n	8008e86 <_vfiprintf_r+0x176>
 8008efa:	9105      	str	r1, [sp, #20]
 8008efc:	e7c3      	b.n	8008e86 <_vfiprintf_r+0x176>
 8008efe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f02:	4604      	mov	r4, r0
 8008f04:	2301      	movs	r3, #1
 8008f06:	e7f0      	b.n	8008eea <_vfiprintf_r+0x1da>
 8008f08:	ab03      	add	r3, sp, #12
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	462a      	mov	r2, r5
 8008f0e:	4b16      	ldr	r3, [pc, #88]	; (8008f68 <_vfiprintf_r+0x258>)
 8008f10:	a904      	add	r1, sp, #16
 8008f12:	4630      	mov	r0, r6
 8008f14:	f3af 8000 	nop.w
 8008f18:	4607      	mov	r7, r0
 8008f1a:	1c78      	adds	r0, r7, #1
 8008f1c:	d1d6      	bne.n	8008ecc <_vfiprintf_r+0x1bc>
 8008f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f20:	07d9      	lsls	r1, r3, #31
 8008f22:	d405      	bmi.n	8008f30 <_vfiprintf_r+0x220>
 8008f24:	89ab      	ldrh	r3, [r5, #12]
 8008f26:	059a      	lsls	r2, r3, #22
 8008f28:	d402      	bmi.n	8008f30 <_vfiprintf_r+0x220>
 8008f2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f2c:	f7ff fd7f 	bl	8008a2e <__retarget_lock_release_recursive>
 8008f30:	89ab      	ldrh	r3, [r5, #12]
 8008f32:	065b      	lsls	r3, r3, #25
 8008f34:	f53f af12 	bmi.w	8008d5c <_vfiprintf_r+0x4c>
 8008f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f3a:	e711      	b.n	8008d60 <_vfiprintf_r+0x50>
 8008f3c:	ab03      	add	r3, sp, #12
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	462a      	mov	r2, r5
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <_vfiprintf_r+0x258>)
 8008f44:	a904      	add	r1, sp, #16
 8008f46:	4630      	mov	r0, r6
 8008f48:	f000 f880 	bl	800904c <_printf_i>
 8008f4c:	e7e4      	b.n	8008f18 <_vfiprintf_r+0x208>
 8008f4e:	bf00      	nop
 8008f50:	0800a71c 	.word	0x0800a71c
 8008f54:	0800a73c 	.word	0x0800a73c
 8008f58:	0800a6fc 	.word	0x0800a6fc
 8008f5c:	0800a75c 	.word	0x0800a75c
 8008f60:	0800a766 	.word	0x0800a766
 8008f64:	00000000 	.word	0x00000000
 8008f68:	08008ceb 	.word	0x08008ceb
 8008f6c:	0800a762 	.word	0x0800a762

08008f70 <_printf_common>:
 8008f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f74:	4616      	mov	r6, r2
 8008f76:	4699      	mov	r9, r3
 8008f78:	688a      	ldr	r2, [r1, #8]
 8008f7a:	690b      	ldr	r3, [r1, #16]
 8008f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f80:	4293      	cmp	r3, r2
 8008f82:	bfb8      	it	lt
 8008f84:	4613      	movlt	r3, r2
 8008f86:	6033      	str	r3, [r6, #0]
 8008f88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f8c:	4607      	mov	r7, r0
 8008f8e:	460c      	mov	r4, r1
 8008f90:	b10a      	cbz	r2, 8008f96 <_printf_common+0x26>
 8008f92:	3301      	adds	r3, #1
 8008f94:	6033      	str	r3, [r6, #0]
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	0699      	lsls	r1, r3, #26
 8008f9a:	bf42      	ittt	mi
 8008f9c:	6833      	ldrmi	r3, [r6, #0]
 8008f9e:	3302      	addmi	r3, #2
 8008fa0:	6033      	strmi	r3, [r6, #0]
 8008fa2:	6825      	ldr	r5, [r4, #0]
 8008fa4:	f015 0506 	ands.w	r5, r5, #6
 8008fa8:	d106      	bne.n	8008fb8 <_printf_common+0x48>
 8008faa:	f104 0a19 	add.w	sl, r4, #25
 8008fae:	68e3      	ldr	r3, [r4, #12]
 8008fb0:	6832      	ldr	r2, [r6, #0]
 8008fb2:	1a9b      	subs	r3, r3, r2
 8008fb4:	42ab      	cmp	r3, r5
 8008fb6:	dc26      	bgt.n	8009006 <_printf_common+0x96>
 8008fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fbc:	1e13      	subs	r3, r2, #0
 8008fbe:	6822      	ldr	r2, [r4, #0]
 8008fc0:	bf18      	it	ne
 8008fc2:	2301      	movne	r3, #1
 8008fc4:	0692      	lsls	r2, r2, #26
 8008fc6:	d42b      	bmi.n	8009020 <_printf_common+0xb0>
 8008fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fcc:	4649      	mov	r1, r9
 8008fce:	4638      	mov	r0, r7
 8008fd0:	47c0      	blx	r8
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	d01e      	beq.n	8009014 <_printf_common+0xa4>
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	68e5      	ldr	r5, [r4, #12]
 8008fda:	6832      	ldr	r2, [r6, #0]
 8008fdc:	f003 0306 	and.w	r3, r3, #6
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	bf08      	it	eq
 8008fe4:	1aad      	subeq	r5, r5, r2
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	6922      	ldr	r2, [r4, #16]
 8008fea:	bf0c      	ite	eq
 8008fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ff0:	2500      	movne	r5, #0
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	bfc4      	itt	gt
 8008ff6:	1a9b      	subgt	r3, r3, r2
 8008ff8:	18ed      	addgt	r5, r5, r3
 8008ffa:	2600      	movs	r6, #0
 8008ffc:	341a      	adds	r4, #26
 8008ffe:	42b5      	cmp	r5, r6
 8009000:	d11a      	bne.n	8009038 <_printf_common+0xc8>
 8009002:	2000      	movs	r0, #0
 8009004:	e008      	b.n	8009018 <_printf_common+0xa8>
 8009006:	2301      	movs	r3, #1
 8009008:	4652      	mov	r2, sl
 800900a:	4649      	mov	r1, r9
 800900c:	4638      	mov	r0, r7
 800900e:	47c0      	blx	r8
 8009010:	3001      	adds	r0, #1
 8009012:	d103      	bne.n	800901c <_printf_common+0xac>
 8009014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800901c:	3501      	adds	r5, #1
 800901e:	e7c6      	b.n	8008fae <_printf_common+0x3e>
 8009020:	18e1      	adds	r1, r4, r3
 8009022:	1c5a      	adds	r2, r3, #1
 8009024:	2030      	movs	r0, #48	; 0x30
 8009026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800902a:	4422      	add	r2, r4
 800902c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009034:	3302      	adds	r3, #2
 8009036:	e7c7      	b.n	8008fc8 <_printf_common+0x58>
 8009038:	2301      	movs	r3, #1
 800903a:	4622      	mov	r2, r4
 800903c:	4649      	mov	r1, r9
 800903e:	4638      	mov	r0, r7
 8009040:	47c0      	blx	r8
 8009042:	3001      	adds	r0, #1
 8009044:	d0e6      	beq.n	8009014 <_printf_common+0xa4>
 8009046:	3601      	adds	r6, #1
 8009048:	e7d9      	b.n	8008ffe <_printf_common+0x8e>
	...

0800904c <_printf_i>:
 800904c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009050:	7e0f      	ldrb	r7, [r1, #24]
 8009052:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009054:	2f78      	cmp	r7, #120	; 0x78
 8009056:	4691      	mov	r9, r2
 8009058:	4680      	mov	r8, r0
 800905a:	460c      	mov	r4, r1
 800905c:	469a      	mov	sl, r3
 800905e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009062:	d807      	bhi.n	8009074 <_printf_i+0x28>
 8009064:	2f62      	cmp	r7, #98	; 0x62
 8009066:	d80a      	bhi.n	800907e <_printf_i+0x32>
 8009068:	2f00      	cmp	r7, #0
 800906a:	f000 80d8 	beq.w	800921e <_printf_i+0x1d2>
 800906e:	2f58      	cmp	r7, #88	; 0x58
 8009070:	f000 80a3 	beq.w	80091ba <_printf_i+0x16e>
 8009074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800907c:	e03a      	b.n	80090f4 <_printf_i+0xa8>
 800907e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009082:	2b15      	cmp	r3, #21
 8009084:	d8f6      	bhi.n	8009074 <_printf_i+0x28>
 8009086:	a101      	add	r1, pc, #4	; (adr r1, 800908c <_printf_i+0x40>)
 8009088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800908c:	080090e5 	.word	0x080090e5
 8009090:	080090f9 	.word	0x080090f9
 8009094:	08009075 	.word	0x08009075
 8009098:	08009075 	.word	0x08009075
 800909c:	08009075 	.word	0x08009075
 80090a0:	08009075 	.word	0x08009075
 80090a4:	080090f9 	.word	0x080090f9
 80090a8:	08009075 	.word	0x08009075
 80090ac:	08009075 	.word	0x08009075
 80090b0:	08009075 	.word	0x08009075
 80090b4:	08009075 	.word	0x08009075
 80090b8:	08009205 	.word	0x08009205
 80090bc:	08009129 	.word	0x08009129
 80090c0:	080091e7 	.word	0x080091e7
 80090c4:	08009075 	.word	0x08009075
 80090c8:	08009075 	.word	0x08009075
 80090cc:	08009227 	.word	0x08009227
 80090d0:	08009075 	.word	0x08009075
 80090d4:	08009129 	.word	0x08009129
 80090d8:	08009075 	.word	0x08009075
 80090dc:	08009075 	.word	0x08009075
 80090e0:	080091ef 	.word	0x080091ef
 80090e4:	682b      	ldr	r3, [r5, #0]
 80090e6:	1d1a      	adds	r2, r3, #4
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	602a      	str	r2, [r5, #0]
 80090ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090f4:	2301      	movs	r3, #1
 80090f6:	e0a3      	b.n	8009240 <_printf_i+0x1f4>
 80090f8:	6820      	ldr	r0, [r4, #0]
 80090fa:	6829      	ldr	r1, [r5, #0]
 80090fc:	0606      	lsls	r6, r0, #24
 80090fe:	f101 0304 	add.w	r3, r1, #4
 8009102:	d50a      	bpl.n	800911a <_printf_i+0xce>
 8009104:	680e      	ldr	r6, [r1, #0]
 8009106:	602b      	str	r3, [r5, #0]
 8009108:	2e00      	cmp	r6, #0
 800910a:	da03      	bge.n	8009114 <_printf_i+0xc8>
 800910c:	232d      	movs	r3, #45	; 0x2d
 800910e:	4276      	negs	r6, r6
 8009110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009114:	485e      	ldr	r0, [pc, #376]	; (8009290 <_printf_i+0x244>)
 8009116:	230a      	movs	r3, #10
 8009118:	e019      	b.n	800914e <_printf_i+0x102>
 800911a:	680e      	ldr	r6, [r1, #0]
 800911c:	602b      	str	r3, [r5, #0]
 800911e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009122:	bf18      	it	ne
 8009124:	b236      	sxthne	r6, r6
 8009126:	e7ef      	b.n	8009108 <_printf_i+0xbc>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	6820      	ldr	r0, [r4, #0]
 800912c:	1d19      	adds	r1, r3, #4
 800912e:	6029      	str	r1, [r5, #0]
 8009130:	0601      	lsls	r1, r0, #24
 8009132:	d501      	bpl.n	8009138 <_printf_i+0xec>
 8009134:	681e      	ldr	r6, [r3, #0]
 8009136:	e002      	b.n	800913e <_printf_i+0xf2>
 8009138:	0646      	lsls	r6, r0, #25
 800913a:	d5fb      	bpl.n	8009134 <_printf_i+0xe8>
 800913c:	881e      	ldrh	r6, [r3, #0]
 800913e:	4854      	ldr	r0, [pc, #336]	; (8009290 <_printf_i+0x244>)
 8009140:	2f6f      	cmp	r7, #111	; 0x6f
 8009142:	bf0c      	ite	eq
 8009144:	2308      	moveq	r3, #8
 8009146:	230a      	movne	r3, #10
 8009148:	2100      	movs	r1, #0
 800914a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800914e:	6865      	ldr	r5, [r4, #4]
 8009150:	60a5      	str	r5, [r4, #8]
 8009152:	2d00      	cmp	r5, #0
 8009154:	bfa2      	ittt	ge
 8009156:	6821      	ldrge	r1, [r4, #0]
 8009158:	f021 0104 	bicge.w	r1, r1, #4
 800915c:	6021      	strge	r1, [r4, #0]
 800915e:	b90e      	cbnz	r6, 8009164 <_printf_i+0x118>
 8009160:	2d00      	cmp	r5, #0
 8009162:	d04d      	beq.n	8009200 <_printf_i+0x1b4>
 8009164:	4615      	mov	r5, r2
 8009166:	fbb6 f1f3 	udiv	r1, r6, r3
 800916a:	fb03 6711 	mls	r7, r3, r1, r6
 800916e:	5dc7      	ldrb	r7, [r0, r7]
 8009170:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009174:	4637      	mov	r7, r6
 8009176:	42bb      	cmp	r3, r7
 8009178:	460e      	mov	r6, r1
 800917a:	d9f4      	bls.n	8009166 <_printf_i+0x11a>
 800917c:	2b08      	cmp	r3, #8
 800917e:	d10b      	bne.n	8009198 <_printf_i+0x14c>
 8009180:	6823      	ldr	r3, [r4, #0]
 8009182:	07de      	lsls	r6, r3, #31
 8009184:	d508      	bpl.n	8009198 <_printf_i+0x14c>
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	6861      	ldr	r1, [r4, #4]
 800918a:	4299      	cmp	r1, r3
 800918c:	bfde      	ittt	le
 800918e:	2330      	movle	r3, #48	; 0x30
 8009190:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009194:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009198:	1b52      	subs	r2, r2, r5
 800919a:	6122      	str	r2, [r4, #16]
 800919c:	f8cd a000 	str.w	sl, [sp]
 80091a0:	464b      	mov	r3, r9
 80091a2:	aa03      	add	r2, sp, #12
 80091a4:	4621      	mov	r1, r4
 80091a6:	4640      	mov	r0, r8
 80091a8:	f7ff fee2 	bl	8008f70 <_printf_common>
 80091ac:	3001      	adds	r0, #1
 80091ae:	d14c      	bne.n	800924a <_printf_i+0x1fe>
 80091b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091b4:	b004      	add	sp, #16
 80091b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ba:	4835      	ldr	r0, [pc, #212]	; (8009290 <_printf_i+0x244>)
 80091bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80091c0:	6829      	ldr	r1, [r5, #0]
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80091c8:	6029      	str	r1, [r5, #0]
 80091ca:	061d      	lsls	r5, r3, #24
 80091cc:	d514      	bpl.n	80091f8 <_printf_i+0x1ac>
 80091ce:	07df      	lsls	r7, r3, #31
 80091d0:	bf44      	itt	mi
 80091d2:	f043 0320 	orrmi.w	r3, r3, #32
 80091d6:	6023      	strmi	r3, [r4, #0]
 80091d8:	b91e      	cbnz	r6, 80091e2 <_printf_i+0x196>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	f023 0320 	bic.w	r3, r3, #32
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	2310      	movs	r3, #16
 80091e4:	e7b0      	b.n	8009148 <_printf_i+0xfc>
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	f043 0320 	orr.w	r3, r3, #32
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	2378      	movs	r3, #120	; 0x78
 80091f0:	4828      	ldr	r0, [pc, #160]	; (8009294 <_printf_i+0x248>)
 80091f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091f6:	e7e3      	b.n	80091c0 <_printf_i+0x174>
 80091f8:	0659      	lsls	r1, r3, #25
 80091fa:	bf48      	it	mi
 80091fc:	b2b6      	uxthmi	r6, r6
 80091fe:	e7e6      	b.n	80091ce <_printf_i+0x182>
 8009200:	4615      	mov	r5, r2
 8009202:	e7bb      	b.n	800917c <_printf_i+0x130>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	6826      	ldr	r6, [r4, #0]
 8009208:	6961      	ldr	r1, [r4, #20]
 800920a:	1d18      	adds	r0, r3, #4
 800920c:	6028      	str	r0, [r5, #0]
 800920e:	0635      	lsls	r5, r6, #24
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	d501      	bpl.n	8009218 <_printf_i+0x1cc>
 8009214:	6019      	str	r1, [r3, #0]
 8009216:	e002      	b.n	800921e <_printf_i+0x1d2>
 8009218:	0670      	lsls	r0, r6, #25
 800921a:	d5fb      	bpl.n	8009214 <_printf_i+0x1c8>
 800921c:	8019      	strh	r1, [r3, #0]
 800921e:	2300      	movs	r3, #0
 8009220:	6123      	str	r3, [r4, #16]
 8009222:	4615      	mov	r5, r2
 8009224:	e7ba      	b.n	800919c <_printf_i+0x150>
 8009226:	682b      	ldr	r3, [r5, #0]
 8009228:	1d1a      	adds	r2, r3, #4
 800922a:	602a      	str	r2, [r5, #0]
 800922c:	681d      	ldr	r5, [r3, #0]
 800922e:	6862      	ldr	r2, [r4, #4]
 8009230:	2100      	movs	r1, #0
 8009232:	4628      	mov	r0, r5
 8009234:	f7f6 ffcc 	bl	80001d0 <memchr>
 8009238:	b108      	cbz	r0, 800923e <_printf_i+0x1f2>
 800923a:	1b40      	subs	r0, r0, r5
 800923c:	6060      	str	r0, [r4, #4]
 800923e:	6863      	ldr	r3, [r4, #4]
 8009240:	6123      	str	r3, [r4, #16]
 8009242:	2300      	movs	r3, #0
 8009244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009248:	e7a8      	b.n	800919c <_printf_i+0x150>
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	462a      	mov	r2, r5
 800924e:	4649      	mov	r1, r9
 8009250:	4640      	mov	r0, r8
 8009252:	47d0      	blx	sl
 8009254:	3001      	adds	r0, #1
 8009256:	d0ab      	beq.n	80091b0 <_printf_i+0x164>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	079b      	lsls	r3, r3, #30
 800925c:	d413      	bmi.n	8009286 <_printf_i+0x23a>
 800925e:	68e0      	ldr	r0, [r4, #12]
 8009260:	9b03      	ldr	r3, [sp, #12]
 8009262:	4298      	cmp	r0, r3
 8009264:	bfb8      	it	lt
 8009266:	4618      	movlt	r0, r3
 8009268:	e7a4      	b.n	80091b4 <_printf_i+0x168>
 800926a:	2301      	movs	r3, #1
 800926c:	4632      	mov	r2, r6
 800926e:	4649      	mov	r1, r9
 8009270:	4640      	mov	r0, r8
 8009272:	47d0      	blx	sl
 8009274:	3001      	adds	r0, #1
 8009276:	d09b      	beq.n	80091b0 <_printf_i+0x164>
 8009278:	3501      	adds	r5, #1
 800927a:	68e3      	ldr	r3, [r4, #12]
 800927c:	9903      	ldr	r1, [sp, #12]
 800927e:	1a5b      	subs	r3, r3, r1
 8009280:	42ab      	cmp	r3, r5
 8009282:	dcf2      	bgt.n	800926a <_printf_i+0x21e>
 8009284:	e7eb      	b.n	800925e <_printf_i+0x212>
 8009286:	2500      	movs	r5, #0
 8009288:	f104 0619 	add.w	r6, r4, #25
 800928c:	e7f5      	b.n	800927a <_printf_i+0x22e>
 800928e:	bf00      	nop
 8009290:	0800a76d 	.word	0x0800a76d
 8009294:	0800a77e 	.word	0x0800a77e

08009298 <_sbrk_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d06      	ldr	r5, [pc, #24]	; (80092b4 <_sbrk_r+0x1c>)
 800929c:	2300      	movs	r3, #0
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	f7f9 fbae 	bl	8002a04 <_sbrk>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_sbrk_r+0x1a>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_sbrk_r+0x1a>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	200043e8 	.word	0x200043e8

080092b8 <__sread>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	460c      	mov	r4, r1
 80092bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c0:	f000 f8a0 	bl	8009404 <_read_r>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	bfab      	itete	ge
 80092c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092ca:	89a3      	ldrhlt	r3, [r4, #12]
 80092cc:	181b      	addge	r3, r3, r0
 80092ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092d2:	bfac      	ite	ge
 80092d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80092d6:	81a3      	strhlt	r3, [r4, #12]
 80092d8:	bd10      	pop	{r4, pc}

080092da <__swrite>:
 80092da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092de:	461f      	mov	r7, r3
 80092e0:	898b      	ldrh	r3, [r1, #12]
 80092e2:	05db      	lsls	r3, r3, #23
 80092e4:	4605      	mov	r5, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	4616      	mov	r6, r2
 80092ea:	d505      	bpl.n	80092f8 <__swrite+0x1e>
 80092ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f0:	2302      	movs	r3, #2
 80092f2:	2200      	movs	r2, #0
 80092f4:	f000 f868 	bl	80093c8 <_lseek_r>
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	4632      	mov	r2, r6
 8009306:	463b      	mov	r3, r7
 8009308:	4628      	mov	r0, r5
 800930a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800930e:	f000 b817 	b.w	8009340 <_write_r>

08009312 <__sseek>:
 8009312:	b510      	push	{r4, lr}
 8009314:	460c      	mov	r4, r1
 8009316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931a:	f000 f855 	bl	80093c8 <_lseek_r>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	bf15      	itete	ne
 8009324:	6560      	strne	r0, [r4, #84]	; 0x54
 8009326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800932a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800932e:	81a3      	strheq	r3, [r4, #12]
 8009330:	bf18      	it	ne
 8009332:	81a3      	strhne	r3, [r4, #12]
 8009334:	bd10      	pop	{r4, pc}

08009336 <__sclose>:
 8009336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933a:	f000 b813 	b.w	8009364 <_close_r>
	...

08009340 <_write_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4d07      	ldr	r5, [pc, #28]	; (8009360 <_write_r+0x20>)
 8009344:	4604      	mov	r4, r0
 8009346:	4608      	mov	r0, r1
 8009348:	4611      	mov	r1, r2
 800934a:	2200      	movs	r2, #0
 800934c:	602a      	str	r2, [r5, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	f7f9 fb07 	bl	8002962 <_write>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_write_r+0x1e>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_write_r+0x1e>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	200043e8 	.word	0x200043e8

08009364 <_close_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4d06      	ldr	r5, [pc, #24]	; (8009380 <_close_r+0x1c>)
 8009368:	2300      	movs	r3, #0
 800936a:	4604      	mov	r4, r0
 800936c:	4608      	mov	r0, r1
 800936e:	602b      	str	r3, [r5, #0]
 8009370:	f7f9 fb13 	bl	800299a <_close>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d102      	bne.n	800937e <_close_r+0x1a>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	b103      	cbz	r3, 800937e <_close_r+0x1a>
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	200043e8 	.word	0x200043e8

08009384 <_fstat_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4d07      	ldr	r5, [pc, #28]	; (80093a4 <_fstat_r+0x20>)
 8009388:	2300      	movs	r3, #0
 800938a:	4604      	mov	r4, r0
 800938c:	4608      	mov	r0, r1
 800938e:	4611      	mov	r1, r2
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	f7f9 fb0e 	bl	80029b2 <_fstat>
 8009396:	1c43      	adds	r3, r0, #1
 8009398:	d102      	bne.n	80093a0 <_fstat_r+0x1c>
 800939a:	682b      	ldr	r3, [r5, #0]
 800939c:	b103      	cbz	r3, 80093a0 <_fstat_r+0x1c>
 800939e:	6023      	str	r3, [r4, #0]
 80093a0:	bd38      	pop	{r3, r4, r5, pc}
 80093a2:	bf00      	nop
 80093a4:	200043e8 	.word	0x200043e8

080093a8 <_isatty_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4d06      	ldr	r5, [pc, #24]	; (80093c4 <_isatty_r+0x1c>)
 80093ac:	2300      	movs	r3, #0
 80093ae:	4604      	mov	r4, r0
 80093b0:	4608      	mov	r0, r1
 80093b2:	602b      	str	r3, [r5, #0]
 80093b4:	f7f9 fb0d 	bl	80029d2 <_isatty>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_isatty_r+0x1a>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_isatty_r+0x1a>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	200043e8 	.word	0x200043e8

080093c8 <_lseek_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4d07      	ldr	r5, [pc, #28]	; (80093e8 <_lseek_r+0x20>)
 80093cc:	4604      	mov	r4, r0
 80093ce:	4608      	mov	r0, r1
 80093d0:	4611      	mov	r1, r2
 80093d2:	2200      	movs	r2, #0
 80093d4:	602a      	str	r2, [r5, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	f7f9 fb06 	bl	80029e8 <_lseek>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	d102      	bne.n	80093e6 <_lseek_r+0x1e>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	b103      	cbz	r3, 80093e6 <_lseek_r+0x1e>
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	bd38      	pop	{r3, r4, r5, pc}
 80093e8:	200043e8 	.word	0x200043e8

080093ec <__malloc_lock>:
 80093ec:	4801      	ldr	r0, [pc, #4]	; (80093f4 <__malloc_lock+0x8>)
 80093ee:	f7ff bb1d 	b.w	8008a2c <__retarget_lock_acquire_recursive>
 80093f2:	bf00      	nop
 80093f4:	200043dc 	.word	0x200043dc

080093f8 <__malloc_unlock>:
 80093f8:	4801      	ldr	r0, [pc, #4]	; (8009400 <__malloc_unlock+0x8>)
 80093fa:	f7ff bb18 	b.w	8008a2e <__retarget_lock_release_recursive>
 80093fe:	bf00      	nop
 8009400:	200043dc 	.word	0x200043dc

08009404 <_read_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d07      	ldr	r5, [pc, #28]	; (8009424 <_read_r+0x20>)
 8009408:	4604      	mov	r4, r0
 800940a:	4608      	mov	r0, r1
 800940c:	4611      	mov	r1, r2
 800940e:	2200      	movs	r2, #0
 8009410:	602a      	str	r2, [r5, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	f7f9 fa88 	bl	8002928 <_read>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_read_r+0x1e>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_read_r+0x1e>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	200043e8 	.word	0x200043e8

08009428 <cosf>:
 8009428:	ee10 3a10 	vmov	r3, s0
 800942c:	b507      	push	{r0, r1, r2, lr}
 800942e:	4a1e      	ldr	r2, [pc, #120]	; (80094a8 <cosf+0x80>)
 8009430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009434:	4293      	cmp	r3, r2
 8009436:	dc06      	bgt.n	8009446 <cosf+0x1e>
 8009438:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80094ac <cosf+0x84>
 800943c:	b003      	add	sp, #12
 800943e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009442:	f000 ba83 	b.w	800994c <__kernel_cosf>
 8009446:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800944a:	db04      	blt.n	8009456 <cosf+0x2e>
 800944c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009450:	b003      	add	sp, #12
 8009452:	f85d fb04 	ldr.w	pc, [sp], #4
 8009456:	4668      	mov	r0, sp
 8009458:	f000 f93c 	bl	80096d4 <__ieee754_rem_pio2f>
 800945c:	f000 0003 	and.w	r0, r0, #3
 8009460:	2801      	cmp	r0, #1
 8009462:	d009      	beq.n	8009478 <cosf+0x50>
 8009464:	2802      	cmp	r0, #2
 8009466:	d010      	beq.n	800948a <cosf+0x62>
 8009468:	b9b0      	cbnz	r0, 8009498 <cosf+0x70>
 800946a:	eddd 0a01 	vldr	s1, [sp, #4]
 800946e:	ed9d 0a00 	vldr	s0, [sp]
 8009472:	f000 fa6b 	bl	800994c <__kernel_cosf>
 8009476:	e7eb      	b.n	8009450 <cosf+0x28>
 8009478:	eddd 0a01 	vldr	s1, [sp, #4]
 800947c:	ed9d 0a00 	vldr	s0, [sp]
 8009480:	f000 fd3a 	bl	8009ef8 <__kernel_sinf>
 8009484:	eeb1 0a40 	vneg.f32	s0, s0
 8009488:	e7e2      	b.n	8009450 <cosf+0x28>
 800948a:	eddd 0a01 	vldr	s1, [sp, #4]
 800948e:	ed9d 0a00 	vldr	s0, [sp]
 8009492:	f000 fa5b 	bl	800994c <__kernel_cosf>
 8009496:	e7f5      	b.n	8009484 <cosf+0x5c>
 8009498:	eddd 0a01 	vldr	s1, [sp, #4]
 800949c:	ed9d 0a00 	vldr	s0, [sp]
 80094a0:	2001      	movs	r0, #1
 80094a2:	f000 fd29 	bl	8009ef8 <__kernel_sinf>
 80094a6:	e7d3      	b.n	8009450 <cosf+0x28>
 80094a8:	3f490fd8 	.word	0x3f490fd8
 80094ac:	00000000 	.word	0x00000000

080094b0 <sinf>:
 80094b0:	ee10 3a10 	vmov	r3, s0
 80094b4:	b507      	push	{r0, r1, r2, lr}
 80094b6:	4a1f      	ldr	r2, [pc, #124]	; (8009534 <sinf+0x84>)
 80094b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094bc:	4293      	cmp	r3, r2
 80094be:	dc07      	bgt.n	80094d0 <sinf+0x20>
 80094c0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8009538 <sinf+0x88>
 80094c4:	2000      	movs	r0, #0
 80094c6:	b003      	add	sp, #12
 80094c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094cc:	f000 bd14 	b.w	8009ef8 <__kernel_sinf>
 80094d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80094d4:	db04      	blt.n	80094e0 <sinf+0x30>
 80094d6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80094da:	b003      	add	sp, #12
 80094dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80094e0:	4668      	mov	r0, sp
 80094e2:	f000 f8f7 	bl	80096d4 <__ieee754_rem_pio2f>
 80094e6:	f000 0003 	and.w	r0, r0, #3
 80094ea:	2801      	cmp	r0, #1
 80094ec:	d00a      	beq.n	8009504 <sinf+0x54>
 80094ee:	2802      	cmp	r0, #2
 80094f0:	d00f      	beq.n	8009512 <sinf+0x62>
 80094f2:	b9c0      	cbnz	r0, 8009526 <sinf+0x76>
 80094f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80094f8:	ed9d 0a00 	vldr	s0, [sp]
 80094fc:	2001      	movs	r0, #1
 80094fe:	f000 fcfb 	bl	8009ef8 <__kernel_sinf>
 8009502:	e7ea      	b.n	80094da <sinf+0x2a>
 8009504:	eddd 0a01 	vldr	s1, [sp, #4]
 8009508:	ed9d 0a00 	vldr	s0, [sp]
 800950c:	f000 fa1e 	bl	800994c <__kernel_cosf>
 8009510:	e7e3      	b.n	80094da <sinf+0x2a>
 8009512:	eddd 0a01 	vldr	s1, [sp, #4]
 8009516:	ed9d 0a00 	vldr	s0, [sp]
 800951a:	2001      	movs	r0, #1
 800951c:	f000 fcec 	bl	8009ef8 <__kernel_sinf>
 8009520:	eeb1 0a40 	vneg.f32	s0, s0
 8009524:	e7d9      	b.n	80094da <sinf+0x2a>
 8009526:	eddd 0a01 	vldr	s1, [sp, #4]
 800952a:	ed9d 0a00 	vldr	s0, [sp]
 800952e:	f000 fa0d 	bl	800994c <__kernel_cosf>
 8009532:	e7f5      	b.n	8009520 <sinf+0x70>
 8009534:	3f490fd8 	.word	0x3f490fd8
 8009538:	00000000 	.word	0x00000000

0800953c <atan2>:
 800953c:	f000 b800 	b.w	8009540 <__ieee754_atan2>

08009540 <__ieee754_atan2>:
 8009540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009544:	ec57 6b11 	vmov	r6, r7, d1
 8009548:	4273      	negs	r3, r6
 800954a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80096d0 <__ieee754_atan2+0x190>
 800954e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009552:	4333      	orrs	r3, r6
 8009554:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009558:	4573      	cmp	r3, lr
 800955a:	ec51 0b10 	vmov	r0, r1, d0
 800955e:	ee11 8a10 	vmov	r8, s2
 8009562:	d80a      	bhi.n	800957a <__ieee754_atan2+0x3a>
 8009564:	4244      	negs	r4, r0
 8009566:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800956a:	4304      	orrs	r4, r0
 800956c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009570:	4574      	cmp	r4, lr
 8009572:	ee10 9a10 	vmov	r9, s0
 8009576:	468c      	mov	ip, r1
 8009578:	d907      	bls.n	800958a <__ieee754_atan2+0x4a>
 800957a:	4632      	mov	r2, r6
 800957c:	463b      	mov	r3, r7
 800957e:	f7f6 fe7d 	bl	800027c <__adddf3>
 8009582:	ec41 0b10 	vmov	d0, r0, r1
 8009586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800958a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800958e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009592:	4334      	orrs	r4, r6
 8009594:	d103      	bne.n	800959e <__ieee754_atan2+0x5e>
 8009596:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800959a:	f000 bcf5 	b.w	8009f88 <atan>
 800959e:	17bc      	asrs	r4, r7, #30
 80095a0:	f004 0402 	and.w	r4, r4, #2
 80095a4:	ea53 0909 	orrs.w	r9, r3, r9
 80095a8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80095ac:	d107      	bne.n	80095be <__ieee754_atan2+0x7e>
 80095ae:	2c02      	cmp	r4, #2
 80095b0:	d060      	beq.n	8009674 <__ieee754_atan2+0x134>
 80095b2:	2c03      	cmp	r4, #3
 80095b4:	d1e5      	bne.n	8009582 <__ieee754_atan2+0x42>
 80095b6:	a142      	add	r1, pc, #264	; (adr r1, 80096c0 <__ieee754_atan2+0x180>)
 80095b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095bc:	e7e1      	b.n	8009582 <__ieee754_atan2+0x42>
 80095be:	ea52 0808 	orrs.w	r8, r2, r8
 80095c2:	d106      	bne.n	80095d2 <__ieee754_atan2+0x92>
 80095c4:	f1bc 0f00 	cmp.w	ip, #0
 80095c8:	da5f      	bge.n	800968a <__ieee754_atan2+0x14a>
 80095ca:	a13f      	add	r1, pc, #252	; (adr r1, 80096c8 <__ieee754_atan2+0x188>)
 80095cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d0:	e7d7      	b.n	8009582 <__ieee754_atan2+0x42>
 80095d2:	4572      	cmp	r2, lr
 80095d4:	d10f      	bne.n	80095f6 <__ieee754_atan2+0xb6>
 80095d6:	4293      	cmp	r3, r2
 80095d8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80095dc:	d107      	bne.n	80095ee <__ieee754_atan2+0xae>
 80095de:	2c02      	cmp	r4, #2
 80095e0:	d84c      	bhi.n	800967c <__ieee754_atan2+0x13c>
 80095e2:	4b35      	ldr	r3, [pc, #212]	; (80096b8 <__ieee754_atan2+0x178>)
 80095e4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80095e8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80095ec:	e7c9      	b.n	8009582 <__ieee754_atan2+0x42>
 80095ee:	2c02      	cmp	r4, #2
 80095f0:	d848      	bhi.n	8009684 <__ieee754_atan2+0x144>
 80095f2:	4b32      	ldr	r3, [pc, #200]	; (80096bc <__ieee754_atan2+0x17c>)
 80095f4:	e7f6      	b.n	80095e4 <__ieee754_atan2+0xa4>
 80095f6:	4573      	cmp	r3, lr
 80095f8:	d0e4      	beq.n	80095c4 <__ieee754_atan2+0x84>
 80095fa:	1a9b      	subs	r3, r3, r2
 80095fc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009600:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009604:	da1e      	bge.n	8009644 <__ieee754_atan2+0x104>
 8009606:	2f00      	cmp	r7, #0
 8009608:	da01      	bge.n	800960e <__ieee754_atan2+0xce>
 800960a:	323c      	adds	r2, #60	; 0x3c
 800960c:	db1e      	blt.n	800964c <__ieee754_atan2+0x10c>
 800960e:	4632      	mov	r2, r6
 8009610:	463b      	mov	r3, r7
 8009612:	f7f7 f913 	bl	800083c <__aeabi_ddiv>
 8009616:	ec41 0b10 	vmov	d0, r0, r1
 800961a:	f000 fe55 	bl	800a2c8 <fabs>
 800961e:	f000 fcb3 	bl	8009f88 <atan>
 8009622:	ec51 0b10 	vmov	r0, r1, d0
 8009626:	2c01      	cmp	r4, #1
 8009628:	d013      	beq.n	8009652 <__ieee754_atan2+0x112>
 800962a:	2c02      	cmp	r4, #2
 800962c:	d015      	beq.n	800965a <__ieee754_atan2+0x11a>
 800962e:	2c00      	cmp	r4, #0
 8009630:	d0a7      	beq.n	8009582 <__ieee754_atan2+0x42>
 8009632:	a319      	add	r3, pc, #100	; (adr r3, 8009698 <__ieee754_atan2+0x158>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f6 fe1e 	bl	8000278 <__aeabi_dsub>
 800963c:	a318      	add	r3, pc, #96	; (adr r3, 80096a0 <__ieee754_atan2+0x160>)
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	e014      	b.n	800966e <__ieee754_atan2+0x12e>
 8009644:	a118      	add	r1, pc, #96	; (adr r1, 80096a8 <__ieee754_atan2+0x168>)
 8009646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800964a:	e7ec      	b.n	8009626 <__ieee754_atan2+0xe6>
 800964c:	2000      	movs	r0, #0
 800964e:	2100      	movs	r1, #0
 8009650:	e7e9      	b.n	8009626 <__ieee754_atan2+0xe6>
 8009652:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009656:	4619      	mov	r1, r3
 8009658:	e793      	b.n	8009582 <__ieee754_atan2+0x42>
 800965a:	a30f      	add	r3, pc, #60	; (adr r3, 8009698 <__ieee754_atan2+0x158>)
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f7f6 fe0a 	bl	8000278 <__aeabi_dsub>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	a10d      	add	r1, pc, #52	; (adr r1, 80096a0 <__ieee754_atan2+0x160>)
 800966a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800966e:	f7f6 fe03 	bl	8000278 <__aeabi_dsub>
 8009672:	e786      	b.n	8009582 <__ieee754_atan2+0x42>
 8009674:	a10a      	add	r1, pc, #40	; (adr r1, 80096a0 <__ieee754_atan2+0x160>)
 8009676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800967a:	e782      	b.n	8009582 <__ieee754_atan2+0x42>
 800967c:	a10c      	add	r1, pc, #48	; (adr r1, 80096b0 <__ieee754_atan2+0x170>)
 800967e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009682:	e77e      	b.n	8009582 <__ieee754_atan2+0x42>
 8009684:	2000      	movs	r0, #0
 8009686:	2100      	movs	r1, #0
 8009688:	e77b      	b.n	8009582 <__ieee754_atan2+0x42>
 800968a:	a107      	add	r1, pc, #28	; (adr r1, 80096a8 <__ieee754_atan2+0x168>)
 800968c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009690:	e777      	b.n	8009582 <__ieee754_atan2+0x42>
 8009692:	bf00      	nop
 8009694:	f3af 8000 	nop.w
 8009698:	33145c07 	.word	0x33145c07
 800969c:	3ca1a626 	.word	0x3ca1a626
 80096a0:	54442d18 	.word	0x54442d18
 80096a4:	400921fb 	.word	0x400921fb
 80096a8:	54442d18 	.word	0x54442d18
 80096ac:	3ff921fb 	.word	0x3ff921fb
 80096b0:	54442d18 	.word	0x54442d18
 80096b4:	3fe921fb 	.word	0x3fe921fb
 80096b8:	0800a790 	.word	0x0800a790
 80096bc:	0800a7a8 	.word	0x0800a7a8
 80096c0:	54442d18 	.word	0x54442d18
 80096c4:	c00921fb 	.word	0xc00921fb
 80096c8:	54442d18 	.word	0x54442d18
 80096cc:	bff921fb 	.word	0xbff921fb
 80096d0:	7ff00000 	.word	0x7ff00000

080096d4 <__ieee754_rem_pio2f>:
 80096d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096d6:	ee10 6a10 	vmov	r6, s0
 80096da:	4b8e      	ldr	r3, [pc, #568]	; (8009914 <__ieee754_rem_pio2f+0x240>)
 80096dc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80096e0:	429d      	cmp	r5, r3
 80096e2:	b087      	sub	sp, #28
 80096e4:	eef0 7a40 	vmov.f32	s15, s0
 80096e8:	4604      	mov	r4, r0
 80096ea:	dc05      	bgt.n	80096f8 <__ieee754_rem_pio2f+0x24>
 80096ec:	2300      	movs	r3, #0
 80096ee:	ed80 0a00 	vstr	s0, [r0]
 80096f2:	6043      	str	r3, [r0, #4]
 80096f4:	2000      	movs	r0, #0
 80096f6:	e01a      	b.n	800972e <__ieee754_rem_pio2f+0x5a>
 80096f8:	4b87      	ldr	r3, [pc, #540]	; (8009918 <__ieee754_rem_pio2f+0x244>)
 80096fa:	429d      	cmp	r5, r3
 80096fc:	dc46      	bgt.n	800978c <__ieee754_rem_pio2f+0xb8>
 80096fe:	2e00      	cmp	r6, #0
 8009700:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800991c <__ieee754_rem_pio2f+0x248>
 8009704:	4b86      	ldr	r3, [pc, #536]	; (8009920 <__ieee754_rem_pio2f+0x24c>)
 8009706:	f025 050f 	bic.w	r5, r5, #15
 800970a:	dd1f      	ble.n	800974c <__ieee754_rem_pio2f+0x78>
 800970c:	429d      	cmp	r5, r3
 800970e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009712:	d00e      	beq.n	8009732 <__ieee754_rem_pio2f+0x5e>
 8009714:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8009924 <__ieee754_rem_pio2f+0x250>
 8009718:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800971c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009720:	ed80 0a00 	vstr	s0, [r0]
 8009724:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009728:	2001      	movs	r0, #1
 800972a:	edc4 7a01 	vstr	s15, [r4, #4]
 800972e:	b007      	add	sp, #28
 8009730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009732:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8009928 <__ieee754_rem_pio2f+0x254>
 8009736:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800992c <__ieee754_rem_pio2f+0x258>
 800973a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800973e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009742:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009746:	edc0 6a00 	vstr	s13, [r0]
 800974a:	e7eb      	b.n	8009724 <__ieee754_rem_pio2f+0x50>
 800974c:	429d      	cmp	r5, r3
 800974e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009752:	d00e      	beq.n	8009772 <__ieee754_rem_pio2f+0x9e>
 8009754:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009924 <__ieee754_rem_pio2f+0x250>
 8009758:	ee37 0a87 	vadd.f32	s0, s15, s14
 800975c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009760:	ed80 0a00 	vstr	s0, [r0]
 8009764:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800976c:	edc4 7a01 	vstr	s15, [r4, #4]
 8009770:	e7dd      	b.n	800972e <__ieee754_rem_pio2f+0x5a>
 8009772:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8009928 <__ieee754_rem_pio2f+0x254>
 8009776:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800992c <__ieee754_rem_pio2f+0x258>
 800977a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800977e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009782:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009786:	edc0 6a00 	vstr	s13, [r0]
 800978a:	e7eb      	b.n	8009764 <__ieee754_rem_pio2f+0x90>
 800978c:	4b68      	ldr	r3, [pc, #416]	; (8009930 <__ieee754_rem_pio2f+0x25c>)
 800978e:	429d      	cmp	r5, r3
 8009790:	dc72      	bgt.n	8009878 <__ieee754_rem_pio2f+0x1a4>
 8009792:	f000 fda2 	bl	800a2da <fabsf>
 8009796:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009934 <__ieee754_rem_pio2f+0x260>
 800979a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800979e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80097a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097aa:	ee17 0a90 	vmov	r0, s15
 80097ae:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800991c <__ieee754_rem_pio2f+0x248>
 80097b2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80097b6:	281f      	cmp	r0, #31
 80097b8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009924 <__ieee754_rem_pio2f+0x250>
 80097bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c0:	eeb1 6a47 	vneg.f32	s12, s14
 80097c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80097c8:	ee16 2a90 	vmov	r2, s13
 80097cc:	dc1c      	bgt.n	8009808 <__ieee754_rem_pio2f+0x134>
 80097ce:	495a      	ldr	r1, [pc, #360]	; (8009938 <__ieee754_rem_pio2f+0x264>)
 80097d0:	1e47      	subs	r7, r0, #1
 80097d2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80097d6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80097da:	428b      	cmp	r3, r1
 80097dc:	d014      	beq.n	8009808 <__ieee754_rem_pio2f+0x134>
 80097de:	6022      	str	r2, [r4, #0]
 80097e0:	ed94 7a00 	vldr	s14, [r4]
 80097e4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80097e8:	2e00      	cmp	r6, #0
 80097ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80097ee:	ed84 0a01 	vstr	s0, [r4, #4]
 80097f2:	da9c      	bge.n	800972e <__ieee754_rem_pio2f+0x5a>
 80097f4:	eeb1 7a47 	vneg.f32	s14, s14
 80097f8:	eeb1 0a40 	vneg.f32	s0, s0
 80097fc:	ed84 7a00 	vstr	s14, [r4]
 8009800:	ed84 0a01 	vstr	s0, [r4, #4]
 8009804:	4240      	negs	r0, r0
 8009806:	e792      	b.n	800972e <__ieee754_rem_pio2f+0x5a>
 8009808:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800980c:	15eb      	asrs	r3, r5, #23
 800980e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8009812:	2d08      	cmp	r5, #8
 8009814:	dde3      	ble.n	80097de <__ieee754_rem_pio2f+0x10a>
 8009816:	eddf 7a44 	vldr	s15, [pc, #272]	; 8009928 <__ieee754_rem_pio2f+0x254>
 800981a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800992c <__ieee754_rem_pio2f+0x258>
 800981e:	eef0 6a40 	vmov.f32	s13, s0
 8009822:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009826:	ee30 0a66 	vsub.f32	s0, s0, s13
 800982a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800982e:	eef0 7a40 	vmov.f32	s15, s0
 8009832:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009836:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800983a:	ee15 2a90 	vmov	r2, s11
 800983e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009842:	1a5b      	subs	r3, r3, r1
 8009844:	2b19      	cmp	r3, #25
 8009846:	dc04      	bgt.n	8009852 <__ieee754_rem_pio2f+0x17e>
 8009848:	edc4 5a00 	vstr	s11, [r4]
 800984c:	eeb0 0a66 	vmov.f32	s0, s13
 8009850:	e7c6      	b.n	80097e0 <__ieee754_rem_pio2f+0x10c>
 8009852:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800993c <__ieee754_rem_pio2f+0x268>
 8009856:	eeb0 0a66 	vmov.f32	s0, s13
 800985a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800985e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009862:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009940 <__ieee754_rem_pio2f+0x26c>
 8009866:	eee6 7a25 	vfma.f32	s15, s12, s11
 800986a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800986e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009872:	ed84 7a00 	vstr	s14, [r4]
 8009876:	e7b3      	b.n	80097e0 <__ieee754_rem_pio2f+0x10c>
 8009878:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800987c:	db06      	blt.n	800988c <__ieee754_rem_pio2f+0x1b8>
 800987e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009882:	edc0 7a01 	vstr	s15, [r0, #4]
 8009886:	edc0 7a00 	vstr	s15, [r0]
 800988a:	e733      	b.n	80096f4 <__ieee754_rem_pio2f+0x20>
 800988c:	15ea      	asrs	r2, r5, #23
 800988e:	3a86      	subs	r2, #134	; 0x86
 8009890:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009894:	ee07 3a90 	vmov	s15, r3
 8009898:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800989c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009944 <__ieee754_rem_pio2f+0x270>
 80098a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80098a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098a8:	ed8d 7a03 	vstr	s14, [sp, #12]
 80098ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80098b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80098b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80098b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098bc:	ed8d 7a04 	vstr	s14, [sp, #16]
 80098c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80098c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80098c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098cc:	edcd 7a05 	vstr	s15, [sp, #20]
 80098d0:	d11e      	bne.n	8009910 <__ieee754_rem_pio2f+0x23c>
 80098d2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80098d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098da:	bf14      	ite	ne
 80098dc:	2302      	movne	r3, #2
 80098de:	2301      	moveq	r3, #1
 80098e0:	4919      	ldr	r1, [pc, #100]	; (8009948 <__ieee754_rem_pio2f+0x274>)
 80098e2:	9101      	str	r1, [sp, #4]
 80098e4:	2102      	movs	r1, #2
 80098e6:	9100      	str	r1, [sp, #0]
 80098e8:	a803      	add	r0, sp, #12
 80098ea:	4621      	mov	r1, r4
 80098ec:	f000 f88e 	bl	8009a0c <__kernel_rem_pio2f>
 80098f0:	2e00      	cmp	r6, #0
 80098f2:	f6bf af1c 	bge.w	800972e <__ieee754_rem_pio2f+0x5a>
 80098f6:	edd4 7a00 	vldr	s15, [r4]
 80098fa:	eef1 7a67 	vneg.f32	s15, s15
 80098fe:	edc4 7a00 	vstr	s15, [r4]
 8009902:	edd4 7a01 	vldr	s15, [r4, #4]
 8009906:	eef1 7a67 	vneg.f32	s15, s15
 800990a:	edc4 7a01 	vstr	s15, [r4, #4]
 800990e:	e779      	b.n	8009804 <__ieee754_rem_pio2f+0x130>
 8009910:	2303      	movs	r3, #3
 8009912:	e7e5      	b.n	80098e0 <__ieee754_rem_pio2f+0x20c>
 8009914:	3f490fd8 	.word	0x3f490fd8
 8009918:	4016cbe3 	.word	0x4016cbe3
 800991c:	3fc90f80 	.word	0x3fc90f80
 8009920:	3fc90fd0 	.word	0x3fc90fd0
 8009924:	37354443 	.word	0x37354443
 8009928:	37354400 	.word	0x37354400
 800992c:	2e85a308 	.word	0x2e85a308
 8009930:	43490f80 	.word	0x43490f80
 8009934:	3f22f984 	.word	0x3f22f984
 8009938:	0800a7c0 	.word	0x0800a7c0
 800993c:	2e85a300 	.word	0x2e85a300
 8009940:	248d3132 	.word	0x248d3132
 8009944:	43800000 	.word	0x43800000
 8009948:	0800a840 	.word	0x0800a840

0800994c <__kernel_cosf>:
 800994c:	ee10 3a10 	vmov	r3, s0
 8009950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009954:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009958:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800995c:	da05      	bge.n	800996a <__kernel_cosf+0x1e>
 800995e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009962:	ee17 2a90 	vmov	r2, s15
 8009966:	2a00      	cmp	r2, #0
 8009968:	d03d      	beq.n	80099e6 <__kernel_cosf+0x9a>
 800996a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800996e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80099ec <__kernel_cosf+0xa0>
 8009972:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80099f0 <__kernel_cosf+0xa4>
 8009976:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80099f4 <__kernel_cosf+0xa8>
 800997a:	4a1f      	ldr	r2, [pc, #124]	; (80099f8 <__kernel_cosf+0xac>)
 800997c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009980:	4293      	cmp	r3, r2
 8009982:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80099fc <__kernel_cosf+0xb0>
 8009986:	eee7 7a25 	vfma.f32	s15, s14, s11
 800998a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009a00 <__kernel_cosf+0xb4>
 800998e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009992:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8009a04 <__kernel_cosf+0xb8>
 8009996:	eee7 7a25 	vfma.f32	s15, s14, s11
 800999a:	eeb0 7a66 	vmov.f32	s14, s13
 800999e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80099a2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80099a6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80099aa:	ee67 6a25 	vmul.f32	s13, s14, s11
 80099ae:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80099b2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80099b6:	dc04      	bgt.n	80099c2 <__kernel_cosf+0x76>
 80099b8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80099bc:	ee36 0a47 	vsub.f32	s0, s12, s14
 80099c0:	4770      	bx	lr
 80099c2:	4a11      	ldr	r2, [pc, #68]	; (8009a08 <__kernel_cosf+0xbc>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	bfda      	itte	le
 80099c8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80099cc:	ee06 3a90 	vmovle	s13, r3
 80099d0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80099d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80099d8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80099dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80099e4:	4770      	bx	lr
 80099e6:	eeb0 0a46 	vmov.f32	s0, s12
 80099ea:	4770      	bx	lr
 80099ec:	ad47d74e 	.word	0xad47d74e
 80099f0:	310f74f6 	.word	0x310f74f6
 80099f4:	3d2aaaab 	.word	0x3d2aaaab
 80099f8:	3e999999 	.word	0x3e999999
 80099fc:	b493f27c 	.word	0xb493f27c
 8009a00:	37d00d01 	.word	0x37d00d01
 8009a04:	bab60b61 	.word	0xbab60b61
 8009a08:	3f480000 	.word	0x3f480000

08009a0c <__kernel_rem_pio2f>:
 8009a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a10:	ed2d 8b04 	vpush	{d8-d9}
 8009a14:	b0d9      	sub	sp, #356	; 0x164
 8009a16:	4688      	mov	r8, r1
 8009a18:	9002      	str	r0, [sp, #8]
 8009a1a:	49bb      	ldr	r1, [pc, #748]	; (8009d08 <__kernel_rem_pio2f+0x2fc>)
 8009a1c:	9866      	ldr	r0, [sp, #408]	; 0x198
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8009a24:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8009a28:	1e59      	subs	r1, r3, #1
 8009a2a:	1d13      	adds	r3, r2, #4
 8009a2c:	db27      	blt.n	8009a7e <__kernel_rem_pio2f+0x72>
 8009a2e:	f1b2 0b03 	subs.w	fp, r2, #3
 8009a32:	bf48      	it	mi
 8009a34:	f102 0b04 	addmi.w	fp, r2, #4
 8009a38:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8009a3c:	1c45      	adds	r5, r0, #1
 8009a3e:	00ec      	lsls	r4, r5, #3
 8009a40:	1a47      	subs	r7, r0, r1
 8009a42:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8009d18 <__kernel_rem_pio2f+0x30c>
 8009a46:	9403      	str	r4, [sp, #12]
 8009a48:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8009a4c:	eb0a 0c01 	add.w	ip, sl, r1
 8009a50:	ae1c      	add	r6, sp, #112	; 0x70
 8009a52:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8009a56:	2400      	movs	r4, #0
 8009a58:	4564      	cmp	r4, ip
 8009a5a:	dd12      	ble.n	8009a82 <__kernel_rem_pio2f+0x76>
 8009a5c:	9b01      	ldr	r3, [sp, #4]
 8009a5e:	ac1c      	add	r4, sp, #112	; 0x70
 8009a60:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009a64:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8009a68:	f04f 0c00 	mov.w	ip, #0
 8009a6c:	45d4      	cmp	ip, sl
 8009a6e:	dc27      	bgt.n	8009ac0 <__kernel_rem_pio2f+0xb4>
 8009a70:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009a74:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8009d18 <__kernel_rem_pio2f+0x30c>
 8009a78:	4627      	mov	r7, r4
 8009a7a:	2600      	movs	r6, #0
 8009a7c:	e016      	b.n	8009aac <__kernel_rem_pio2f+0xa0>
 8009a7e:	2000      	movs	r0, #0
 8009a80:	e7dc      	b.n	8009a3c <__kernel_rem_pio2f+0x30>
 8009a82:	42e7      	cmn	r7, r4
 8009a84:	bf5d      	ittte	pl
 8009a86:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8009a8a:	ee07 3a90 	vmovpl	s15, r3
 8009a8e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009a92:	eef0 7a47 	vmovmi.f32	s15, s14
 8009a96:	ece6 7a01 	vstmia	r6!, {s15}
 8009a9a:	3401      	adds	r4, #1
 8009a9c:	e7dc      	b.n	8009a58 <__kernel_rem_pio2f+0x4c>
 8009a9e:	ecf9 6a01 	vldmia	r9!, {s13}
 8009aa2:	ed97 7a00 	vldr	s14, [r7]
 8009aa6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009aaa:	3601      	adds	r6, #1
 8009aac:	428e      	cmp	r6, r1
 8009aae:	f1a7 0704 	sub.w	r7, r7, #4
 8009ab2:	ddf4      	ble.n	8009a9e <__kernel_rem_pio2f+0x92>
 8009ab4:	eceb 7a01 	vstmia	fp!, {s15}
 8009ab8:	f10c 0c01 	add.w	ip, ip, #1
 8009abc:	3404      	adds	r4, #4
 8009abe:	e7d5      	b.n	8009a6c <__kernel_rem_pio2f+0x60>
 8009ac0:	ab08      	add	r3, sp, #32
 8009ac2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009ac6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8009d14 <__kernel_rem_pio2f+0x308>
 8009aca:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8009d10 <__kernel_rem_pio2f+0x304>
 8009ace:	9304      	str	r3, [sp, #16]
 8009ad0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8009ad4:	4656      	mov	r6, sl
 8009ad6:	00b3      	lsls	r3, r6, #2
 8009ad8:	9305      	str	r3, [sp, #20]
 8009ada:	ab58      	add	r3, sp, #352	; 0x160
 8009adc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009ae0:	ac08      	add	r4, sp, #32
 8009ae2:	ab44      	add	r3, sp, #272	; 0x110
 8009ae4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8009ae8:	46a4      	mov	ip, r4
 8009aea:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009aee:	4637      	mov	r7, r6
 8009af0:	2f00      	cmp	r7, #0
 8009af2:	f1a0 0004 	sub.w	r0, r0, #4
 8009af6:	dc4f      	bgt.n	8009b98 <__kernel_rem_pio2f+0x18c>
 8009af8:	4628      	mov	r0, r5
 8009afa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009afe:	f000 fc35 	bl	800a36c <scalbnf>
 8009b02:	eeb0 8a40 	vmov.f32	s16, s0
 8009b06:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8009b0a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009b0e:	f000 fbeb 	bl	800a2e8 <floorf>
 8009b12:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009b16:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009b1a:	2d00      	cmp	r5, #0
 8009b1c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009b20:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009b24:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8009b28:	ee17 9a90 	vmov	r9, s15
 8009b2c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009b30:	dd44      	ble.n	8009bbc <__kernel_rem_pio2f+0x1b0>
 8009b32:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8009b36:	ab08      	add	r3, sp, #32
 8009b38:	f1c5 0e08 	rsb	lr, r5, #8
 8009b3c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8009b40:	fa47 f00e 	asr.w	r0, r7, lr
 8009b44:	4481      	add	r9, r0
 8009b46:	fa00 f00e 	lsl.w	r0, r0, lr
 8009b4a:	1a3f      	subs	r7, r7, r0
 8009b4c:	f1c5 0007 	rsb	r0, r5, #7
 8009b50:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8009b54:	4107      	asrs	r7, r0
 8009b56:	2f00      	cmp	r7, #0
 8009b58:	dd3f      	ble.n	8009bda <__kernel_rem_pio2f+0x1ce>
 8009b5a:	f04f 0e00 	mov.w	lr, #0
 8009b5e:	f109 0901 	add.w	r9, r9, #1
 8009b62:	4673      	mov	r3, lr
 8009b64:	4576      	cmp	r6, lr
 8009b66:	dc6b      	bgt.n	8009c40 <__kernel_rem_pio2f+0x234>
 8009b68:	2d00      	cmp	r5, #0
 8009b6a:	dd04      	ble.n	8009b76 <__kernel_rem_pio2f+0x16a>
 8009b6c:	2d01      	cmp	r5, #1
 8009b6e:	d078      	beq.n	8009c62 <__kernel_rem_pio2f+0x256>
 8009b70:	2d02      	cmp	r5, #2
 8009b72:	f000 8081 	beq.w	8009c78 <__kernel_rem_pio2f+0x26c>
 8009b76:	2f02      	cmp	r7, #2
 8009b78:	d12f      	bne.n	8009bda <__kernel_rem_pio2f+0x1ce>
 8009b7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009b7e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009b82:	b353      	cbz	r3, 8009bda <__kernel_rem_pio2f+0x1ce>
 8009b84:	4628      	mov	r0, r5
 8009b86:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009b8a:	f000 fbef 	bl	800a36c <scalbnf>
 8009b8e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009b92:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009b96:	e020      	b.n	8009bda <__kernel_rem_pio2f+0x1ce>
 8009b98:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009b9c:	3f01      	subs	r7, #1
 8009b9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ba6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009baa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009bae:	ecac 0a01 	vstmia	ip!, {s0}
 8009bb2:	ed90 0a00 	vldr	s0, [r0]
 8009bb6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009bba:	e799      	b.n	8009af0 <__kernel_rem_pio2f+0xe4>
 8009bbc:	d105      	bne.n	8009bca <__kernel_rem_pio2f+0x1be>
 8009bbe:	1e70      	subs	r0, r6, #1
 8009bc0:	ab08      	add	r3, sp, #32
 8009bc2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8009bc6:	11ff      	asrs	r7, r7, #7
 8009bc8:	e7c5      	b.n	8009b56 <__kernel_rem_pio2f+0x14a>
 8009bca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009bce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd6:	da31      	bge.n	8009c3c <__kernel_rem_pio2f+0x230>
 8009bd8:	2700      	movs	r7, #0
 8009bda:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be2:	f040 809b 	bne.w	8009d1c <__kernel_rem_pio2f+0x310>
 8009be6:	1e74      	subs	r4, r6, #1
 8009be8:	46a4      	mov	ip, r4
 8009bea:	2000      	movs	r0, #0
 8009bec:	45d4      	cmp	ip, sl
 8009bee:	da4a      	bge.n	8009c86 <__kernel_rem_pio2f+0x27a>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d07a      	beq.n	8009cea <__kernel_rem_pio2f+0x2de>
 8009bf4:	ab08      	add	r3, sp, #32
 8009bf6:	3d08      	subs	r5, #8
 8009bf8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 8081 	beq.w	8009d04 <__kernel_rem_pio2f+0x2f8>
 8009c02:	4628      	mov	r0, r5
 8009c04:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009c08:	00a5      	lsls	r5, r4, #2
 8009c0a:	f000 fbaf 	bl	800a36c <scalbnf>
 8009c0e:	aa44      	add	r2, sp, #272	; 0x110
 8009c10:	1d2b      	adds	r3, r5, #4
 8009c12:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8009d14 <__kernel_rem_pio2f+0x308>
 8009c16:	18d1      	adds	r1, r2, r3
 8009c18:	4622      	mov	r2, r4
 8009c1a:	2a00      	cmp	r2, #0
 8009c1c:	f280 80ae 	bge.w	8009d7c <__kernel_rem_pio2f+0x370>
 8009c20:	4622      	mov	r2, r4
 8009c22:	2a00      	cmp	r2, #0
 8009c24:	f2c0 80cc 	blt.w	8009dc0 <__kernel_rem_pio2f+0x3b4>
 8009c28:	a944      	add	r1, sp, #272	; 0x110
 8009c2a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8009c2e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8009d0c <__kernel_rem_pio2f+0x300>
 8009c32:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009d18 <__kernel_rem_pio2f+0x30c>
 8009c36:	2000      	movs	r0, #0
 8009c38:	1aa1      	subs	r1, r4, r2
 8009c3a:	e0b6      	b.n	8009daa <__kernel_rem_pio2f+0x39e>
 8009c3c:	2702      	movs	r7, #2
 8009c3e:	e78c      	b.n	8009b5a <__kernel_rem_pio2f+0x14e>
 8009c40:	6820      	ldr	r0, [r4, #0]
 8009c42:	b94b      	cbnz	r3, 8009c58 <__kernel_rem_pio2f+0x24c>
 8009c44:	b118      	cbz	r0, 8009c4e <__kernel_rem_pio2f+0x242>
 8009c46:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8009c4a:	6020      	str	r0, [r4, #0]
 8009c4c:	2001      	movs	r0, #1
 8009c4e:	f10e 0e01 	add.w	lr, lr, #1
 8009c52:	3404      	adds	r4, #4
 8009c54:	4603      	mov	r3, r0
 8009c56:	e785      	b.n	8009b64 <__kernel_rem_pio2f+0x158>
 8009c58:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8009c5c:	6020      	str	r0, [r4, #0]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	e7f5      	b.n	8009c4e <__kernel_rem_pio2f+0x242>
 8009c62:	1e74      	subs	r4, r6, #1
 8009c64:	a808      	add	r0, sp, #32
 8009c66:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8009c6a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009c6e:	f10d 0c20 	add.w	ip, sp, #32
 8009c72:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8009c76:	e77e      	b.n	8009b76 <__kernel_rem_pio2f+0x16a>
 8009c78:	1e74      	subs	r4, r6, #1
 8009c7a:	a808      	add	r0, sp, #32
 8009c7c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8009c80:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009c84:	e7f3      	b.n	8009c6e <__kernel_rem_pio2f+0x262>
 8009c86:	ab08      	add	r3, sp, #32
 8009c88:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009c8c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009c90:	4318      	orrs	r0, r3
 8009c92:	e7ab      	b.n	8009bec <__kernel_rem_pio2f+0x1e0>
 8009c94:	f10c 0c01 	add.w	ip, ip, #1
 8009c98:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8009c9c:	2c00      	cmp	r4, #0
 8009c9e:	d0f9      	beq.n	8009c94 <__kernel_rem_pio2f+0x288>
 8009ca0:	9b05      	ldr	r3, [sp, #20]
 8009ca2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009ca6:	eb0d 0003 	add.w	r0, sp, r3
 8009caa:	9b01      	ldr	r3, [sp, #4]
 8009cac:	18f4      	adds	r4, r6, r3
 8009cae:	ab1c      	add	r3, sp, #112	; 0x70
 8009cb0:	1c77      	adds	r7, r6, #1
 8009cb2:	384c      	subs	r0, #76	; 0x4c
 8009cb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009cb8:	4466      	add	r6, ip
 8009cba:	42be      	cmp	r6, r7
 8009cbc:	f6ff af0b 	blt.w	8009ad6 <__kernel_rem_pio2f+0xca>
 8009cc0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8009cc4:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009cc8:	ee07 3a90 	vmov	s15, r3
 8009ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cd0:	f04f 0c00 	mov.w	ip, #0
 8009cd4:	ece4 7a01 	vstmia	r4!, {s15}
 8009cd8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009d18 <__kernel_rem_pio2f+0x30c>
 8009cdc:	46a1      	mov	r9, r4
 8009cde:	458c      	cmp	ip, r1
 8009ce0:	dd07      	ble.n	8009cf2 <__kernel_rem_pio2f+0x2e6>
 8009ce2:	ece0 7a01 	vstmia	r0!, {s15}
 8009ce6:	3701      	adds	r7, #1
 8009ce8:	e7e7      	b.n	8009cba <__kernel_rem_pio2f+0x2ae>
 8009cea:	9804      	ldr	r0, [sp, #16]
 8009cec:	f04f 0c01 	mov.w	ip, #1
 8009cf0:	e7d2      	b.n	8009c98 <__kernel_rem_pio2f+0x28c>
 8009cf2:	ecfe 6a01 	vldmia	lr!, {s13}
 8009cf6:	ed39 7a01 	vldmdb	r9!, {s14}
 8009cfa:	f10c 0c01 	add.w	ip, ip, #1
 8009cfe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009d02:	e7ec      	b.n	8009cde <__kernel_rem_pio2f+0x2d2>
 8009d04:	3c01      	subs	r4, #1
 8009d06:	e775      	b.n	8009bf4 <__kernel_rem_pio2f+0x1e8>
 8009d08:	0800ab84 	.word	0x0800ab84
 8009d0c:	0800ab58 	.word	0x0800ab58
 8009d10:	43800000 	.word	0x43800000
 8009d14:	3b800000 	.word	0x3b800000
 8009d18:	00000000 	.word	0x00000000
 8009d1c:	9b03      	ldr	r3, [sp, #12]
 8009d1e:	eeb0 0a48 	vmov.f32	s0, s16
 8009d22:	1a98      	subs	r0, r3, r2
 8009d24:	f000 fb22 	bl	800a36c <scalbnf>
 8009d28:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8009d10 <__kernel_rem_pio2f+0x304>
 8009d2c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d34:	db19      	blt.n	8009d6a <__kernel_rem_pio2f+0x35e>
 8009d36:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009d14 <__kernel_rem_pio2f+0x308>
 8009d3a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009d3e:	aa08      	add	r2, sp, #32
 8009d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d44:	1c74      	adds	r4, r6, #1
 8009d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d4a:	3508      	adds	r5, #8
 8009d4c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d54:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009d58:	ee10 3a10 	vmov	r3, s0
 8009d5c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009d60:	ee17 3a90 	vmov	r3, s15
 8009d64:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009d68:	e74b      	b.n	8009c02 <__kernel_rem_pio2f+0x1f6>
 8009d6a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009d6e:	aa08      	add	r2, sp, #32
 8009d70:	ee10 3a10 	vmov	r3, s0
 8009d74:	4634      	mov	r4, r6
 8009d76:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009d7a:	e742      	b.n	8009c02 <__kernel_rem_pio2f+0x1f6>
 8009d7c:	a808      	add	r0, sp, #32
 8009d7e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8009d82:	9001      	str	r0, [sp, #4]
 8009d84:	ee07 0a90 	vmov	s15, r0
 8009d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d8c:	3a01      	subs	r2, #1
 8009d8e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009d92:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009d96:	ed61 7a01 	vstmdb	r1!, {s15}
 8009d9a:	e73e      	b.n	8009c1a <__kernel_rem_pio2f+0x20e>
 8009d9c:	ecfc 6a01 	vldmia	ip!, {s13}
 8009da0:	ecb6 7a01 	vldmia	r6!, {s14}
 8009da4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009da8:	3001      	adds	r0, #1
 8009daa:	4550      	cmp	r0, sl
 8009dac:	dc01      	bgt.n	8009db2 <__kernel_rem_pio2f+0x3a6>
 8009dae:	4288      	cmp	r0, r1
 8009db0:	ddf4      	ble.n	8009d9c <__kernel_rem_pio2f+0x390>
 8009db2:	a858      	add	r0, sp, #352	; 0x160
 8009db4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009db8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8009dbc:	3a01      	subs	r2, #1
 8009dbe:	e730      	b.n	8009c22 <__kernel_rem_pio2f+0x216>
 8009dc0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8009dc2:	2a02      	cmp	r2, #2
 8009dc4:	dc09      	bgt.n	8009dda <__kernel_rem_pio2f+0x3ce>
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	dc2a      	bgt.n	8009e20 <__kernel_rem_pio2f+0x414>
 8009dca:	d043      	beq.n	8009e54 <__kernel_rem_pio2f+0x448>
 8009dcc:	f009 0007 	and.w	r0, r9, #7
 8009dd0:	b059      	add	sp, #356	; 0x164
 8009dd2:	ecbd 8b04 	vpop	{d8-d9}
 8009dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dda:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d1f5      	bne.n	8009dcc <__kernel_rem_pio2f+0x3c0>
 8009de0:	ab30      	add	r3, sp, #192	; 0xc0
 8009de2:	442b      	add	r3, r5
 8009de4:	461a      	mov	r2, r3
 8009de6:	4619      	mov	r1, r3
 8009de8:	4620      	mov	r0, r4
 8009dea:	2800      	cmp	r0, #0
 8009dec:	f1a1 0104 	sub.w	r1, r1, #4
 8009df0:	dc51      	bgt.n	8009e96 <__kernel_rem_pio2f+0x48a>
 8009df2:	4621      	mov	r1, r4
 8009df4:	2901      	cmp	r1, #1
 8009df6:	f1a2 0204 	sub.w	r2, r2, #4
 8009dfa:	dc5c      	bgt.n	8009eb6 <__kernel_rem_pio2f+0x4aa>
 8009dfc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8009d18 <__kernel_rem_pio2f+0x30c>
 8009e00:	3304      	adds	r3, #4
 8009e02:	2c01      	cmp	r4, #1
 8009e04:	dc67      	bgt.n	8009ed6 <__kernel_rem_pio2f+0x4ca>
 8009e06:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8009e0a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8009e0e:	2f00      	cmp	r7, #0
 8009e10:	d167      	bne.n	8009ee2 <__kernel_rem_pio2f+0x4d6>
 8009e12:	edc8 6a00 	vstr	s13, [r8]
 8009e16:	ed88 7a01 	vstr	s14, [r8, #4]
 8009e1a:	edc8 7a02 	vstr	s15, [r8, #8]
 8009e1e:	e7d5      	b.n	8009dcc <__kernel_rem_pio2f+0x3c0>
 8009e20:	aa30      	add	r2, sp, #192	; 0xc0
 8009e22:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8009d18 <__kernel_rem_pio2f+0x30c>
 8009e26:	4413      	add	r3, r2
 8009e28:	4622      	mov	r2, r4
 8009e2a:	2a00      	cmp	r2, #0
 8009e2c:	da24      	bge.n	8009e78 <__kernel_rem_pio2f+0x46c>
 8009e2e:	b34f      	cbz	r7, 8009e84 <__kernel_rem_pio2f+0x478>
 8009e30:	eef1 7a47 	vneg.f32	s15, s14
 8009e34:	edc8 7a00 	vstr	s15, [r8]
 8009e38:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8009e3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e40:	aa31      	add	r2, sp, #196	; 0xc4
 8009e42:	2301      	movs	r3, #1
 8009e44:	429c      	cmp	r4, r3
 8009e46:	da20      	bge.n	8009e8a <__kernel_rem_pio2f+0x47e>
 8009e48:	b10f      	cbz	r7, 8009e4e <__kernel_rem_pio2f+0x442>
 8009e4a:	eef1 7a67 	vneg.f32	s15, s15
 8009e4e:	edc8 7a01 	vstr	s15, [r8, #4]
 8009e52:	e7bb      	b.n	8009dcc <__kernel_rem_pio2f+0x3c0>
 8009e54:	aa30      	add	r2, sp, #192	; 0xc0
 8009e56:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8009d18 <__kernel_rem_pio2f+0x30c>
 8009e5a:	4413      	add	r3, r2
 8009e5c:	2c00      	cmp	r4, #0
 8009e5e:	da05      	bge.n	8009e6c <__kernel_rem_pio2f+0x460>
 8009e60:	b10f      	cbz	r7, 8009e66 <__kernel_rem_pio2f+0x45a>
 8009e62:	eef1 7a67 	vneg.f32	s15, s15
 8009e66:	edc8 7a00 	vstr	s15, [r8]
 8009e6a:	e7af      	b.n	8009dcc <__kernel_rem_pio2f+0x3c0>
 8009e6c:	ed33 7a01 	vldmdb	r3!, {s14}
 8009e70:	3c01      	subs	r4, #1
 8009e72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e76:	e7f1      	b.n	8009e5c <__kernel_rem_pio2f+0x450>
 8009e78:	ed73 7a01 	vldmdb	r3!, {s15}
 8009e7c:	3a01      	subs	r2, #1
 8009e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e82:	e7d2      	b.n	8009e2a <__kernel_rem_pio2f+0x41e>
 8009e84:	eef0 7a47 	vmov.f32	s15, s14
 8009e88:	e7d4      	b.n	8009e34 <__kernel_rem_pio2f+0x428>
 8009e8a:	ecb2 7a01 	vldmia	r2!, {s14}
 8009e8e:	3301      	adds	r3, #1
 8009e90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e94:	e7d6      	b.n	8009e44 <__kernel_rem_pio2f+0x438>
 8009e96:	edd1 7a00 	vldr	s15, [r1]
 8009e9a:	edd1 6a01 	vldr	s13, [r1, #4]
 8009e9e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009ea2:	3801      	subs	r0, #1
 8009ea4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ea8:	ed81 7a00 	vstr	s14, [r1]
 8009eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eb0:	edc1 7a01 	vstr	s15, [r1, #4]
 8009eb4:	e799      	b.n	8009dea <__kernel_rem_pio2f+0x3de>
 8009eb6:	edd2 7a00 	vldr	s15, [r2]
 8009eba:	edd2 6a01 	vldr	s13, [r2, #4]
 8009ebe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009ec2:	3901      	subs	r1, #1
 8009ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ec8:	ed82 7a00 	vstr	s14, [r2]
 8009ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed0:	edc2 7a01 	vstr	s15, [r2, #4]
 8009ed4:	e78e      	b.n	8009df4 <__kernel_rem_pio2f+0x3e8>
 8009ed6:	ed33 7a01 	vldmdb	r3!, {s14}
 8009eda:	3c01      	subs	r4, #1
 8009edc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ee0:	e78f      	b.n	8009e02 <__kernel_rem_pio2f+0x3f6>
 8009ee2:	eef1 6a66 	vneg.f32	s13, s13
 8009ee6:	eeb1 7a47 	vneg.f32	s14, s14
 8009eea:	edc8 6a00 	vstr	s13, [r8]
 8009eee:	ed88 7a01 	vstr	s14, [r8, #4]
 8009ef2:	eef1 7a67 	vneg.f32	s15, s15
 8009ef6:	e790      	b.n	8009e1a <__kernel_rem_pio2f+0x40e>

08009ef8 <__kernel_sinf>:
 8009ef8:	ee10 3a10 	vmov	r3, s0
 8009efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f00:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009f04:	da04      	bge.n	8009f10 <__kernel_sinf+0x18>
 8009f06:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009f0a:	ee17 3a90 	vmov	r3, s15
 8009f0e:	b35b      	cbz	r3, 8009f68 <__kernel_sinf+0x70>
 8009f10:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009f14:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009f6c <__kernel_sinf+0x74>
 8009f18:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009f70 <__kernel_sinf+0x78>
 8009f1c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009f20:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009f74 <__kernel_sinf+0x7c>
 8009f24:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009f28:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009f78 <__kernel_sinf+0x80>
 8009f2c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009f30:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009f7c <__kernel_sinf+0x84>
 8009f34:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009f38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009f3c:	b930      	cbnz	r0, 8009f4c <__kernel_sinf+0x54>
 8009f3e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009f80 <__kernel_sinf+0x88>
 8009f42:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009f46:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009f4a:	4770      	bx	lr
 8009f4c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009f50:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009f54:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009f58:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009f5c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009f84 <__kernel_sinf+0x8c>
 8009f60:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009f64:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009f70:	b2d72f34 	.word	0xb2d72f34
 8009f74:	3638ef1b 	.word	0x3638ef1b
 8009f78:	b9500d01 	.word	0xb9500d01
 8009f7c:	3c088889 	.word	0x3c088889
 8009f80:	be2aaaab 	.word	0xbe2aaaab
 8009f84:	3e2aaaab 	.word	0x3e2aaaab

08009f88 <atan>:
 8009f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	ec55 4b10 	vmov	r4, r5, d0
 8009f90:	4bc3      	ldr	r3, [pc, #780]	; (800a2a0 <atan+0x318>)
 8009f92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f96:	429e      	cmp	r6, r3
 8009f98:	46ab      	mov	fp, r5
 8009f9a:	dd18      	ble.n	8009fce <atan+0x46>
 8009f9c:	4bc1      	ldr	r3, [pc, #772]	; (800a2a4 <atan+0x31c>)
 8009f9e:	429e      	cmp	r6, r3
 8009fa0:	dc01      	bgt.n	8009fa6 <atan+0x1e>
 8009fa2:	d109      	bne.n	8009fb8 <atan+0x30>
 8009fa4:	b144      	cbz	r4, 8009fb8 <atan+0x30>
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	462b      	mov	r3, r5
 8009faa:	4620      	mov	r0, r4
 8009fac:	4629      	mov	r1, r5
 8009fae:	f7f6 f965 	bl	800027c <__adddf3>
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	460d      	mov	r5, r1
 8009fb6:	e006      	b.n	8009fc6 <atan+0x3e>
 8009fb8:	f1bb 0f00 	cmp.w	fp, #0
 8009fbc:	f300 8131 	bgt.w	800a222 <atan+0x29a>
 8009fc0:	a59b      	add	r5, pc, #620	; (adr r5, 800a230 <atan+0x2a8>)
 8009fc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009fc6:	ec45 4b10 	vmov	d0, r4, r5
 8009fca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fce:	4bb6      	ldr	r3, [pc, #728]	; (800a2a8 <atan+0x320>)
 8009fd0:	429e      	cmp	r6, r3
 8009fd2:	dc14      	bgt.n	8009ffe <atan+0x76>
 8009fd4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009fd8:	429e      	cmp	r6, r3
 8009fda:	dc0d      	bgt.n	8009ff8 <atan+0x70>
 8009fdc:	a396      	add	r3, pc, #600	; (adr r3, 800a238 <atan+0x2b0>)
 8009fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe2:	ee10 0a10 	vmov	r0, s0
 8009fe6:	4629      	mov	r1, r5
 8009fe8:	f7f6 f948 	bl	800027c <__adddf3>
 8009fec:	4baf      	ldr	r3, [pc, #700]	; (800a2ac <atan+0x324>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f7f6 fd8a 	bl	8000b08 <__aeabi_dcmpgt>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d1e6      	bne.n	8009fc6 <atan+0x3e>
 8009ff8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009ffc:	e02b      	b.n	800a056 <atan+0xce>
 8009ffe:	f000 f963 	bl	800a2c8 <fabs>
 800a002:	4bab      	ldr	r3, [pc, #684]	; (800a2b0 <atan+0x328>)
 800a004:	429e      	cmp	r6, r3
 800a006:	ec55 4b10 	vmov	r4, r5, d0
 800a00a:	f300 80bf 	bgt.w	800a18c <atan+0x204>
 800a00e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a012:	429e      	cmp	r6, r3
 800a014:	f300 80a0 	bgt.w	800a158 <atan+0x1d0>
 800a018:	ee10 2a10 	vmov	r2, s0
 800a01c:	ee10 0a10 	vmov	r0, s0
 800a020:	462b      	mov	r3, r5
 800a022:	4629      	mov	r1, r5
 800a024:	f7f6 f92a 	bl	800027c <__adddf3>
 800a028:	4ba0      	ldr	r3, [pc, #640]	; (800a2ac <atan+0x324>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	f7f6 f924 	bl	8000278 <__aeabi_dsub>
 800a030:	2200      	movs	r2, #0
 800a032:	4606      	mov	r6, r0
 800a034:	460f      	mov	r7, r1
 800a036:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a03a:	4620      	mov	r0, r4
 800a03c:	4629      	mov	r1, r5
 800a03e:	f7f6 f91d 	bl	800027c <__adddf3>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4630      	mov	r0, r6
 800a048:	4639      	mov	r1, r7
 800a04a:	f7f6 fbf7 	bl	800083c <__aeabi_ddiv>
 800a04e:	f04f 0a00 	mov.w	sl, #0
 800a052:	4604      	mov	r4, r0
 800a054:	460d      	mov	r5, r1
 800a056:	4622      	mov	r2, r4
 800a058:	462b      	mov	r3, r5
 800a05a:	4620      	mov	r0, r4
 800a05c:	4629      	mov	r1, r5
 800a05e:	f7f6 fac3 	bl	80005e8 <__aeabi_dmul>
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	4680      	mov	r8, r0
 800a068:	4689      	mov	r9, r1
 800a06a:	f7f6 fabd 	bl	80005e8 <__aeabi_dmul>
 800a06e:	a374      	add	r3, pc, #464	; (adr r3, 800a240 <atan+0x2b8>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	4606      	mov	r6, r0
 800a076:	460f      	mov	r7, r1
 800a078:	f7f6 fab6 	bl	80005e8 <__aeabi_dmul>
 800a07c:	a372      	add	r3, pc, #456	; (adr r3, 800a248 <atan+0x2c0>)
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	f7f6 f8fb 	bl	800027c <__adddf3>
 800a086:	4632      	mov	r2, r6
 800a088:	463b      	mov	r3, r7
 800a08a:	f7f6 faad 	bl	80005e8 <__aeabi_dmul>
 800a08e:	a370      	add	r3, pc, #448	; (adr r3, 800a250 <atan+0x2c8>)
 800a090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a094:	f7f6 f8f2 	bl	800027c <__adddf3>
 800a098:	4632      	mov	r2, r6
 800a09a:	463b      	mov	r3, r7
 800a09c:	f7f6 faa4 	bl	80005e8 <__aeabi_dmul>
 800a0a0:	a36d      	add	r3, pc, #436	; (adr r3, 800a258 <atan+0x2d0>)
 800a0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a6:	f7f6 f8e9 	bl	800027c <__adddf3>
 800a0aa:	4632      	mov	r2, r6
 800a0ac:	463b      	mov	r3, r7
 800a0ae:	f7f6 fa9b 	bl	80005e8 <__aeabi_dmul>
 800a0b2:	a36b      	add	r3, pc, #428	; (adr r3, 800a260 <atan+0x2d8>)
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	f7f6 f8e0 	bl	800027c <__adddf3>
 800a0bc:	4632      	mov	r2, r6
 800a0be:	463b      	mov	r3, r7
 800a0c0:	f7f6 fa92 	bl	80005e8 <__aeabi_dmul>
 800a0c4:	a368      	add	r3, pc, #416	; (adr r3, 800a268 <atan+0x2e0>)
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	f7f6 f8d7 	bl	800027c <__adddf3>
 800a0ce:	4642      	mov	r2, r8
 800a0d0:	464b      	mov	r3, r9
 800a0d2:	f7f6 fa89 	bl	80005e8 <__aeabi_dmul>
 800a0d6:	a366      	add	r3, pc, #408	; (adr r3, 800a270 <atan+0x2e8>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	4680      	mov	r8, r0
 800a0de:	4689      	mov	r9, r1
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	4639      	mov	r1, r7
 800a0e4:	f7f6 fa80 	bl	80005e8 <__aeabi_dmul>
 800a0e8:	a363      	add	r3, pc, #396	; (adr r3, 800a278 <atan+0x2f0>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f7f6 f8c3 	bl	8000278 <__aeabi_dsub>
 800a0f2:	4632      	mov	r2, r6
 800a0f4:	463b      	mov	r3, r7
 800a0f6:	f7f6 fa77 	bl	80005e8 <__aeabi_dmul>
 800a0fa:	a361      	add	r3, pc, #388	; (adr r3, 800a280 <atan+0x2f8>)
 800a0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a100:	f7f6 f8ba 	bl	8000278 <__aeabi_dsub>
 800a104:	4632      	mov	r2, r6
 800a106:	463b      	mov	r3, r7
 800a108:	f7f6 fa6e 	bl	80005e8 <__aeabi_dmul>
 800a10c:	a35e      	add	r3, pc, #376	; (adr r3, 800a288 <atan+0x300>)
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	f7f6 f8b1 	bl	8000278 <__aeabi_dsub>
 800a116:	4632      	mov	r2, r6
 800a118:	463b      	mov	r3, r7
 800a11a:	f7f6 fa65 	bl	80005e8 <__aeabi_dmul>
 800a11e:	a35c      	add	r3, pc, #368	; (adr r3, 800a290 <atan+0x308>)
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	f7f6 f8a8 	bl	8000278 <__aeabi_dsub>
 800a128:	4632      	mov	r2, r6
 800a12a:	463b      	mov	r3, r7
 800a12c:	f7f6 fa5c 	bl	80005e8 <__aeabi_dmul>
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	4640      	mov	r0, r8
 800a136:	4649      	mov	r1, r9
 800a138:	f7f6 f8a0 	bl	800027c <__adddf3>
 800a13c:	4622      	mov	r2, r4
 800a13e:	462b      	mov	r3, r5
 800a140:	f7f6 fa52 	bl	80005e8 <__aeabi_dmul>
 800a144:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a148:	4602      	mov	r2, r0
 800a14a:	460b      	mov	r3, r1
 800a14c:	d14b      	bne.n	800a1e6 <atan+0x25e>
 800a14e:	4620      	mov	r0, r4
 800a150:	4629      	mov	r1, r5
 800a152:	f7f6 f891 	bl	8000278 <__aeabi_dsub>
 800a156:	e72c      	b.n	8009fb2 <atan+0x2a>
 800a158:	ee10 0a10 	vmov	r0, s0
 800a15c:	4b53      	ldr	r3, [pc, #332]	; (800a2ac <atan+0x324>)
 800a15e:	2200      	movs	r2, #0
 800a160:	4629      	mov	r1, r5
 800a162:	f7f6 f889 	bl	8000278 <__aeabi_dsub>
 800a166:	4b51      	ldr	r3, [pc, #324]	; (800a2ac <atan+0x324>)
 800a168:	4606      	mov	r6, r0
 800a16a:	460f      	mov	r7, r1
 800a16c:	2200      	movs	r2, #0
 800a16e:	4620      	mov	r0, r4
 800a170:	4629      	mov	r1, r5
 800a172:	f7f6 f883 	bl	800027c <__adddf3>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4630      	mov	r0, r6
 800a17c:	4639      	mov	r1, r7
 800a17e:	f7f6 fb5d 	bl	800083c <__aeabi_ddiv>
 800a182:	f04f 0a01 	mov.w	sl, #1
 800a186:	4604      	mov	r4, r0
 800a188:	460d      	mov	r5, r1
 800a18a:	e764      	b.n	800a056 <atan+0xce>
 800a18c:	4b49      	ldr	r3, [pc, #292]	; (800a2b4 <atan+0x32c>)
 800a18e:	429e      	cmp	r6, r3
 800a190:	da1d      	bge.n	800a1ce <atan+0x246>
 800a192:	ee10 0a10 	vmov	r0, s0
 800a196:	4b48      	ldr	r3, [pc, #288]	; (800a2b8 <atan+0x330>)
 800a198:	2200      	movs	r2, #0
 800a19a:	4629      	mov	r1, r5
 800a19c:	f7f6 f86c 	bl	8000278 <__aeabi_dsub>
 800a1a0:	4b45      	ldr	r3, [pc, #276]	; (800a2b8 <atan+0x330>)
 800a1a2:	4606      	mov	r6, r0
 800a1a4:	460f      	mov	r7, r1
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	f7f6 fa1c 	bl	80005e8 <__aeabi_dmul>
 800a1b0:	4b3e      	ldr	r3, [pc, #248]	; (800a2ac <atan+0x324>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f7f6 f862 	bl	800027c <__adddf3>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	4630      	mov	r0, r6
 800a1be:	4639      	mov	r1, r7
 800a1c0:	f7f6 fb3c 	bl	800083c <__aeabi_ddiv>
 800a1c4:	f04f 0a02 	mov.w	sl, #2
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	460d      	mov	r5, r1
 800a1cc:	e743      	b.n	800a056 <atan+0xce>
 800a1ce:	462b      	mov	r3, r5
 800a1d0:	ee10 2a10 	vmov	r2, s0
 800a1d4:	4939      	ldr	r1, [pc, #228]	; (800a2bc <atan+0x334>)
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	f7f6 fb30 	bl	800083c <__aeabi_ddiv>
 800a1dc:	f04f 0a03 	mov.w	sl, #3
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	460d      	mov	r5, r1
 800a1e4:	e737      	b.n	800a056 <atan+0xce>
 800a1e6:	4b36      	ldr	r3, [pc, #216]	; (800a2c0 <atan+0x338>)
 800a1e8:	4e36      	ldr	r6, [pc, #216]	; (800a2c4 <atan+0x33c>)
 800a1ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a1ee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a1f2:	e9da 2300 	ldrd	r2, r3, [sl]
 800a1f6:	f7f6 f83f 	bl	8000278 <__aeabi_dsub>
 800a1fa:	4622      	mov	r2, r4
 800a1fc:	462b      	mov	r3, r5
 800a1fe:	f7f6 f83b 	bl	8000278 <__aeabi_dsub>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a20a:	f7f6 f835 	bl	8000278 <__aeabi_dsub>
 800a20e:	f1bb 0f00 	cmp.w	fp, #0
 800a212:	4604      	mov	r4, r0
 800a214:	460d      	mov	r5, r1
 800a216:	f6bf aed6 	bge.w	8009fc6 <atan+0x3e>
 800a21a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a21e:	461d      	mov	r5, r3
 800a220:	e6d1      	b.n	8009fc6 <atan+0x3e>
 800a222:	a51d      	add	r5, pc, #116	; (adr r5, 800a298 <atan+0x310>)
 800a224:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a228:	e6cd      	b.n	8009fc6 <atan+0x3e>
 800a22a:	bf00      	nop
 800a22c:	f3af 8000 	nop.w
 800a230:	54442d18 	.word	0x54442d18
 800a234:	bff921fb 	.word	0xbff921fb
 800a238:	8800759c 	.word	0x8800759c
 800a23c:	7e37e43c 	.word	0x7e37e43c
 800a240:	e322da11 	.word	0xe322da11
 800a244:	3f90ad3a 	.word	0x3f90ad3a
 800a248:	24760deb 	.word	0x24760deb
 800a24c:	3fa97b4b 	.word	0x3fa97b4b
 800a250:	a0d03d51 	.word	0xa0d03d51
 800a254:	3fb10d66 	.word	0x3fb10d66
 800a258:	c54c206e 	.word	0xc54c206e
 800a25c:	3fb745cd 	.word	0x3fb745cd
 800a260:	920083ff 	.word	0x920083ff
 800a264:	3fc24924 	.word	0x3fc24924
 800a268:	5555550d 	.word	0x5555550d
 800a26c:	3fd55555 	.word	0x3fd55555
 800a270:	2c6a6c2f 	.word	0x2c6a6c2f
 800a274:	bfa2b444 	.word	0xbfa2b444
 800a278:	52defd9a 	.word	0x52defd9a
 800a27c:	3fadde2d 	.word	0x3fadde2d
 800a280:	af749a6d 	.word	0xaf749a6d
 800a284:	3fb3b0f2 	.word	0x3fb3b0f2
 800a288:	fe231671 	.word	0xfe231671
 800a28c:	3fbc71c6 	.word	0x3fbc71c6
 800a290:	9998ebc4 	.word	0x9998ebc4
 800a294:	3fc99999 	.word	0x3fc99999
 800a298:	54442d18 	.word	0x54442d18
 800a29c:	3ff921fb 	.word	0x3ff921fb
 800a2a0:	440fffff 	.word	0x440fffff
 800a2a4:	7ff00000 	.word	0x7ff00000
 800a2a8:	3fdbffff 	.word	0x3fdbffff
 800a2ac:	3ff00000 	.word	0x3ff00000
 800a2b0:	3ff2ffff 	.word	0x3ff2ffff
 800a2b4:	40038000 	.word	0x40038000
 800a2b8:	3ff80000 	.word	0x3ff80000
 800a2bc:	bff00000 	.word	0xbff00000
 800a2c0:	0800abb0 	.word	0x0800abb0
 800a2c4:	0800ab90 	.word	0x0800ab90

0800a2c8 <fabs>:
 800a2c8:	ec51 0b10 	vmov	r0, r1, d0
 800a2cc:	ee10 2a10 	vmov	r2, s0
 800a2d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2d4:	ec43 2b10 	vmov	d0, r2, r3
 800a2d8:	4770      	bx	lr

0800a2da <fabsf>:
 800a2da:	ee10 3a10 	vmov	r3, s0
 800a2de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2e2:	ee00 3a10 	vmov	s0, r3
 800a2e6:	4770      	bx	lr

0800a2e8 <floorf>:
 800a2e8:	ee10 3a10 	vmov	r3, s0
 800a2ec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a2f0:	3a7f      	subs	r2, #127	; 0x7f
 800a2f2:	2a16      	cmp	r2, #22
 800a2f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a2f8:	dc2a      	bgt.n	800a350 <floorf+0x68>
 800a2fa:	2a00      	cmp	r2, #0
 800a2fc:	da11      	bge.n	800a322 <floorf+0x3a>
 800a2fe:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a360 <floorf+0x78>
 800a302:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a306:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a30e:	dd05      	ble.n	800a31c <floorf+0x34>
 800a310:	2b00      	cmp	r3, #0
 800a312:	da23      	bge.n	800a35c <floorf+0x74>
 800a314:	4a13      	ldr	r2, [pc, #76]	; (800a364 <floorf+0x7c>)
 800a316:	2900      	cmp	r1, #0
 800a318:	bf18      	it	ne
 800a31a:	4613      	movne	r3, r2
 800a31c:	ee00 3a10 	vmov	s0, r3
 800a320:	4770      	bx	lr
 800a322:	4911      	ldr	r1, [pc, #68]	; (800a368 <floorf+0x80>)
 800a324:	4111      	asrs	r1, r2
 800a326:	420b      	tst	r3, r1
 800a328:	d0fa      	beq.n	800a320 <floorf+0x38>
 800a32a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a360 <floorf+0x78>
 800a32e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a332:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a33a:	ddef      	ble.n	800a31c <floorf+0x34>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	bfbe      	ittt	lt
 800a340:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a344:	fa40 f202 	asrlt.w	r2, r0, r2
 800a348:	189b      	addlt	r3, r3, r2
 800a34a:	ea23 0301 	bic.w	r3, r3, r1
 800a34e:	e7e5      	b.n	800a31c <floorf+0x34>
 800a350:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a354:	d3e4      	bcc.n	800a320 <floorf+0x38>
 800a356:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a35a:	4770      	bx	lr
 800a35c:	2300      	movs	r3, #0
 800a35e:	e7dd      	b.n	800a31c <floorf+0x34>
 800a360:	7149f2ca 	.word	0x7149f2ca
 800a364:	bf800000 	.word	0xbf800000
 800a368:	007fffff 	.word	0x007fffff

0800a36c <scalbnf>:
 800a36c:	ee10 3a10 	vmov	r3, s0
 800a370:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a374:	d025      	beq.n	800a3c2 <scalbnf+0x56>
 800a376:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a37a:	d302      	bcc.n	800a382 <scalbnf+0x16>
 800a37c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a380:	4770      	bx	lr
 800a382:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a386:	d122      	bne.n	800a3ce <scalbnf+0x62>
 800a388:	4b2a      	ldr	r3, [pc, #168]	; (800a434 <scalbnf+0xc8>)
 800a38a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a438 <scalbnf+0xcc>
 800a38e:	4298      	cmp	r0, r3
 800a390:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a394:	db16      	blt.n	800a3c4 <scalbnf+0x58>
 800a396:	ee10 3a10 	vmov	r3, s0
 800a39a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a39e:	3a19      	subs	r2, #25
 800a3a0:	4402      	add	r2, r0
 800a3a2:	2afe      	cmp	r2, #254	; 0xfe
 800a3a4:	dd15      	ble.n	800a3d2 <scalbnf+0x66>
 800a3a6:	ee10 3a10 	vmov	r3, s0
 800a3aa:	eddf 7a24 	vldr	s15, [pc, #144]	; 800a43c <scalbnf+0xd0>
 800a3ae:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a440 <scalbnf+0xd4>
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	eeb0 7a67 	vmov.f32	s14, s15
 800a3b8:	bfb8      	it	lt
 800a3ba:	eef0 7a66 	vmovlt.f32	s15, s13
 800a3be:	ee27 0a27 	vmul.f32	s0, s14, s15
 800a3c2:	4770      	bx	lr
 800a3c4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a444 <scalbnf+0xd8>
 800a3c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a3cc:	4770      	bx	lr
 800a3ce:	0dd2      	lsrs	r2, r2, #23
 800a3d0:	e7e6      	b.n	800a3a0 <scalbnf+0x34>
 800a3d2:	2a00      	cmp	r2, #0
 800a3d4:	dd06      	ble.n	800a3e4 <scalbnf+0x78>
 800a3d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3da:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a3de:	ee00 3a10 	vmov	s0, r3
 800a3e2:	4770      	bx	lr
 800a3e4:	f112 0f16 	cmn.w	r2, #22
 800a3e8:	da1a      	bge.n	800a420 <scalbnf+0xb4>
 800a3ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a3ee:	4298      	cmp	r0, r3
 800a3f0:	ee10 3a10 	vmov	r3, s0
 800a3f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3f8:	dd0a      	ble.n	800a410 <scalbnf+0xa4>
 800a3fa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a43c <scalbnf+0xd0>
 800a3fe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a440 <scalbnf+0xd4>
 800a402:	eef0 7a40 	vmov.f32	s15, s0
 800a406:	2b00      	cmp	r3, #0
 800a408:	bf18      	it	ne
 800a40a:	eeb0 0a47 	vmovne.f32	s0, s14
 800a40e:	e7db      	b.n	800a3c8 <scalbnf+0x5c>
 800a410:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a444 <scalbnf+0xd8>
 800a414:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a448 <scalbnf+0xdc>
 800a418:	eef0 7a40 	vmov.f32	s15, s0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	e7f3      	b.n	800a408 <scalbnf+0x9c>
 800a420:	3219      	adds	r2, #25
 800a422:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a426:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a42a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a44c <scalbnf+0xe0>
 800a42e:	ee07 3a10 	vmov	s14, r3
 800a432:	e7c4      	b.n	800a3be <scalbnf+0x52>
 800a434:	ffff3cb0 	.word	0xffff3cb0
 800a438:	4c000000 	.word	0x4c000000
 800a43c:	7149f2ca 	.word	0x7149f2ca
 800a440:	f149f2ca 	.word	0xf149f2ca
 800a444:	0da24260 	.word	0x0da24260
 800a448:	8da24260 	.word	0x8da24260
 800a44c:	33000000 	.word	0x33000000

0800a450 <_init>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	bf00      	nop
 800a454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a456:	bc08      	pop	{r3}
 800a458:	469e      	mov	lr, r3
 800a45a:	4770      	bx	lr

0800a45c <_fini>:
 800a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45e:	bf00      	nop
 800a460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a462:	bc08      	pop	{r3}
 800a464:	469e      	mov	lr, r3
 800a466:	4770      	bx	lr
